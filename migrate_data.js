require('dotenv').config();
const { Client } = require('pg');
const sqlite3 = require('sqlite3').verbose();
const config = require('./config');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pgClient = new Client({
  host: config.DATABASE.postgres.host,
  port: config.DATABASE.postgres.port,
  database: config.DATABASE.postgres.database,
  user: config.DATABASE.postgres.user,
  password: config.DATABASE.postgres.password
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const sqliteDb = new sqlite3.Database(config.DATABASE.name);

async function migrateData() {
  try {
    await pgClient.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üì¶ –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM users', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const user of users) {
      await pgClient.query(`
        INSERT INTO users (
          telegram_id, username, full_name, role, p_coins, energy, 
          registration_date, contacts, is_registered, status, status_message, last_activity
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
        ON CONFLICT (telegram_id) DO NOTHING`,
        [
          user.telegram_id, user.username, user.full_name, user.role, 
          user.p_coins, user.energy, user.registration_date, user.contacts, 
          user.is_registered, user.status, user.status_message, user.last_activity
        ]
      );
    }
    console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–ø–∞–ª–∫–∏
    console.log('üì¶ –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–ø–∞–ª–∫–∏...');
    const clickerStats = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM clicker_stats', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const stat of clickerStats) {
      // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL –ø–æ telegram_id
      const userResult = await pgClient.query('SELECT id FROM users WHERE telegram_id = $1', [stat.user_id]);
      if (userResult.rows.length > 0) {
        await pgClient.query(`
          INSERT INTO clicker_stats (user_id, total_clicks, last_click)
          VALUES ($1, $2, $3)
          ON CONFLICT (user_id) DO UPDATE SET
          total_clicks = $2, last_click = $3`,
          [userResult.rows[0].id, stat.total_clicks, stat.last_click]
        );
      }
    }
    console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${clickerStats.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...

    console.log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PostgreSQL!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
  } finally {
    await pgClient.end();
    sqliteDb.close();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
if (require.main === module) {
  migrateData();
}

module.exports = migrateData;