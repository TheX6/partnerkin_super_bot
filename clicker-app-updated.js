// clicker-app.js –¥–ª—è —Ç–∞–ø–∞–ª–∫–∏
const express = require('express');
const path = require('path');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–∫—É—é –∂–µ, –∫–∞–∫ –∏ –±–æ—Ç)
const db = require('./database'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –±–æ—Ç–æ–º

const app = express();
const PORT = process.env.CLICKER_PORT || 3001;

// –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (HTML, CSS, JS)
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// === API: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–∞ ===
app.post('/api/click', async (req, res) => {
    const { userId } = req.body;

    if (!userId) {
        return res.status(400).json({ error: 'userId required' });
    }

    const now = new Date().toISOString();

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.get('SELECT id, energy, p_coins FROM users WHERE telegram_id = ?', [userId]);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        if (user.energy <= 0) {
            return res.status(400).json({ error: 'No energy left' });
        }

        // –¢—Ä–∞—Ç–∏–º 1% —ç–Ω–µ—Ä–≥–∏–∏, –¥–∞—ë–º 1 –ü-–∫–æ–∏–Ω
        const newEnergy = Math.max(0, user.energy - 1);
        const coinsEarned = 1;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.run(
            'UPDATE users SET energy = ?, p_coins = p_coins + ? WHERE telegram_id = ?',
            [newEnergy, coinsEarned, userId]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–ø–æ–≤
        await db.run(
            `INSERT INTO clicker_stats (user_id, total_clicks, last_click)
             VALUES ((SELECT id FROM users WHERE telegram_id = ?), 1, ?)
             ON CONFLICT(user_id) DO UPDATE SET
             total_clicks = clicker_stats.total_clicks + 1,
             last_click = ?`,
            [userId, now, now]
        );

        res.json({
            success: true,
            coins: coinsEarned,
            energy: newEnergy
        });
    } catch (err) {
        console.error('Click error:', err);
        res.status(500).json({ error: 'DB update failed' });
    }
});

// === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App ===
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'clicker.html'));
});

app.listen(PORT, () => {
    console.log(`üéÆ –¢–∞–ø–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∞–ø–∞–ª–∫—É...');
    console.log('üíæ –ó–∞–∫—Ä—ã–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º PostgreSQL –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    const dbType = require('./config').DATABASE.type;
    if (dbType === 'postgresql') {
        if (typeof db.end === 'function') {
            db.end(() => {
                console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
                console.log('üëã –¢–∞–ø–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏!');
                process.exit(0);
            });
        } else {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
            console.log('üëã –¢–∞–ø–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏!');
            process.exit(0);
        }
    } else {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
        console.log('üëã –¢–∞–ø–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏!');
        process.exit(0);
    }
});