// testSecurity.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

require('dotenv').config();
const { validateEnvironment, checkCompatibility } = require('../security/envValidator');
const { hashPassword, verifyPassword, validatePasswordStrength } = require('../security/passwordHasher');
const { 
    validateTelegramId, 
    validateUsername, 
    validateMessageText,
    validatePCoinsAmount,
    validateDate,
    validateTime,
    validateUrl,
    isSqlSafe,
    sanitizeString
} = require('../security/inputValidator');
const { isAdmin, verifyAdminPassword, createAdminSession, verifyAdminSession } = require('../security/adminAuth');

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
async function testEnvironmentValidation() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    const result = validateEnvironment();
    
    if (result.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:');
        result.errors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (result.warnings.length > 0) {
        console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
        result.warnings.forEach(warning => console.log(`  - ${warning}`));
    }
    
    return result.isValid;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 */
async function testCompatibility() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...');
    
    const result = checkCompatibility();
    
    if (result.isCompatible) {
        console.log('‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');
        result.issues.forEach(issue => console.log(`  - ${issue}`));
    }
    
    return result.isCompatible;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
 */
async function testPasswordHashing() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...');
    
    try {
        const testPassword = 'TestPassword123!';
        
        // –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const hashedPassword = await hashPassword(testPassword);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
        
        // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        const isValid = await verifyPassword(testPassword, hashedPassword);
        if (isValid) {
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        } else {
            console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            return false;
        }
        
        // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        const isInvalid = await verifyPassword('WrongPassword', hashedPassword);
        if (!isInvalid) {
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        } else {
            console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            return false;
        }
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        const strengthResult = validatePasswordStrength(testPassword);
        if (strengthResult.isValid) {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        } else {
            console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:');
            strengthResult.errors.forEach(error => console.log(`  - ${error}`));
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:', error);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function testInputValidation() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    let allTestsPassed = true;
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram ID
    const validTelegramId = validateTelegramId(123456789);
    if (validTelegramId.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ Telegram ID
    const invalidTelegramId = validateTelegramId('invalid');
    if (!invalidTelegramId.isValid) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ Telegram ID –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ Telegram ID –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const validUsername = validateUsername('TestUser');
    if (validUsername.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const validMessage = validateMessageText('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    if (validMessage.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã P-–∫–æ–∏–Ω–æ–≤
    const validAmount = validatePCoinsAmount(100.50);
    if (validAmount.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã P-–∫–æ–∏–Ω–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã P-–∫–æ–∏–Ω–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
    const validDate = validateDate('2023-12-31');
    if (validDate.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    const validTime = validateTime('23:59');
    if (validTime.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
    const validUrl = validateUrl('https://example.com');
    if (validUrl.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è URL –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL
    const safeInput = isSqlSafe('Normal text');
    if (safeInput) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SQL
    const unsafeInput = isSqlSafe("SELECT * FROM users; DROP TABLE users;");
    if (!unsafeInput) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SQL –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SQL –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    // –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
    const sanitized = sanitizeString("Test'--String");
    if (sanitized === "Test''String") {
        console.log('‚úÖ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–∞');
    } else {
        console.log('‚ùå –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        allTestsPassed = false;
    }
    
    return allTestsPassed;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
async function testAdminAuth() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    try {
        // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î)
        const adminCheck = await isAdmin(123456789);
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${adminCheck ? '—è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' : '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'}`);
        
        // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (–º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π)
        const passwordCheck = await verifyAdminPassword(123456789, 'test');
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${passwordCheck ? '–ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π' : '–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        const session = await createAdminSession(123456789);
        if (session) {
            console.log('‚úÖ –°–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');
            
            // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
            const sessionCheck = await verifyAdminSession(123456789, session.token);
            if (sessionCheck) {
                console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞');
            } else {
                console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            }
        } else {
            console.log('‚ÑπÔ∏è –°–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î)');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
 */
async function testSqlInjectionProtection() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π...');
    
    const maliciousInputs = [
        "'; DROP TABLE users; --",
        "' OR '1'='1",
        "'; SELECT * FROM admins; --",
        "'; UPDATE users SET role='admin'; --",
        "' UNION SELECT password FROM admin_passwords --"
    ];
    
    let allTestsPassed = true;
    
    for (const input of maliciousInputs) {
        const isSafe = isSqlSafe(input);
        if (!isSafe) {
            console.log(`‚úÖ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –≤–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${input.substring(0, 30)}...`);
        } else {
            console.log(`‚ùå –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–πËæìÂÖ• –ø—Ä–æ–ø—É—â–µ–Ω: ${input.substring(0, 30)}...`);
            allTestsPassed = false;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é
        const sanitized = sanitizeString(input);
        if (sanitized !== input) {
            console.log(`‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${input.substring(0, 30)}...`);
        } else {
            console.log(`‚ùå –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${input.substring(0, 30)}...`);
            allTestsPassed = false;
        }
    }
    
    return allTestsPassed;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runSecurityTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ "–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ"');
    console.log('================================================');
    console.log('');
    
    const testResults = {
        environment: await testEnvironmentValidation(),
        compatibility: await testCompatibility(),
        passwordHashing: await testPasswordHashing(),
        inputValidation: await testInputValidation(),
        adminAuth: await testAdminAuth(),
        sqlInjectionProtection: await testSqlInjectionProtection()
    };
    
    console.log('');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
    console.log('===================');
    
    let totalTests = 0;
    let passedTests = 0;
    
    for (const [testName, result] of Object.entries(testResults)) {
        totalTests++;
        if (result) {
            passedTests++;
            console.log(`‚úÖ ${testName}: –ü—Ä–æ–π–¥–µ–Ω`);
        } else {
            console.log(`‚ùå ${testName}: –ù–µ –ø—Ä–æ–π–¥–µ–Ω`);
        }
    }
    
    console.log('');
    console.log(`üìà –ò—Ç–æ–≥: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === totalTests) {
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
        console.log('');
        console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: node scripts/migrateAdminPassword.js');
        console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_PASSWORD');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
        console.log('4. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –≤ production —Å—Ä–µ–¥–µ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ SECURITY_SETUP.md');
    } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.');
    }
    
    return passedTests === totalTests;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
    runSecurityTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
            process.exit(1);
        });
}

module.exports = {
    runSecurityTests,
    testEnvironmentValidation,
    testCompatibility,
    testPasswordHashing,
    testInputValidation,
    testAdminAuth,
    testSqlInjectionProtection
};