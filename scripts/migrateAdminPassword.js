// migrateAdminPassword.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

require('dotenv').config();
const bcrypt = require('bcrypt');
const db = require('../database');
const { hashPassword } = require('../security/passwordHasher');

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ —Å–æ–ª–µ–Ω–∏—è
const SALT_ROUNDS = 12;

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
async function createAdminPasswordsTable() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã admin_passwords...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        const tableExists = await new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const config = require('../config');
            const dbType = config.DATABASE.type;
            
            if (dbType === 'postgresql') {
                // –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º information_schema
                db.get(`
                    SELECT table_name FROM information_schema.tables
                    WHERE table_schema = 'public' AND table_name = 'admin_passwords'
                `, [], (err, row) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(!!row);
                    }
                });
            } else {
                // –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º information_schema
                db.get(`
                    SELECT table_name FROM information_schema.tables
                    WHERE table_schema = 'public' AND table_name = 'admin_passwords'
                `, [], (err, row) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(!!row);
                    }
                });
            }
        });
        
        if (!tableExists) {
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_passwords...');
            await new Promise((resolve, reject) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const config = require('../config');
                const dbType = config.DATABASE.type;
                
                let createTableQuery;
                if (dbType === 'postgresql') {
                    // –î–ª—è PostgreSQL
                    createTableQuery = `
                        CREATE TABLE admin_passwords (
                            id SERIAL PRIMARY KEY,
                            telegram_id BIGINT UNIQUE NOT NULL,
                            password_hash TEXT NOT NULL,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    `;
                } else {
                    // –î–ª—è PostgreSQL
                    createTableQuery = `
                        CREATE TABLE admin_passwords (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            telegram_id BIGINT UNIQUE NOT NULL,
                            password_hash TEXT NOT NULL,
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                        )
                    `;
                }
                
                db.run(createTableQuery, [], (err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_passwords —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_passwords —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã admin_passwords:', error);
        throw error;
    }
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
async function migrateAdminPassword() {
    try {
        console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const currentPassword = process.env.ADMIN_PASSWORD || 'partnerkin1212';
        
        if (!currentPassword || currentPassword === 'partnerkin1212') {
            console.log('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!');
            console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_PASSWORD');
        }
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
        const hashedPassword = await hashPassword(currentPassword);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
        const admins = await new Promise((resolve, reject) => {
            db.all('SELECT telegram_id FROM admins', [], (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        });
        
        if (admins.length === 0) {
            console.log('‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for (const admin of admins) {
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.telegram_id}...`);
            
            await new Promise((resolve, reject) => {
                db.run(`
                    INSERT INTO admin_passwords (telegram_id, password_hash, updated_at)
                    VALUES (?, ?, CURRENT_TIMESTAMP)
                `, [admin.telegram_id, hashedPassword], (err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
            
            console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω`);
        }
        
        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('');
        console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º:');
        console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_PASSWORD');
        console.log('2. –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ .env —Ñ–∞–π–ª–µ');
        console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
async function checkPasswordMigration() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...');
        
        const passwordExists = await new Promise((resolve, reject) => {
            db.get('SELECT COUNT(*) as count FROM admin_passwords', [], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row.count > 0);
                }
            });
        });
        
        if (passwordExists) {
            console.log('‚úÖ –ü–∞—Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
            return true;
        } else {
            console.log('‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        return false;
    }
}

/**
 * –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é (—É–¥–∞–ª—è–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏)
 */
async function rollbackMigration() {
    try {
        console.log('üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
        
        await new Promise((resolve, reject) => {
            db.run('DELETE FROM admin_passwords', [], (err) => {
                if (err) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
        
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
 */
async function testPasswordHashing() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const testPassword = 'TestPassword123!';
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await hashPassword(testPassword);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const { verifyPassword } = require('../security/passwordHasher');
        const isValid = await verifyPassword(testPassword, hashedPassword);
        
        if (isValid) {
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const isInvalid = await verifyPassword('WrongPassword', hashedPassword);
        
        if (!isInvalid) {
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É');
            return false;
        }
        
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        console.log('üöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        console.log('=====================================');
        console.log('');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const testPassed = await testPasswordHashing();
        if (!testPassed) {
            console.log('‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –º–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            process.exit(1);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–∞—Ä–æ–ª–µ–π
        await createAdminPasswordsTable();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
        const isMigrated = await checkPasswordMigration();
        
        if (isMigrated) {
            console.log('');
            console.log('‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('  node scripts/migrateAdminPassword.js --force  - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è');
            console.log('  node scripts/migrateAdminPassword.js --rollback - –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            const args = process.argv.slice(2);
            
            if (args.includes('--force')) {
                console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
                await migrateAdminPassword();
            } else if (args.includes('--rollback')) {
                console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...');
                await rollbackMigration();
            } else {
                console.log('üëç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π');
            }
        } else {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            await migrateAdminPassword();
        }
        
        console.log('');
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if (db.end) {
            db.end();
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
}

module.exports = {
    createAdminPasswordsTable,
    migrateAdminPassword,
    checkPasswordMigration,
    rollbackMigration,
    testPasswordHashing
};