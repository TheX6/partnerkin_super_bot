// app.js - –ë–æ—Ç "–ñ–∏–∑–Ω—å –≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ" - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø üöÄ
const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();

// –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù –û–¢ BOTFATHER
const token = '7774658901:AAH2hgG6VZotlEBrts81LUFME8K6v4jGQQc';

const bot = new TelegramBot(token, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
global.userScreenshots = {};
global.waitingForPoints = {};
global.adminStates = {};

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('partnerkino.db');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        full_name TEXT,
        role TEXT DEFAULT '–Ω–æ–≤–∏—á–æ–∫',
        p_coins INTEGER DEFAULT 0,
        energy INTEGER DEFAULT 100,
        registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        contacts TEXT,
        is_registered INTEGER DEFAULT 0
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS intern_progress (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        test_name TEXT,
        completed INTEGER DEFAULT 0,
        points_earned INTEGER DEFAULT 0,
        completed_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS test_submissions (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        telegram_id INTEGER,
        username TEXT,
        test_name TEXT,
        points_claimed INTEGER,
        photo_file_id TEXT,
        status TEXT DEFAULT 'pending',
        submitted_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        admin_id INTEGER,
        reviewed_date DATETIME,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        telegram_id INTEGER,
        granted_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS battles (
        id INTEGER PRIMARY KEY,
        attacker_id INTEGER,
        defender_id INTEGER,
        winner_id INTEGER,
        points_won INTEGER,
        battle_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(attacker_id) REFERENCES users(id),
        FOREIGN KEY(defender_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS purchases (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        item_name TEXT,
        price INTEGER,
        purchase_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    // –¢–∞–π–º-—Å–ª–æ—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS event_slots (
        id INTEGER PRIMARY KEY,
        event_name TEXT,
        category TEXT,
        date TEXT,
        time TEXT,
        location TEXT,
        max_participants INTEGER DEFAULT 10,
        current_participants INTEGER DEFAULT 0,
        points_reward INTEGER DEFAULT 5,
        status TEXT DEFAULT 'active',
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
    
    // –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    db.run(`CREATE TABLE IF NOT EXISTS event_bookings (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        slot_id INTEGER,
        booking_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(slot_id) REFERENCES event_slots(id)
    )`);
    
    console.log('üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========

const startKeyboard = {
    reply_markup: {
        keyboard: [['üë∂ –Ø —Å—Ç–∞–∂–µ—Ä', 'üßì –Ø —Å—Ç–∞—Ä–∏—á–æ–∫']],
        resize_keyboard: true,
        one_time_keyboard: true
    }
};

const internMenuKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
            ['üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const mainMenuKeyboard = {
    reply_markup: {
        keyboard: [
            ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', '‚öîÔ∏è PVP –°—Ä–∞–∂–µ–Ω–∏—è'],
            ['üõí –ú–∞–≥–∞–∑–∏–Ω', 'üéì –ö—É—Ä—Å—ã'],
            ['üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üìã –ó–∞–¥–∞—á–∏'],
            ['üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
        ],
        resize_keyboard: true
    }
};

const testKeyboard = {
    reply_markup: {
        keyboard: [
            ['üåü –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', 'üìà –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã'],
            ['üéØ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const pvpKeyboard = {
    reply_markup: {
        keyboard: [
            ['üéØ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', 'üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥'],
            ['‚ö° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const shopKeyboard = {
    reply_markup: {
        keyboard: [
            ['üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å (100 üí∞)', 'üëï –ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏ (50 üí∞)'],
            ['üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ (200 üí∞)', '‚òï –ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å (25 üí∞)'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const coursesKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìä –û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (+30 üí∞)', 'üíº –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ (+40 üí∞)'],
            ['üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ (+35 üí∞)', 'üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (+25 üí∞)'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const eventsKeyboard = {
    reply_markup: {
        keyboard: [
            ['üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞', 'üé∞ –ü–æ–∫–µ—Ä'],
            ['üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏'],
            ['üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const adminKeyboard = {
    reply_markup: {
        keyboard: [
            ['üóìÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏'],
            ['üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏']
        ],
        resize_keyboard: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
const eventCategoryKeyboard = {
    reply_markup: {
        keyboard: [
            ['üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞', 'üé∞ –ü–æ–∫–µ—Ä'],
            ['üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏'],
            ['‚öΩ –°–ø–æ—Ä—Ç', 'üçï –û–±–µ–¥—ã'],
            ['‚ùå –û—Ç–º–µ–Ω–∞']
        ],
        resize_keyboard: true
    }
};

// ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (err) {
                console.log('‚ùå DB Error:', err);
                return;
            }
            
            if (user && user.is_registered === 1) {
                showMainMenu(chatId, user);
            } else {
                bot.sendMessage(chatId, 
                    'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ñ–∏–∑–Ω—å –≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ"! üöÄ\n\n' +
                    'üí´ –ö—Ç–æ —Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ? üëá', 
                    startKeyboard).catch(console.error);
            }
        });
    } catch (error) {
        console.error('‚ùå Start command error:', error);
    }
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========

bot.on('message', (msg) => {
    try {
        const chatId = msg.chat.id;
        const text = msg.text;
        const telegramId = msg.from.id;
        const username = msg.from.username || 'user';
        
        if (text && text.startsWith('/')) return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        if (msg.photo) {
            handleScreenshot(chatId, telegramId, msg.photo[msg.photo.length - 1].file_id, username);
            return;
        }
        
        if (!text) return;
        
        // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        if (text === 'üë∂ –Ø —Å—Ç–∞–∂–µ—Ä') {
            registerUser(chatId, telegramId, username, '—Å—Ç–∞–∂–µ—Ä');
        } 
        else if (text === 'üßì –Ø —Å—Ç–∞—Ä–∏—á–æ–∫') {
            registerUser(chatId, telegramId, username, '—Å—Ç–∞—Ä–∏—á–æ–∫');
        }
        
        // –í–•–û–î –í –ê–î–ú–ò–ù–ö–£
        else if (text === 'partnerkin1212') {
            handleAdminLogin(chatId, telegramId);
        }
        
        // ========== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========
        else if (text === 'üóìÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ') {
            startEventCreation(chatId, telegramId);
        }
        else if (text === 'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏') {
            showSlotManagement(chatId, telegramId);
        }
        else if (text === 'üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É') {
            showTestSubmissions(chatId, telegramId);
        }
        else if (text === 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') {
            showUsersList(chatId, telegramId);
        }
        else if (text === 'üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏') {
            exitAdminMode(chatId, telegramId);
        }
        
        // ========== –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ ==========
        else if (text === 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å') {
            showBalance(chatId, telegramId);
        }
        else if (text === 'üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') {
            showTestMenu(chatId);
        }
        else if (text === 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å') {
            showInternProgress(chatId, telegramId);
        }
        else if (text === 'üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' || text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
            backToMainMenu(chatId, telegramId);
        }
        
        // ========== –¢–ï–°–¢–´ –î–õ–Ø –°–¢–ê–ñ–ï–†–û–í ==========
        else if (text === 'üåü –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π') {
            selectTest(chatId, telegramId, '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', 10);
        }
        else if (text === 'üìà –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã') {
            selectTest(chatId, telegramId, '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã', 15);
        }
        else if (text === 'üéØ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞') {
            selectTest(chatId, telegramId, '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞', 15);
        }
        
        // ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–†–ò–ß–ö–û–í ==========
        else if (text === '‚öîÔ∏è PVP –°—Ä–∞–∂–µ–Ω–∏—è') {
            showPVPMenu(chatId, telegramId);
        }
        else if (text === 'üõí –ú–∞–≥–∞–∑–∏–Ω') {
            showShop(chatId, telegramId);
        }
        else if (text === 'üéì –ö—É—Ä—Å—ã') {
            showCoursesMenu(chatId);
        }
        else if (text === 'üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') {
            showEventsMenu(chatId);
        }
        else if (text === 'üìã –ó–∞–¥–∞—á–∏') {
            showTasksInfo(chatId);
        }
        else if (text === 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã') {
            showGiftPointsInfo(chatId);
        }
        else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
            showUserStats(chatId, telegramId);
        }
        
        // ========== PVP –ú–ï–ù–Æ ==========
        else if (text === 'üéØ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞') {
            findOpponent(chatId, telegramId);
        }
        else if (text === 'üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥') {
            showRating(chatId, telegramId);
        }
        else if (text === '‚ö° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é') {
            restoreEnergy(chatId, telegramId);
        }
        
        // ========== –ö–£–†–°–´ ==========
        else if (text.includes('üìä –û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')) {
            selectCourse(chatId, telegramId, '–û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 30);
        }
        else if (text.includes('üíº –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤')) {
            selectCourse(chatId, telegramId, '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤', 40);
        }
        else if (text.includes('üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞')) {
            selectCourse(chatId, telegramId, '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞', 35);
        }
        else if (text.includes('üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')) {
            selectCourse(chatId, telegramId, 'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 25);
        }
        
        // ========== –ú–ê–ì–ê–ó–ò–ù ==========
        else if (text.includes('üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å')) {
            buyItem(chatId, telegramId, '–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å', 100);
        }
        else if (text.includes('üëï –ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏')) {
            buyItem(chatId, telegramId, '–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 50);
        }
        else if (text.includes('üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑')) {
            buyItem(chatId, telegramId, '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑', 200);
        }
        else if (text.includes('‚òï –ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å')) {
            buyItem(chatId, telegramId, '–ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å', 25);
        }
        
        // ========== –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø ==========
        else if (text === 'üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞') {
            showEventSlots(chatId, telegramId, '–ó–∞—Ä—è–¥–∫–∞');
        }
        else if (text === 'üé∞ –ü–æ–∫–µ—Ä') {
            showEventSlots(chatId, telegramId, '–ü–æ–∫–µ—Ä');
        }
        else if (text === 'üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤') {
            showEventSlots(chatId, telegramId, '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤');
        }
        else if (text === 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏') {
            showEventSlots(chatId, telegramId, '–¢—Ä–µ–Ω–∏–Ω–≥–∏');
        }
        else if (text === 'üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') {
            showAllEventSlots(chatId);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
        else {
            handleTextInput(chatId, telegramId, text, username);
        }
        
    } catch (error) {
        console.error('‚ùå Message handler error:', error);
        bot.sendMessage(msg.chat.id, 'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ').catch(console.error);
    }
});

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function registerUser(chatId, telegramId, username, role) {
    try {
        const initialCoins = role === '—Å—Ç–∞–∂–µ—Ä' ? 0 : 50;
        
        db.run(`INSERT OR REPLACE INTO users (telegram_id, username, role, p_coins, energy, is_registered) 
                VALUES (?, ?, ?, ?, 100, 0)`, 
               [telegramId, username, role, initialCoins], () => {
            
            const message = role === '—Å—Ç–∞–∂–µ—Ä' ? 
                'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, —Å—Ç–∞–∂–µ—Ä! üëã\n\n' +
                'üìù –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n' +
                '‚Ä¢ –ö–∞–∫ –∑–æ–≤—É—Ç? ü§î\n' +
                '‚Ä¢ –ö–∞–∫ –ø–æ–ø–∞–ª –∫ –Ω–∞–º? üöÄ\n' +
                '‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—à—å –æ—Ç —Ä–∞–±–æ—Ç—ã? üí´\n\n' +
                '‚úèÔ∏è –ù–∞–ø–∏—à–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:' :
                'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üëã\n\n' +
                'üìã –£–∫–∞–∂–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n' +
                '‚Ä¢ –§–ò–û üë§\n' +
                '‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å üíº\n' +
                '‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω üì±\n\n' +
                '‚úèÔ∏è –ù–∞–ø–∏—à–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:';
                
            bot.sendMessage(chatId, message).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Register user error:', error);
    }
}

function handleTextInput(chatId, telegramId, text, username) {
    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∞–¥–º–∏–Ω–æ–º
        if (global.adminStates[telegramId]) {
            handleAdminEventCreation(chatId, telegramId, text);
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ —Ç–µ—Å—Ç
        if (global.waitingForPoints[telegramId]) {
            const testData = global.waitingForPoints[telegramId];
            const points = parseInt(text);
            
            if (isNaN(points) || points < 0 || points > 100) {
                bot.sendMessage(chatId, 'ü§î –ú–º–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 üìä').catch(console.error);
                return;
            }
            
            createTestSubmission(chatId, telegramId, testData.testName, points, testData.photoFileId, username);
            delete global.waitingForPoints[telegramId];
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å–ª–æ—Ç–∞
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'event_booking') {
            const slotNumber = parseInt(text);
            const eventData = global.userScreenshots[telegramId];
            
            if (isNaN(slotNumber) || slotNumber < 1 || slotNumber > eventData.slots.length) {
                bot.sendMessage(chatId, 'ü§∑‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–∞ –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üî¢').catch(console.error);
                return;
            }
            
            bookEventSlot(chatId, telegramId, eventData.slots[slotNumber - 1]);
            delete global.userScreenshots[telegramId];
            return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.get("SELECT * FROM users WHERE telegram_id = ? AND is_registered = 0", [telegramId], (err, user) => {
            if (user) {
                db.run("UPDATE users SET full_name = ?, contacts = ?, is_registered = 1 WHERE telegram_id = ?", 
                       [text, text, telegramId], () => {
                    
                    const message = user.role === '—Å—Ç–∞–∂–µ—Ä' ? 
                        'üéä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n' +
                        'üìö –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã! üí™\n' +
                        'üî• –£–¥–∞—á–∏, —Å—Ç–∞–∂–µ—Ä!' :
                        'üéä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n' +
                        'üí∞ –ü–æ–ª—É—á–µ–Ω–æ 50 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ü-–∫–æ–∏–Ω–æ–≤!\n' +
                        'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!';
                    
                    const keyboard = user.role === '—Å—Ç–∞–∂–µ—Ä' ? internMenuKeyboard : mainMenuKeyboard;
                    bot.sendMessage(chatId, message, keyboard).catch(console.error);
                });
            }
        });
    } catch (error) {
        console.error('‚ùå Handle text input error:', error);
    }
}

function showMainMenu(chatId, user) {
    try {
        if (user.role === '—Å—Ç–∞–∂–µ—Ä') {
            db.get(`SELECT COUNT(*) as completed FROM intern_progress ip 
                    JOIN users u ON u.id = ip.user_id 
                    WHERE u.telegram_id = ? AND ip.completed = 1`, [user.telegram_id], (err, progress) => {
                
                if (progress && progress.completed >= 3) {
                    bot.sendMessage(chatId, 
                        'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üèÜ\n\n' +
                        `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        'üöÄ –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏!\n' +
                        'üî• –í—Ä–µ–º—è –ø–æ–∫–æ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã!', mainMenuKeyboard).catch(console.error);
                } else {
                    bot.sendMessage(chatId, 
                        'üëã –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞–∂–µ—Ä! üìö\n\n' +
                        `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        'üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã!\n' +
                        'üí™ –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!', internMenuKeyboard).catch(console.error);
                }
            });
        } else {
            bot.sendMessage(chatId, 
                `üéä –ü—Ä–∏–≤–µ—Ç, ${user.full_name || user.username}! üåü\n\n` +
                `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy}%\n\n` +
                'üöÄ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?', mainMenuKeyboard).catch(console.error);
        }
    } catch (error) {
        console.error('‚ùå Show main menu error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========

function showTestMenu(chatId) {
    try {
        bot.sendMessage(chatId, 
            'üìö –¶–ï–ù–¢–† –û–ë–£–ß–ï–ù–ò–Ø üéì\n\n' +
            'üåü –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π - 10 –±–∞–ª–ª–æ–≤\n' +
            'üìà –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã - 15 –±–∞–ª–ª–æ–≤\n' +
            'üéØ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞ - 15 –±–∞–ª–ª–æ–≤\n\n' +
            'üí° –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç - —ç—Ç–æ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã!\n' +
            'üéØ –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:', testKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show test menu error:', error);
    }
}

function selectTest(chatId, telegramId, testName, reward) {
    try {
        db.get(`SELECT ip.* FROM intern_progress ip 
                JOIN users u ON u.id = ip.user_id 
                WHERE u.telegram_id = ? AND ip.test_name = ? AND ip.completed = 1`, 
               [telegramId, testName], (err, completed) => {
            
            if (completed) {
                bot.sendMessage(chatId, 
                    `‚úÖ –¢–µ—Å—Ç "${testName}" —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω! üéâ\n\n` +
                    `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${completed.points_earned} –∫–æ–∏–Ω–æ–≤\n` +
                    'üî• –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã!').catch(console.error);
                return;
            }
            
            db.get("SELECT * FROM test_submissions WHERE telegram_id = ? AND test_name = ? AND status = 'pending'", 
                   [telegramId, testName], (err, pending) => {
                
                if (pending) {
                    bot.sendMessage(chatId, 
                        `‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Å—Ç "${testName}" —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ! üìã\n\n` +
                        'üïê –°–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∂–¥–∏!')
                        .catch(console.error);
                    return;
                }
                
                global.userScreenshots[telegramId] = { testName, reward };
                
                bot.sendMessage(chatId, 
                    `üéØ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç: "${testName}" üìñ\n\n` +
                    `üèÜ –ù–∞–≥—Ä–∞–¥–∞: –¥–æ ${reward} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                    `‚è∞ –í—Ä–µ–º—è: ~15 –º–∏–Ω—É—Ç\n` +
                    `üîó –§–æ—Ä–º–∞—Ç: –û–Ω–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n` +
                    `üåê –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç:\nhttps://partnerkino.ru/tests/\n\n` +
                    'üì∏ –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!\n' +
                    'üéØ –£–¥–∞—á–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏! üí™').catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Select test error:', error);
    }
}

function handleScreenshot(chatId, telegramId, photoFileId, username) {
    try {
        if (!global.userScreenshots[telegramId]) {
            bot.sendMessage(chatId, 
                'ü§î –•–º, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –∏–∑ –º–µ–Ω—é! üìö\n' +
                'üëÜ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ').catch(console.error);
            return;
        }
        
        const testData = global.userScreenshots[telegramId];
        
        global.waitingForPoints[telegramId] = {
            testName: testData.testName,
            reward: testData.reward,
            photoFileId: photoFileId
        };
        
        delete global.userScreenshots[telegramId];
        
        bot.sendMessage(chatId, 
            `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! ‚úÖ\n\n` +
            `üìù –¢–µ—Å—Ç: ${testData.testName}\n` +
            `üèÜ –ú–∞–∫—Å–∏–º—É–º: ${testData.reward} –±–∞–ª–ª–æ–≤\n\n` +
            'üéØ –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç—ã –Ω–∞–±—Ä–∞–ª?\n' +
            'üî¢ –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 85)').catch(console.error);
    } catch (error) {
        console.error('‚ùå Handle screenshot error:', error);
    }
}

function createTestSubmission(chatId, telegramId, testName, points, photoFileId, username) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            db.run(`INSERT INTO test_submissions 
                    (user_id, telegram_id, username, test_name, points_claimed, photo_file_id, status) 
                    VALUES (?, ?, ?, ?, ?, ?, 'pending')`, 
                   [user.id, telegramId, username, testName, points, photoFileId], () => {
                
                bot.sendMessage(chatId, 
                    `üöÄ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üìã\n\n` +
                    `üìù –¢–µ—Å—Ç: ${testName}\n` +
                    `üéØ –ë–∞–ª–ª—ã: ${points}\n` +
                    `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n\n` +
                    '‚è≥ –ñ–¥–∏ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n' +
                    'üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! üîî').catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Create test submission error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ë–ê–õ–ê–ù–°–ê –ò –ü–†–û–ì–†–ï–°–°–ê ==========

function showBalance(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (user) {
                bot.sendMessage(chatId, 
                    `üí∞ –¢–í–û–ô –ë–ê–õ–ê–ù–° üìä\n\n` +
                    `üíé –ü-–∫–æ–∏–Ω–æ–≤: ${user.p_coins}\n` +
                    `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy}%\n` +
                    `üë§ –°—Ç–∞—Ç—É—Å: ${user.role}\n\n` +
                    'üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã!').catch(console.error);
            }
        });
    } catch (error) {
        console.error('‚ùå Show balance error:', error);
    }
}

function showInternProgress(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            db.all(`SELECT * FROM intern_progress WHERE user_id = ? ORDER BY completed_date DESC`, 
                   [user.id], (err, tests) => {
                
                const allTests = [
                    { name: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', reward: 10, emoji: 'üåü' },
                    { name: '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã', reward: 15, emoji: 'üìà' },
                    { name: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞', reward: 15, emoji: 'üéØ' }
                ];
                
                let progressText = 'üìä –ü–†–û–ì–†–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø üéì\n\n';
                let completed = 0;
                let totalEarned = 0;
                
                allTests.forEach(testInfo => {
                    const test = tests.find(t => t.test_name === testInfo.name && t.completed === 1);
                    if (test) {
                        progressText += `‚úÖ ${testInfo.emoji} ${testInfo.name} - ${test.points_earned} –±–∞–ª–ª–æ–≤\n`;
                        completed++;
                        totalEarned += test.points_earned;
                    } else {
                        progressText += `‚è≥ ${testInfo.emoji} ${testInfo.name} - ${testInfo.reward} –±–∞–ª–ª–æ–≤\n`;
                    }
                });
                
                progressText += `\nüìà –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed}/3\n`;
                progressText += `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalEarned} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                
                if (completed >= 3) {
                    progressText += '\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! üèÜ\nüöÄ –¢—ã –º–æ–ª–æ–¥–µ—Ü!';
                } else {
                    progressText += '\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!';
                }
                
                bot.sendMessage(chatId, progressText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show intern progress error:', error);
    }
}

function backToMainMenu(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (user) showMainMenu(chatId, user);
        });
    } catch (error) {
        console.error('‚ùå Back to main menu error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ö–£–†–°–û–í ==========

function showCoursesMenu(chatId) {
    try {
        bot.sendMessage(chatId, 
            'üéì –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ö–£–†–°–´ üìö\n\n' +
            'üìä –û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - 30 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n' +
            'üíº –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - 40 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n' +
            'üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ - 35 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n' +
            'üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - 25 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n\n' +
            'üöÄ –ü—Ä–æ–∫–∞—á–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã!\n' +
            'üí° –í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:', coursesKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show courses menu error:', error);
    }
}

function selectCourse(chatId, telegramId, courseName, reward) {
    try {
        bot.sendMessage(chatId, 
            `üéì –ö—É—Ä—Å: "${courseName}" üìñ\n\n` +
            `üèÜ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: ${reward} –ü-–∫–æ–∏–Ω–æ–≤\n` +
            `‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~2-3 —á–∞—Å–∞\n` +
            `üñ•Ô∏è –§–æ—Ä–º–∞—Ç: –û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ\n` +
            `üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n` +
            `üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:\nhttps://partnerkino.ru/courses/\n\n` +
            'üì∏ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞!\n' +
            'üéØ –£–∫–∞–∂–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –∫—É—Ä—Å.\n' +
            'üí™ –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏!').catch(console.error);
            
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫—É—Ä—Å–∞
        global.userScreenshots[telegramId] = { 
            testName: courseName, 
            reward: reward, 
            type: 'course' 
        };
    } catch (error) {
        console.error('‚ùå Select course error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò PVP ==========

function showPVPMenu(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            bot.sendMessage(chatId, 
                `‚öîÔ∏è PVP –ê–†–ï–ù–ê üèüÔ∏è\n\n` +
                `‚ö° –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è: ${user.energy}%\n` +
                `üí∞ –ü-–∫–æ–∏–Ω–æ–≤: ${user.p_coins}\n\n` +
                'üéÆ –ó–∞ —Å—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è 20% —ç–Ω–µ—Ä–≥–∏–∏\n' +
                'üéØ –ú–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å 10 –ü-–∫–æ–∏–Ω–æ–≤\n' +
                'üèÜ –ü–æ–±–µ–∂–¥–∞–µ—Ç —Å–∏–ª—å–Ω–µ–π—à–∏–π!\n\n' +
                'üî• –ì–æ—Ç–æ–≤ –∫ –±–æ—é?', pvpKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show PVP menu error:', error);
    }
}

function findOpponent(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            if (user.energy < 20) {
                bot.sendMessage(chatId, 
                    `üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°\n\n` +
                    `üîã –£ —Ç–µ–±—è: ${user.energy}%\n` +
                    '‚ö° –ù—É–∂–Ω–æ: 20%\n\n' +
                    'üí§ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Å–∏–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üîÑ').catch(console.error);
                return;
            }
            
            if (user.p_coins < 10) {
                bot.sendMessage(chatId, 
                    'üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü-–∫–æ–∏–Ω–æ–≤! üò¢\n\n' +
                    'üí∞ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è\n' +
                    'üìö –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç—ã –∏–ª–∏ –∫—É—Ä—Å—ã!').catch(console.error);
                return;
            }
            
            db.get(`SELECT * FROM users 
                    WHERE telegram_id != ? 
                    AND p_coins >= 10 
                    AND is_registered = 1 
                    ORDER BY RANDOM() LIMIT 1`, [telegramId], (err, opponent) => {
                
                if (!opponent) {
                    bot.sendMessage(chatId, 
                        'üëª –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ üòî\n\n' +
                        '‚è∞ –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ!').catch(console.error);
                    return;
                }
                
                const playerWins = Math.random() > 0.5;
                const pointsWon = 10;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏–≥—Ä–æ–∫–∞
                db.run("UPDATE users SET energy = energy - 20 WHERE telegram_id = ?", [telegramId]);
                
                if (playerWins) {
                    // –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE telegram_id = ?", [pointsWon, telegramId]);
                    db.run("UPDATE users SET p_coins = p_coins - ? WHERE telegram_id = ?", [pointsWon, opponent.telegram_id]);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∏—Ç–≤—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    db.run("INSERT INTO battles (attacker_id, defender_id, winner_id, points_won) VALUES (?, ?, ?, ?)",
                           [user.id, opponent.id, user.id, pointsWon]);
                    
                    bot.sendMessage(chatId, 
                        `üèÜ –ü–û–ë–ï–î–ê! üéâ\n\n` +
                        `‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${opponent.username}\n` +
                        `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy - 20}%\n\n` +
                        'üî• –û—Ç–ª–∏—á–Ω–æ —Å—Ä–∞–∂–∞–ª—Å—è! üí™').catch(console.error);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ
                    bot.sendMessage(opponent.telegram_id, 
                        `‚öîÔ∏è –ù–ê –¢–ï–ë–Ø –ù–ê–ü–ê–õ–ò! üò±\n\n` +
                        `ü•ä –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${user.username}\n` +
                        `üí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª ${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                        'üò§ –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ—Ç—ã–≥—Ä–∞–µ—à—å—Å—è!').catch(console.error);
                } else {
                    // –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
                    db.run("UPDATE users SET p_coins = p_coins - ? WHERE telegram_id = ?", [pointsWon, telegramId]);
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE telegram_id = ?", [pointsWon, opponent.telegram_id]);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∏—Ç–≤—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    db.run("INSERT INTO battles (attacker_id, defender_id, winner_id, points_won) VALUES (?, ?, ?, ?)",
                           [user.id, opponent.id, opponent.id, pointsWon]);
                    
                    bot.sendMessage(chatId, 
                        `üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï üòî\n\n` +
                        `‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${opponent.username}\n` +
                        `üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: -${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy - 20}%\n\n` +
                        'üí™ –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ!').catch(console.error);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    bot.sendMessage(opponent.telegram_id, 
                        `‚öîÔ∏è –ù–ê –¢–ï–ë–Ø –ù–ê–ü–ê–õ–ò! ü•ä\n\n` +
                        `üèÜ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${user.username}\n` +
                        `üí∞ –ü–æ–±–µ–¥–∏–ª! +${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤!\n\n` +
                        'üéâ –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞!').catch(console.error);
                }
            });
        });
    } catch (error) {
        console.error('‚ùå Find opponent error:', error);
    }
}

function showRating(chatId, telegramId) {
    try {
        db.all(`SELECT username, full_name, p_coins, role 
                FROM users 
                WHERE is_registered = 1 
                ORDER BY p_coins DESC 
                LIMIT 10`, (err, users) => {
            
            if (!users || users.length === 0) {
                bot.sendMessage(chatId, 
                    'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ü§∑‚Äç‚ôÇÔ∏è\n' +
                    '‚è∞ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!').catch(console.error);
                return;
            }
            
            let ratingText = 'üèÜ –¢–û–ü-10 –ü–û –ü-–ö–û–ò–ù–ê–ú üí∞\n\n';
            
            users.forEach((user, index) => {
                const name = user.full_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}. üèÖ`;
                ratingText += `${medal} ${name} - ${user.p_coins} –∫–æ–∏–Ω–æ–≤\n`;
            });
            
            ratingText += '\nüî• –ö—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤ —Ç–æ–ø–µ?';
            
            bot.sendMessage(chatId, ratingText).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show rating error:', error);
    }
}

function restoreEnergy(chatId, telegramId) {
    try {
        db.run("UPDATE users SET energy = 100 WHERE telegram_id = ?", [telegramId], () => {
            bot.sendMessage(chatId, 
                '‚ö° –≠–ù–ï–†–ì–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê! üîã\n\n' +
                'üí™ –≠–Ω–µ—Ä–≥–∏—è: 100%\n' +
                'üéØ –ì–æ—Ç–æ–≤ –∫ 5 —Å—Ä–∞–∂–µ–Ω–∏—è–º –ø–æ–¥—Ä—è–¥!\n\n' +
                'üî• –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º –∫—Ç–æ —Ç—É—Ç –±–æ—Å—Å! üëë').catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Restore energy error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ú–ê–ì–ê–ó–ò–ù–ê ==========

function showShop(chatId, telegramId) {
    try {
        db.get("SELECT p_coins FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            bot.sendMessage(chatId, 
                `üõí –ú–ê–ì–ê–ó–ò–ù –ù–ê–ì–†–ê–î üéÅ\n\n` +
                `üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                'üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å - 100 –∫–æ–∏–Ω–æ–≤ üå¥\n' +
                'üëï –ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏ - 50 –∫–æ–∏–Ω–æ–≤ üéΩ\n' +
                'üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ - 200 –∫–æ–∏–Ω–æ–≤ üéä\n' +
                '‚òï –ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å - 25 –∫–æ–∏–Ω–æ–≤ ‚òï\n\n' +
                'üõçÔ∏è –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?', shopKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show shop error:', error);
    }
}

function buyItem(chatId, telegramId, itemName, price) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            if (user.p_coins < price) {
                bot.sendMessage(chatId, 
                    `üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü-–∫–æ–∏–Ω–æ–≤! üò¢\n\n` +
                    `üí∞ –£ —Ç–µ–±—è: ${user.p_coins} –∫–æ–∏–Ω–æ–≤\n` +
                    `üéØ –ù—É–∂–Ω–æ: ${price} –∫–æ–∏–Ω–æ–≤\n` +
                    `üìä –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${price - user.p_coins} –∫–æ–∏–Ω–æ–≤\n\n` +
                    'üí™ –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç—ã –∏–ª–∏ –∫—É—Ä—Å—ã!').catch(console.error);
                return;
            }
            
            db.run("UPDATE users SET p_coins = p_coins - ? WHERE telegram_id = ?", [price, telegramId], () => {
                db.run("INSERT INTO purchases (user_id, item_name, price) VALUES (?, ?, ?)",
                       [user.id, itemName, price]);
                
                bot.sendMessage(chatId, 
                    `üéâ –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê! üõçÔ∏è\n\n` +
                    `üéÅ –¢–æ–≤–∞—Ä: ${itemName}\n` +
                    `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${price} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                    `üí∞ –û—Å—Ç–∞—Ç–æ–∫: ${user.p_coins - price} –∫–æ–∏–Ω–æ–≤\n\n` +
                    'üë§ –û–±—Ä–∞—Ç–∏—Å—å –∫ HR –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!\n' +
                    'üéä –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø–æ–∫—É–ø–∫–æ–π!').catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Buy item error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô ==========

function showEventsMenu(chatId) {
    try {
        bot.sendMessage(chatId, 
            'üéØ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üéâ\n\n' +
            'üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞ - 5 –ü-–∫–æ–∏–Ω–æ–≤ ‚ö°\n' +
            'üé∞ –¢—É—Ä–Ω–∏—Ä –ø–æ –ø–æ–∫–µ—Ä—É - 10 –ü-–∫–æ–∏–Ω–æ–≤ üÉè\n' +
            'üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ - 15 –ü-–∫–æ–∏–Ω–æ–≤ ü•≥\n' +
            'üìö –û–±—É—á–∞—é—â–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ - 20 –ü-–∫–æ–∏–Ω–æ–≤ üéì\n\n' +
            'üìÖ –í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n' +
            '‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–π–º-—Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä!', eventsKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show events menu error:', error);
    }
}

function showEventSlots(chatId, telegramId, eventName) {
    try {
        db.all("SELECT * FROM event_slots WHERE event_name = ? AND status = 'active' AND current_participants < max_participants ORDER BY date, time", 
               [eventName], (err, slots) => {
            
            if (!slots || slots.length === 0) {
                bot.sendMessage(chatId, 
                    `üìÖ ${eventName} üéØ\n\n` +
                    '‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ! üîÑ\n' +
                    'üë®‚Äçüíº –ú—ã —É–∂–µ –µ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º!\n\n' +
                    'üîî –í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!\n' +
                    'üí´ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!').catch(console.error);
                return;
            }
            
            let slotsText = `üìÖ ${eventName} - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã! üéØ\n\n`;
            
            slots.forEach((slot, index) => {
                const availableSpots = slot.max_participants - slot.current_participants;
                slotsText += `${index + 1}. üìç ${slot.date} –≤ ${slot.time}\n`;
                slotsText += `   üè¢ –ú–µ—Å—Ç–æ: ${slot.location}\n`;
                slotsText += `   üë• –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç: ${availableSpots}\n`;
                slotsText += `   üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${slot.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n`;
            });
            
            slotsText += 'üéØ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞!\n' +
                        '‚úèÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: 1';
            
            bot.sendMessage(chatId, slotsText).catch(console.error);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            global.userScreenshots[telegramId] = { 
                type: 'event_booking', 
                eventName: eventName, 
                slots: slots 
            };
        });
    } catch (error) {
        console.error('‚ùå Show event slots error:', error);
    }
}

function bookEventSlot(chatId, telegramId, slot) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db.get("SELECT * FROM event_bookings WHERE user_id = ? AND slot_id = ?", 
                   [user.id, slot.id], (err, existing) => {
                
                if (existing) {
                    bot.sendMessage(chatId, 
                        'üòÖ –¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! üìÖ\n' +
                        'üéØ –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç!').catch(console.error);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –º–µ—Å—Ç–∞
                if (slot.current_participants >= slot.max_participants) {
                    bot.sendMessage(chatId, 
                        'üòî –ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! üìµ\n' +
                        '‚è∞ –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!').catch(console.error);
                    return;
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.run("INSERT INTO event_bookings (user_id, slot_id) VALUES (?, ?)", 
                       [user.id, slot.id], () => {
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    db.run("UPDATE event_slots SET current_participants = current_participants + 1 WHERE id = ?", 
                           [slot.id]);
                    
                    bot.sendMessage(chatId, 
                        `üéâ –£–°–ü–ï–®–ù–ê–Ø –ó–ê–ü–ò–°–¨! ‚úÖ\n\n` +
                        `üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${slot.event_name}\n` +
                        `üìÖ –î–∞—Ç–∞: ${slot.date}\n` +
                        `‚è∞ –í—Ä–µ–º—è: ${slot.time}\n` +
                        `üè¢ –ú–µ—Å—Ç–æ: ${slot.location}\n` +
                        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${slot.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                        'üîî –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è!\n' +
                        'üí´ –£–≤–∏–¥–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!').catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Book event slot error:', error);
    }
}

function showAllEventSlots(chatId) {
    try {
        db.all("SELECT * FROM event_slots WHERE status = 'active' ORDER BY date, time", (err, slots) => {
            if (!slots || slots.length === 0) {
                bot.sendMessage(chatId, 
                    'üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –í–°–ï–• –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô üóìÔ∏è\n\n' +
                    '‚è∞ –ü–æ–∫–∞ —á—Ç–æ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –Ω–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è! üîÑ\n\n' +
                    'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!\n' +
                    'üîî –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!\n' +
                    'üí´ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!').catch(console.error);
                return;
            }
            
            let scheduleText = 'üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –í–°–ï–• –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô üóìÔ∏è\n\n';
            
            slots.forEach((slot, index) => {
                const availableSpots = slot.max_participants - slot.current_participants;
                scheduleText += `${index + 1}. üéØ ${slot.event_name}\n`;
                scheduleText += `üìÖ ${slot.date} –≤ ${slot.time}\n`;
                scheduleText += `üè¢ ${slot.location}\n`;
                scheduleText += `üë• –°–≤–æ–±–æ–¥–Ω–æ: ${availableSpots}/${slot.max_participants}\n`;
                scheduleText += `üí∞ ${slot.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n`;
            });
            
            scheduleText += 'üéØ –î–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!';
            
            bot.sendMessage(chatId, scheduleText).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show all event slots error:', error);
    }
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function showTasksInfo(chatId) {
    try {
        bot.sendMessage(chatId, 
            'üìã –°–ò–°–¢–ï–ú–ê –ó–ê–î–ê–ß üéØ\n\n' +
            'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üîß\n\n' +
            'üìù –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å:\n' +
            '‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–ª–ª–µ–≥–∞–º üë•\n' +
            '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ üìä\n' +
            '‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ üí∞\n' +
            '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å üìà\n\n' +
            '‚è∞ –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!').catch(console.error);
    } catch (error) {
        console.error('‚ùå Show tasks info error:', error);
    }
}

function showGiftPointsInfo(chatId) {
    try {
        bot.sendMessage(chatId, 
            'üéÅ –ü–û–î–ê–†–ò–¢–¨ –ë–ê–õ–õ–´ üíù\n\n' +
            'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üîß\n\n' +
            'üí´ –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–∞—Ä–∏—Ç—å –ü-–∫–æ–∏–Ω—ã –∫–æ–ª–ª–µ–≥–∞–º –∑–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É!\n\n' +
            'üìã –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +
            '‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –¥–æ 50 –∫–æ–∏–Ω–æ–≤ –≤ –¥–µ–Ω—å üí∞\n' +
            '‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 –∫–æ–∏–Ω–æ–≤ –∑–∞ —Ä–∞–∑ üìä\n' +
            '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ üìà\n' +
            '‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ üíå\n\n' +
            '‚è∞ –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!').catch(console.error);
    } catch (error) {
        console.error('‚ùå Show gift points info error:', error);
    }
}

function showUserStats(chatId, telegramId) {
    try {
        db.get(`SELECT u.*, 
                (SELECT COUNT(*) FROM battles WHERE winner_id = u.id) as wins,
                (SELECT COUNT(*) FROM battles WHERE (attacker_id = u.id OR defender_id = u.id) AND winner_id != u.id) as losses,
                (SELECT COUNT(*) FROM purchases WHERE user_id = u.id) as purchases_count,
                (SELECT COUNT(*) FROM event_bookings WHERE user_id = u.id) as events_count
                FROM users u WHERE u.telegram_id = ?`, [telegramId], (err, stats) => {
            
            if (!stats) return;
            
            const winRate = stats.wins + stats.losses > 0 ? 
                Math.round((stats.wins / (stats.wins + stats.losses)) * 100) : 0;
            
            const statsText = 
                'üìä –¢–í–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê üéØ\n\n' +
                `üë§ –ò–º—è: ${stats.full_name || stats.username}\n` +
                `üí∞ –ü-–∫–æ–∏–Ω–æ–≤: ${stats.p_coins}\n` +
                `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${stats.energy}%\n` +
                `üé≠ –†–æ–ª—å: ${stats.role}\n\n` +
                '‚öîÔ∏è PVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n' +
                `üèÜ –ü–æ–±–µ–¥: ${stats.wins || 0}\n` +
                `üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.losses || 0}\n` +
                `üìä –í–∏–Ω—Ä–µ–π—Ç: ${winRate}%\n\n` +
                'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n' +
                `üõçÔ∏è –ü–æ–∫—É–ø–æ–∫: ${stats.purchases_count || 0}\n` +
                `üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${stats.events_count || 0}\n\n` +
                `üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(stats.registration_date).toLocaleDateString('ru-RU')}\n\n` +
                'üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
            
            bot.sendMessage(chatId, statsText).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show user stats error:', error);
    }
}

// ========== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========

function handleAdminLogin(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ? AND role = '—Å—Ç–∞—Ä–∏—á–æ–∫'", [telegramId], (err, user) => {
            if (!user) {
                bot.sendMessage(chatId, 
                    '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! üö´\n\n' +
                    'üë§ –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∏—á–∫–∏ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É!').catch(console.error);
                return;
            }
            
            db.run("INSERT OR REPLACE INTO admins (user_id, telegram_id) VALUES (?, ?)", 
                   [user.id, telegramId], () => {
                bot.sendMessage(chatId, 
                    'üîë –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ê–î–ú–ò–ù–ö–£! üë®‚Äçüíº\n\n' +
                    'üéØ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å—É–ø–µ—Ä—Å–∏–ª—ã!\n' +
                    'üìä –£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∫–∞–∫ —Ö–æ—á–µ—à—å!\n\n' +
                    'üöÄ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', adminKeyboard).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Admin login error:', error);
    }
}

function exitAdminMode(chatId, telegramId) {
    try {
        db.run("DELETE FROM admins WHERE telegram_id = ?", [telegramId], () => {
            bot.sendMessage(chatId, 
                'üëã –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏! üö™\n\n' +
                'üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º!').catch(console.error);
            backToMainMenu(chatId, telegramId);
        });
    } catch (error) {
        console.error('‚ùå Exit admin mode error:', error);
    }
}

// ========== –°–û–ó–î–ê–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô –ê–î–ú–ò–ù–û–ú ==========

function startEventCreation(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            global.adminStates[telegramId] = {
                step: 'category',
                eventData: {}
            };
            
            bot.sendMessage(chatId, 
                'üóìÔ∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø! ‚ú®\n\n' +
                'üéØ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n' +
                'üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', 
                eventCategoryKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Start event creation error:', error);
    }
}

function handleAdminEventCreation(chatId, telegramId, text) {
    try {
        if (!global.adminStates[telegramId]) return;
        
        const state = global.adminStates[telegramId];
        
        if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
            delete global.adminStates[telegramId];
            bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ!', adminKeyboard).catch(console.error);
            return;
        }
        
        switch (state.step) {
            case 'category':
                if (['üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞', 'üé∞ –ü–æ–∫–µ—Ä', 'üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏', '‚öΩ –°–ø–æ—Ä—Ç', 'üçï –û–±–µ–¥—ã'].includes(text)) {
                    state.eventData.category = text.replace(/^[\w\s]+\s/, '').trim();
                    state.eventData.name = text.replace(/[\w\s]+\s/, '').trim();
                    state.step = 'custom_name';
                    
                    bot.sendMessage(chatId, 
                        `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${text}\n\n` +
                        'üìù –®–∞–≥ 2: –ù–∞–ø–∏—à–∏ –ù–ê–ó–í–ê–ù–ò–ï –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n' +
                        `üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"\n\n` +
                        '‚úèÔ∏è –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–¥–∞–ª–µ–µ" —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ').catch(console.error);
                }
                break;
                
            case 'custom_name':
                if (text.toLowerCase() !== '–¥–∞–ª–µ–µ') {
                    state.eventData.name = text;
                }
                state.step = 'date';
                
                bot.sendMessage(chatId, 
                    `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${state.eventData.name}\n\n` +
                    'üìÖ –®–∞–≥ 3: –£–∫–∞–∂–∏ –î–ê–¢–£ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n' +
                    'üìù –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                    'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024').catch(console.error);
                break;
                
            case 'date':
                if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
                    state.eventData.date = text;
                    state.step = 'time';
                    
                    bot.sendMessage(chatId, 
                        `‚úÖ –î–∞—Ç–∞: ${text}\n\n` +
                        '‚è∞ –®–∞–≥ 4: –£–∫–∞–∂–∏ –í–†–ï–ú–Ø –Ω–∞—á–∞–ª–∞\n\n' +
                        'üìù –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 18:00').catch(console.error);
                } else {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n' +
                        'üìù –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024').catch(console.error);
                }
                break;
                
            case 'time':
                if (/^\d{2}:\d{2}$/.test(text)) {
                    state.eventData.time = text;
                    state.step = 'location';
                    
                    bot.sendMessage(chatId, 
                        `‚úÖ –í—Ä–µ–º—è: ${text}\n\n` +
                        'üìç –®–∞–≥ 5: –£–∫–∞–∂–∏ –ú–ï–°–¢–û –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª 1", "–û—Ñ–∏—Å, 2 —ç—Ç–∞–∂"').catch(console.error);
                } else {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n' +
                        'üìù –ò—Å–ø–æ–ª—å–∑—É–π: –ß–ß:–ú–ú\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 18:00').catch(console.error);
                }
                break;
                
            case 'location':
                state.eventData.location = text;
                state.step = 'participants';
                
                bot.sendMessage(chatId, 
                    `‚úÖ –ú–µ—Å—Ç–æ: ${text}\n\n` +
                    'üë• –®–∞–≥ 6: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n' +
                    'üî¢ –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n' +
                    'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 10').catch(console.error);
                break;
                
            case 'participants':
                const maxParticipants = parseInt(text);
                if (isNaN(maxParticipants) || maxParticipants < 1 || maxParticipants > 100) {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!\n' +
                        'üî¢ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100').catch(console.error);
                    return;
                }
                
                state.eventData.maxParticipants = maxParticipants;
                state.step = 'reward';
                
                bot.sendMessage(chatId, 
                    `‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${maxParticipants}\n\n` +
                    'üèÜ –®–∞–≥ 7: –ù–∞–≥—Ä–∞–¥–∞ –≤ –ü-–∫–æ–∏–Ω–∞—Ö\n\n' +
                    'üí∞ –ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –∑–∞ —É—á–∞—Å—Ç–∏–µ\n' +
                    'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 15').catch(console.error);
                break;
                
            case 'reward':
                const reward = parseInt(text);
                if (isNaN(reward) || reward < 1 || reward > 100) {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!\n' +
                        'üí∞ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100').catch(console.error);
                    return;
                }
                
                state.eventData.reward = reward;
                createEventSlot(chatId, telegramId, state.eventData);
                break;
        }
    } catch (error) {
        console.error('‚ùå Handle admin event creation error:', error);
    }
}

function createEventSlot(chatId, telegramId, eventData) {
    try {
        db.run(`INSERT INTO event_slots 
                (event_name, category, date, time, location, max_participants, points_reward, status) 
                VALUES (?, ?, ?, ?, ?, ?, ?, 'active')`,
               [eventData.name, eventData.category, eventData.date, eventData.time, 
                eventData.location, eventData.maxParticipants, eventData.reward], () => {
            
            delete global.adminStates[telegramId];
            
            bot.sendMessage(chatId, 
                'üéâ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –°–û–ó–î–ê–ù–û! ‚úÖ\n\n' +
                `üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: ${eventData.name}\n` +
                `üìÖ –î–∞—Ç–∞: ${eventData.date}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${eventData.time}\n` +
                `üìç –ú–µ—Å—Ç–æ: ${eventData.location}\n` +
                `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${eventData.maxParticipants}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${eventData.reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                'üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!', adminKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Create event slot error:', error);
    }
}

function showSlotManagement(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            db.all("SELECT * FROM event_slots ORDER BY date, time", (err, slots) => {
                if (!slots || slots.length === 0) {
                    bot.sendMessage(chatId, 
                        'üìÖ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–õ–û–¢–ê–ú–ò üóìÔ∏è\n\n' +
                        'üìã –°–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!\n\n' +
                        'üéØ –°–æ–∑–¥–∞–π –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑\n' +
                        '"üóìÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"').catch(console.error);
                    return;
                }
                
                let slotsText = 'üìÖ –í–°–ï –°–õ–û–¢–´ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô üóìÔ∏è\n\n';
                
                slots.forEach((slot, index) => {
                    const status = slot.status === 'active' ? 'üü¢' : 'üî¥';
                    slotsText += `${index + 1}. ${status} ${slot.event_name}\n`;
                    slotsText += `   üìÖ ${slot.date} –≤ ${slot.time}\n`;
                    slotsText += `   üìç ${slot.location}\n`;
                    slotsText += `   üë• ${slot.current_participants}/${slot.max_participants}\n`;
                    slotsText += `   üí∞ ${slot.points_reward} –∫–æ–∏–Ω–æ–≤\n\n`;
                });
                
                slotsText += 'üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!';
                
                bot.sendMessage(chatId, slotsText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show slot management error:', error);
    }
}

function showTestSubmissions(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            db.all("SELECT * FROM test_submissions WHERE status = 'pending' ORDER BY submitted_date DESC", 
                   (err, submissions) => {
                
                if (!submissions || submissions.length === 0) {
                    bot.sendMessage(chatId, 
                        'üìã –ó–ê–Ø–í–ö–ò –ù–ê –ü–†–û–í–ï–†–ö–£ üìù\n\n' +
                        '‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n\n' +
                        'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∞–¥–º–∏–Ω!').catch(console.error);
                    return;
                }
                
                submissions.forEach(submission => {
                    bot.sendPhoto(chatId, submission.photo_file_id, {
                        caption: `üìã –ó–ê–Ø–í–ö–ê #${submission.id}\n\n` +
                                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${submission.username}\n` +
                                `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                                `üéØ –ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: ${submission.points_claimed}\n` +
                                `üìÖ –î–∞—Ç–∞: ${new Date(submission.submitted_date).toLocaleString('ru-RU')}\n\n` +
                                'ü§î –¢–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ?',
                        reply_markup: {
                            inline_keyboard: [[
                                { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${submission.id}` },
                                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${submission.id}` }
                            ]]
                        }
                    }).catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Show test submissions error:', error);
    }
}

function showUsersList(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            db.all("SELECT * FROM users WHERE is_registered = 1 ORDER BY registration_date DESC", 
                   (err, users) => {
                
                if (!users || users.length === 0) {
                    bot.sendMessage(chatId, 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!').catch(console.error);
                    return;
                }
                
                let usersText = 'üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô üìã\n\n';
                
                users.forEach((user, index) => {
                    const roleEmoji = user.role === '—Å—Ç–∞–∂–µ—Ä' ? 'üë∂' : 'üßì';
                    usersText += `${index + 1}. ${roleEmoji} ${user.full_name || user.username}\n`;
                    usersText += `   üí∞ ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                    usersText += `   üìÖ ${new Date(user.registration_date).toLocaleDateString('ru-RU')}\n\n`;
                });
                
                bot.sendMessage(chatId, usersText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show users list error:', error);
    }
}

// ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

bot.on('callback_query', (callbackQuery) => {
    try {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const adminTelegramId = callbackQuery.from.id;
        
        if (data.startsWith('approve_')) {
            const submissionId = data.split('_')[1];
            approveSubmission(chatId, messageId, adminTelegramId, submissionId, callbackQuery.id);
        } else if (data.startsWith('reject_')) {
            const submissionId = data.split('_')[1];
            rejectSubmission(chatId, messageId, adminTelegramId, submissionId, callbackQuery.id);
        }
    } catch (error) {
        console.error('‚ùå Callback query error:', error);
    }
});

function approveSubmission(chatId, messageId, adminTelegramId, submissionId, callbackQueryId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [adminTelegramId], (err, admin) => {
            if (!admin) {
                bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!' }).catch(console.error);
                return;
            }
            
            db.get("SELECT * FROM test_submissions WHERE id = ? AND status = 'pending'", 
                   [submissionId], (err, submission) => {
                if (!submission) {
                    bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' }).catch(console.error);
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                db.run("UPDATE test_submissions SET status = 'approved', admin_id = ?, reviewed_date = CURRENT_TIMESTAMP WHERE id = ?", 
                       [admin.user_id, submissionId], () => {
                    
                    // –ù–∞—á–∏—Å–ª—è–µ–º –ü-–∫–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE telegram_id = ?", 
                           [submission.points_claimed, submission.telegram_id], () => {
                        
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–∂–µ—Ä–∞
                        db.run(`INSERT OR REPLACE INTO intern_progress 
                                (user_id, test_name, completed, points_earned, completed_date) 
                                VALUES (?, ?, 1, ?, CURRENT_TIMESTAMP)`, 
                               [submission.user_id, submission.test_name, submission.points_claimed]);
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        bot.sendMessage(submission.telegram_id, 
                            `üéâ –¢–ï–°–¢ –û–î–û–ë–†–ï–ù! ‚úÖ\n\n` +
                            `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                            `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${submission.points_claimed} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                            'üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™\n' +
                            'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!').catch(console.error);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                        bot.editMessageCaption(
                            `‚úÖ –ó–ê–Ø–í–ö–ê #${submission.id} - –û–î–û–ë–†–ï–ù–ê!\n\n` +
                            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${submission.username}\n` +
                            `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                            `üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${submission.points_claimed} –±–∞–ª–ª–æ–≤\n\n` +
                            'üéâ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', 
                            { 
                                chat_id: chatId, 
                                message_id: messageId, 
                                reply_markup: { inline_keyboard: [] } 
                            }
                        ).catch(console.error);
                        
                        bot.answerCallbackQuery(callbackQueryId, { 
                            text: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ! –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!', 
                            show_alert: false 
                        }).catch(console.error);
                    });
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Approve submission error:', error);
    }
}

function rejectSubmission(chatId, messageId, adminTelegramId, submissionId, callbackQueryId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [adminTelegramId], (err, admin) => {
            if (!admin) {
                bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!' }).catch(console.error);
                return;
            }
            
            db.get("SELECT * FROM test_submissions WHERE id = ? AND status = 'pending'", 
                   [submissionId], (err, submission) => {
                if (!submission) {
                    bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' }).catch(console.error);
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                db.run("UPDATE test_submissions SET status = 'rejected', admin_id = ?, reviewed_date = CURRENT_TIMESTAMP WHERE id = ?", 
                       [admin.user_id, submissionId], () => {
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.sendMessage(submission.telegram_id, 
                        `‚ùå –¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω üòî\n\n` +
                        `üìö –¢–µ—Å—Ç: ${submission.test_name}\n\n` +
                        'ü§î –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                        '‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ—á–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç üì∏\n' +
                        '‚Ä¢ –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –±–∞–ª–ª—ã üéØ\n' +
                        '‚Ä¢ –¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚è≥\n' +
                        '‚Ä¢ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ üö´\n\n' +
                        'üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n' +
                        'üéØ –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏!').catch(console.error);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    bot.editMessageCaption(
                        `‚ùå –ó–ê–Ø–í–ö–ê #${submission.id} - –û–¢–ö–õ–û–ù–ï–ù–ê!\n\n` +
                        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${submission.username}\n` +
                        `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                        `üéØ –ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: ${submission.points_claimed}\n\n` +
                        'üö´ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', 
                        { 
                            chat_id: chatId, 
                            message_id: messageId, 
                            reply_markup: { inline_keyboard: [] } 
                        }
                    ).catch(console.error);
                    
                    bot.answerCallbackQuery(callbackQueryId, { 
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ!', 
                        show_alert: false 
                    }).catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Reject submission error:', error);
    }
}

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò –ó–ê–ü–£–°–ö ==========

console.log('üöÄ –ë–æ—Ç "–ñ–∏–∑–Ω—å –≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
console.log('üéØ –í–µ—Ä—Å–∏—è: –ö–Ω–æ–ø–æ—á–Ω–∞—è 2.0');
console.log('üìã Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

bot.on('error', (error) => {
    console.error('‚ùå Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ polling
    setTimeout(() => {
        console.log('üîÑ Attempting to restart polling...');
        bot.stopPolling();
        setTimeout(() => {
            bot.startPolling();
        }, 2000);
    }, 3000);
});

process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç...');
    console.log('üíæ –ó–∞–∫—Ä—ã–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    db.close((err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err.message);
        } else {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
        }
        console.log('üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ –≤—Å—Ç—Ä–µ—á–∏!');
        process.exit(0);
    });
});