// app.js - –ë–æ—Ç "–ñ–∏–∑–Ω—å –≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ" - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø üöÄ
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const config = require('./config');
const fs = require('fs');
const PDFDocument = require('pdfkit');

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const token = config.TELEGRAM_TOKEN;

const bot = new TelegramBot(token, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
global.userScreenshots = {};
global.waitingForPoints = {};
global.adminStates = {};
global.userMenuContext = {};

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(config.DATABASE.name);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        full_name TEXT,
        role TEXT DEFAULT '–Ω–æ–≤–∏—á–æ–∫',
        p_coins INTEGER DEFAULT 0,
        energy INTEGER DEFAULT 100,
        registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        contacts TEXT,
        is_registered INTEGER DEFAULT 0
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS intern_progress (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        test_name TEXT,
        completed INTEGER DEFAULT 0,
        points_earned INTEGER DEFAULT 0,
        completed_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS test_submissions (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        telegram_id INTEGER,
        username TEXT,
        test_name TEXT,
        points_claimed INTEGER,
        photo_file_id TEXT,
        status TEXT DEFAULT 'pending',
        submitted_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        admin_id INTEGER,
        reviewed_date DATETIME,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        telegram_id INTEGER,
        granted_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS battles (
        id INTEGER PRIMARY KEY,
        attacker_id INTEGER,
        defender_id INTEGER,
        winner_id INTEGER,
        points_won INTEGER,
        battle_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(attacker_id) REFERENCES users(id),
        FOREIGN KEY(defender_id) REFERENCES users(id)
    )`);
    
    db.run(`CREATE TABLE IF NOT EXISTS purchases (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        item_name TEXT,
        price INTEGER,
        purchase_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);
    
    // –¢–∞–π–º-—Å–ª–æ—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS event_slots (
        id INTEGER PRIMARY KEY,
        event_name TEXT,
        category TEXT,
        date TEXT,
        time TEXT,
        location TEXT,
        max_participants INTEGER DEFAULT 10,
        current_participants INTEGER DEFAULT 0,
        points_reward INTEGER DEFAULT 5,
        status TEXT DEFAULT 'active',
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
    
    // –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    db.run(`CREATE TABLE IF NOT EXISTS event_bookings (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        slot_id INTEGER,
        booking_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(slot_id) REFERENCES event_slots(id)
    )`);

    // –ü–æ–¥–∞—Ä–∫–∏ –ü-–∫–æ–∏–Ω–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS gifts (
        id INTEGER PRIMARY KEY,
        sender_id INTEGER,
        receiver_id INTEGER,
        amount INTEGER,
        message TEXT,
        gift_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(sender_id) REFERENCES users(id),
        FOREIGN KEY(receiver_id) REFERENCES users(id)
    )`);

    // –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY,
        creator_id INTEGER,
        assignee_id INTEGER,
        title TEXT NOT NULL,
        description TEXT,
        status TEXT DEFAULT 'pending',
        priority TEXT DEFAULT 'medium',
        reward_coins INTEGER DEFAULT 0,
        due_date DATETIME,
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        completed_date DATETIME,
        cancelled_reason TEXT,
        postponed_until DATETIME,
        last_action_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(creator_id) REFERENCES users(id),
        FOREIGN KEY(assignee_id) REFERENCES users(id)
    )`);

    // –ò–Ω–≤–æ–π—Å—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS invoices (
        id INTEGER PRIMARY KEY,
        creator_id INTEGER,
        company_name TEXT NOT NULL,
        amount DECIMAL(10,2) NOT NULL,
        start_date DATE NOT NULL,
        end_date DATE NOT NULL,
        quantity INTEGER DEFAULT 1,
        description TEXT,
        file_path TEXT,
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(creator_id) REFERENCES users(id)
    )`);

    // Helper function to check if column exists
    function columnExists(table, column, callback) {
        db.all(`PRAGMA table_info(${table})`, (err, rows) => {
            if (err) {
                callback(false);
                return;
            }
            const exists = rows.some(row => row.name === column);
            callback(exists);
        });
    }

    // Safe ALTERs for new fields
    columnExists('invoices', 'work_type', (exists) => {
        if (!exists) {
            db.run("ALTER TABLE invoices ADD COLUMN work_type TEXT", (err) => {
                if (err) console.log("ALTER work_type error:", err.message);
            });
        }
    });
    columnExists('invoices', 'org_address', (exists) => {
        if (!exists) {
            db.run("ALTER TABLE invoices ADD COLUMN org_address TEXT", (err) => {
                if (err) console.log("ALTER org_address error:", err.message);
            });
        }
    });
    columnExists('invoices', 'invoice_number', (exists) => {
        if (!exists) {
            db.run("ALTER TABLE invoices ADD COLUMN invoice_number INTEGER", (err) => {
                if (err) console.log("ALTER invoice_number error:", err.message);
            });
        }
    });
    columnExists('invoices', 'invoice_date', (exists) => {
        if (!exists) {
            db.run("ALTER TABLE invoices ADD COLUMN invoice_date DATE DEFAULT CURRENT_DATE", (err) => {
                if (err) console.log("ALTER invoice_date error:", err.message);
            });
        }
    });

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–∞–º
    db.run(`CREATE TABLE IF NOT EXISTS task_comments (
        id INTEGER PRIMARY KEY,
        task_id INTEGER,
        user_id INTEGER,
        comment TEXT NOT NULL,
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(task_id) REFERENCES tasks(id),
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    // –°–∏—Å—Ç–µ–º–∞ "–ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è"
    db.run(`CREATE TABLE IF NOT EXISTS achievements (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        title TEXT NOT NULL,
        description TEXT,
        photo_file_id TEXT,
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    // –õ–∞–π–∫–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
    db.run(`CREATE TABLE IF NOT EXISTS achievement_likes (
        id INTEGER PRIMARY KEY,
        achievement_id INTEGER,
        user_id INTEGER,
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(achievement_id) REFERENCES achievements(id),
        FOREIGN KEY(user_id) REFERENCES users(id),
        UNIQUE(achievement_id, user_id)
    )`);

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
    db.run(`CREATE TABLE IF NOT EXISTS achievement_comments (
        id INTEGER PRIMARY KEY,
        achievement_id INTEGER,
        user_id INTEGER,
        comment TEXT NOT NULL,
        created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(achievement_id) REFERENCES achievements(id),
        FOREIGN KEY(user_id) REFERENCES users(id)
    )`);

    console.log('üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========

const startKeyboard = {
    reply_markup: {
        keyboard: [['üë∂ –Ø —Å—Ç–∞–∂–µ—Ä', 'üßì –Ø —Å—Ç–∞—Ä–∏—á–æ–∫']],
        resize_keyboard: true,
        one_time_keyboard: true
    }
};

const internMenuKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
            ['üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const mainMenuKeyboard = {
    reply_markup: {
        keyboard: [
            ['üí∞ –õ–∏—á–Ω–æ–µ', 'üéì –û–±—É—á–µ–Ω–∏–µ'],
            ['üìã –†–∞–±–æ—Ç–∞', 'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'],
            ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å']
        ],
        resize_keyboard: true
    }
};

// Sub-menus for main menu categories
const personalKeyboard = {
    reply_markup: {
        keyboard: [
            ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üèÜ –†–µ–π—Ç–∏–Ω–≥'],
            ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const learningKeyboard = {
    reply_markup: {
        keyboard: [
            ['üéì –ö—É—Ä—Å—ã', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
            ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const workKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', 'üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'],
            ['üìÑ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å'],
            ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const funKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚öîÔ∏è PVP –°—Ä–∞–∂–µ–Ω–∏—è', 'üõí –ú–∞–≥–∞–∑–∏–Ω'],
            ['üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã', 'üéâ –ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è'],
            ['üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const testKeyboard = {
    reply_markup: {
        keyboard: [
            ['üåü –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', 'üìà –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã'],
            ['üéØ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const pvpKeyboard = {
    reply_markup: {
        keyboard: [
            ['üéØ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', 'üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥'],
            ['‚ö° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const shopKeyboard = {
    reply_markup: {
        keyboard: [
            ['üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å (100 üí∞)', 'üëï –ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏ (50 üí∞)'],
            ['üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ (200 üí∞)', '‚òï –ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å (25 üí∞)'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const coursesKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìä –û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (+30 üí∞)', 'üíº –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ (+40 üí∞)'],
            ['üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ (+35 üí∞)', 'üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (+25 üí∞)'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const eventsKeyboard = {
    reply_markup: {
        keyboard: [
            ['üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞', 'üé∞ –ü–æ–∫–µ—Ä'],
            ['üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏'],
            ['üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const adminKeyboard = {
    reply_markup: {
        keyboard: [
            ['üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞'],
            ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º', 'üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'],
            ['üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏']
        ],
        resize_keyboard: true
    }
};

// Sub-menus for admin
const adminEventsKeyboard = {
    reply_markup: {
        keyboard: [
            ['üóìÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'],
            ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç'],
            ['üîô –í –∞–¥–º–∏–Ω–∫—É']
        ],
        resize_keyboard: true
    }
};

const adminUsersKeyboard = {
    reply_markup: {
        keyboard: [
            ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'],
            ['üîô –í –∞–¥–º–∏–Ω–∫—É']
        ],
        resize_keyboard: true
    }
};

const tasksKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'],
            ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'üë• –ó–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥—ã'],
            ['üì¶ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ', '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const broadcastKeyboard = {
    reply_markup: {
        keyboard: [
            ['üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'üßì –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∏—á–∫–∞–º'],
            ['üë∂ –¢–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä–∞–º', 'üìä –í—ã–±–æ—Ä–æ—á–Ω–æ'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É']
        ],
        resize_keyboard: true
    }
};

const balanceKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã', '‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã'],
            ['üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üìä –ë–∞–ª–∞–Ω—Å—ã'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É']
        ],
        resize_keyboard: true
    }
};

const taskPriorityKeyboard = {
    reply_markup: {
        keyboard: [
            ['üî¥ –í—ã—Å–æ–∫–∏–π', 'üü° –°—Ä–µ–¥–Ω–∏–π', 'üü¢ –ù–∏–∑–∫–∏–π'],
            ['‚ùå –û—Ç–º–µ–Ω–∞']
        ],
        resize_keyboard: true
    }
};

const taskRewardKeyboard = {
    reply_markup: {
        keyboard: [
            ['0 –∫–æ–∏–Ω–æ–≤', '5 –∫–æ–∏–Ω–æ–≤', '10 –∫–æ–∏–Ω–æ–≤'],
            ['15 –∫–æ–∏–Ω–æ–≤', '20 –∫–æ–∏–Ω–æ–≤', '25 –∫–æ–∏–Ω–æ–≤'],
            ['‚ùå –û—Ç–º–µ–Ω–∞']
        ],
        resize_keyboard: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
const taskActionKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚úÖ –ü—Ä–∏–Ω—è—Ç—å', 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å'],
            ['üì¶ –û—Ç–ª–æ–∂–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'],
            ['üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º']
        ],
        resize_keyboard: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
const taskCreatorActionKeyboard = {
    reply_markup: {
        keyboard: [
            ['üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ', 'üì¶ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å'],
            ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', 'üîô –ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
const eventCategoryKeyboard = {
    reply_markup: {
        keyboard: [
            ['üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞', 'üé∞ –ü–æ–∫–µ—Ä'],
            ['üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏'],
            ['‚ùå –û—Ç–º–µ–Ω–∞']
        ],
        resize_keyboard: true
    }
};

// ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    // [DEBUG LOG] Clear any active state on /start
    if (global.userScreenshots[telegramId]) {
        console.log(`[START DEBUG] Clearing state for user ${telegramId}: ${JSON.stringify({type: global.userScreenshots[telegramId].type, step: global.userScreenshots[telegramId].step})}`);
        delete global.userScreenshots[telegramId];
    }
    
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (err) {
                console.log('‚ùå DB Error:', err);
                return;
            }
            
            if (user && user.is_registered === 1) {
                showMainMenu(chatId, user);
            } else {
                bot.sendMessage(chatId,
                    'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ñ–∏–∑–Ω—å –≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ"! üöÄ\n\n' +
                    'üí´ –ö—Ç–æ —Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ? üëá',
                    startKeyboard).catch(console.error);
            }
        });
    } catch (error) {
        console.error('‚ùå Start command error:', error);
    }
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========

bot.on('message', (msg) => {
    try {
        const chatId = msg.chat.id;
        const text = msg.text;
        const telegramId = msg.from.id;
        const username = msg.from.username || 'user';

        // [DEBUG LOG] Log incoming message and current state
        const currentState = global.userScreenshots[telegramId];
        console.log(`[MESSAGE DEBUG] User ${telegramId} sent: "${text}" | Current state: ${currentState ? JSON.stringify({type: currentState.type, step: currentState.step}) : 'none'}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (text && text.startsWith('/like_')) {
            const achievementId = parseInt(text.replace('/like_', ''));
            handleLikeAchievement(chatId, telegramId, achievementId);
            return;
        }

        if (text && text.startsWith('/comment_')) {
            const achievementId = parseInt(text.replace('/comment_', ''));
            startCommentAchievement(chatId, telegramId, achievementId);
            return;
        }

        if (text && text.startsWith('/')) return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ broadcast –∏ –æ–∂–∏–¥–∞–µ—Ç –º–µ–¥–∏–∞)
        if (msg.photo && global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'broadcast' && global.userScreenshots[telegramId].step === 'media') {
            const fileId = msg.photo[msg.photo.length - 1].file_id;
            global.userScreenshots[telegramId].media.push({ type: 'photo', media: fileId });
            console.log(`[BROADCAST LOG] Admin ${telegramId} added photo to broadcast media. Total media: ${global.userScreenshots[telegramId].media.length}`);
            bot.sendMessage(chatId, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (${global.userScreenshots[telegramId].media.length} —à—Ç.)\n–û—Ç–ø—Ä–∞–≤—å –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤–æ".`).catch(console.error);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        if (msg.photo) {
            handleScreenshot(chatId, telegramId, msg.photo[msg.photo.length - 1].file_id, username);
            return;
        }
        
        if (!text) return;

        // DEBUG LOG FOR MAIN MENU BUTTON
        if (text && text.includes('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')) {
            console.log(`[BUTTON DEBUG] Main menu button pressed by user ${telegramId}: exact text="${text}"`);
        }
        
        // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        if (text === 'üë∂ –Ø —Å—Ç–∞–∂–µ—Ä') {
            registerUser(chatId, telegramId, username, '—Å—Ç–∞–∂–µ—Ä');
        } 
        if (text === 'üßì –Ø —Å—Ç–∞—Ä–∏—á–æ–∫') {
            registerUser(chatId, telegramId, username, '—Å—Ç–∞—Ä–∏—á–æ–∫');
        }
        
        // –í–•–û–î –í –ê–î–ú–ò–ù–ö–£
        if (text === 'partnerkin1212') {
            handleAdminLogin(chatId, telegramId);
        }
        
// ========== –§–£–ù–ö–¶–ò–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô ==========

function showAvailableEvents(chatId, telegramId) {
    try {
        db.all("SELECT * FROM event_slots WHERE status = 'active' ORDER BY date, time", (err, slots) => {
            if (!slots || slots.length === 0) {
                bot.sendMessage(chatId,
                    'üìÖ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üìã\n\n' +
                    'üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!\n\n' +
                    'üéØ –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!').catch(console.error);
                return;
            }

            let eventsText = 'üìÖ –î–û–°–¢–£–ü–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üìã\n\n';

            slots.forEach((slot, index) => {
                eventsText += `${index + 1}. ${slot.event_name}\n`;
                eventsText += `   üìÖ ${slot.date} –≤ ${slot.time}\n`;
                eventsText += `   üìç ${slot.location}\n`;
                eventsText += `   üë• ${slot.current_participants}/${slot.max_participants}\n`;
                eventsText += `   üí∞ ${slot.points_reward} –∫–æ–∏–Ω–æ–≤\n\n`;
            });

            eventsText += 'üëá –í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:';

            global.userScreenshots[telegramId] = {
                type: 'event_selection',
                events: slots
            };

            const categoryKeyboard = {
                keyboard: [
                    ['–ó–∞—Ä—è–¥–∫–∞', '–ü–æ–∫–µ—Ä'],
                    ['–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–¢—Ä–µ–Ω–∏–Ω–≥–∏'],
                    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                ],
                resize_keyboard: true
            };

            bot.sendMessage(chatId, eventsText, categoryKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show available events error:', error);
    }
}

function handleEventSelection(chatId, telegramId, text) {
    try {
        const eventData = global.userScreenshots[telegramId];
        const eventIndex = parseInt(text) - 1;

        if (isNaN(eventIndex) || eventIndex < 0 || eventIndex >= eventData.events.length) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!').catch(console.error);
            return;
        }

        const selectedEvent = eventData.events[eventIndex];
        showEventDetails(chatId, telegramId, selectedEvent);
        delete global.userScreenshots[telegramId];
    } catch (error) {
        console.error('‚ùå Handle event selection error:', error);
    }
}

function showEventDetails(chatId, telegramId, event) {
    try {
        const signupKeyboard = {
            keyboard: [
                ['üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ' + event.event_name],
                ['üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º']
            ],
            resize_keyboard: true
        };

        bot.sendMessage(chatId,
            `üéØ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï: ${event.event_name}\n\n` +
            `üìÖ –î–∞—Ç–∞: ${event.date}\n` +
            `‚è∞ –í—Ä–µ–º—è: ${event.time}\n` +
            `üìç –ú–µ—Å—Ç–æ: ${event.location}\n` +
            `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${event.current_participants}/${event.max_participants}\n` +
            `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${event.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
            'üëá –•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?', signupKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show event details error:', error);
    }
         }

         if (text === 'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') {
             showAvailableEvents(chatId, telegramId);
         }
         if (text === 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º') {
             showAvailableEvents(chatId, telegramId);
         }
         if (text.startsWith('üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ')) {
             const eventName = text.replace('üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ', '');
             handleEventSignup(chatId, telegramId, eventName);
             delete global.userScreenshots[telegramId];
         }

         // ========== –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø (CONSOLIDATED HANDLER) ==========
         if (text === 'üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') {
             console.log(`[DEBUG FIRST HANDLER] All events triggered for user ${telegramId}, admin check starting`);
             // Clear event booking state if active
             if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'event_booking') {
                 delete global.userScreenshots[telegramId];
             }
             // Branch based on admin status
             db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
                 console.log(`[DEBUG FIRST HANDLER] Admin check result for ${telegramId}: ${admin ? 'Admin' : 'Non-admin'}`);
                 if (admin) {
                     console.log(`[DEBUG FIRST HANDLER] Calling showAllEventSlotsAdmin for ${telegramId}`);
                     showAllEventSlotsAdmin(chatId, telegramId);
                 } else {
                     console.log(`[DEBUG FIRST HANDLER] Calling showAllEventSlots for ${telegramId}`);
                     showAllEventSlots(chatId);
                 }
             });
         }

         // ========== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========
         if (text === 'üóìÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ') {
             startEventCreation(chatId, telegramId);
         }
         if (text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç') {
             startSlotEdit(chatId, telegramId);
         }
         if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç') {
             startSlotDelete(chatId, telegramId);
         }
         if (text === 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞') {
             startBroadcast(chatId, telegramId);
         }
         if (text === 'üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É') {
             showTestSubmissions(chatId, telegramId);
         }
         if (text === 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') {
             showUsersList(chatId, telegramId);
         }
         if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
             showAdminStats(chatId, telegramId);
         }
         if (text === 'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º') {
             showBalanceManagement(chatId, telegramId);
         }
         if (text === 'üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è') {
             showAchievementsAdmin(chatId, telegramId);
         }
         if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É') {
             backToAdminMenu(chatId, telegramId);
         }

         // ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–ú ==========
         else if (text === '‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã') {
             startAddCoins(chatId, telegramId);
         }
         else if (text === '‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã') {
             startDeductCoins(chatId, telegramId);
         }
         else if (text === 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
             showUsersList(chatId, telegramId);
         }
         else if (text === 'üìä –ë–∞–ª–∞–Ω—Å—ã') {
             showBalances(chatId, telegramId);
         }
        else if (text === 'üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏') {
            exitAdminMode(chatId, telegramId);
        }

        // ========== NEW CATEGORY HANDLERS ==========
        // Main menu categories
        if (text === 'üí∞ –õ–∏—á–Ω–æ–µ') {
            showPersonalMenu(chatId);
        } else if (text === 'üéì –û–±—É—á–µ–Ω–∏–µ') {
            showLearningMenu(chatId);
        } else if (text === 'üìã –†–∞–±–æ—Ç–∞') {
            showWorkMenu(chatId, telegramId);
        } else if (text === 'üìÑ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å') {
            db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
                if (err || !user) {
                    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞!').catch(console.error);
                    return;
                }
                // Assume for all users, or check role if needed
                global.userScreenshots[telegramId] = {
                    type: 'invoice_creation',
                    step: 'org_name',
                    data: {}
                };
                bot.sendMessage(chatId, "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞. –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏? (–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è PDF)").catch(console.error);
            });
        } else if (text === 'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è') {
            showFunMenu(chatId);
        }

        // Admin categories
        if (text === 'üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') {
            showAdminEventsMenu(chatId);
        } else if (text === 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞') {
            startBroadcast(chatId, telegramId);
        } else if (text === 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') {
            showAdminUsersMenu(chatId);
        } else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
            showAdminStats(chatId, telegramId);
        } else if (text === 'üîô –í –∞–¥–º–∏–Ω–∫—É') {
            backToAdminMenu(chatId, telegramId);
        }
        
        // ========== –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ ==========
        if (text === 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å') {
            showBalance(chatId, telegramId);
        }
        if (text === 'üìö –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') {
            showTestMenu(chatId);
        }
        if (text === 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å') {
            showInternProgress(chatId, telegramId);
        }
        if (text === 'üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' || text === 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' || text === 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' || text === 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å') {
            console.log(`[NAV DEBUG] Direct main menu trigger for user ${telegramId} (text: "${text}")`);
            backToMainMenu(chatId, telegramId);
            return;
        } else if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
            console.log(`[NAV DEBUG] Back to menu button pressed for user ${telegramId}, context: ${JSON.stringify(global.userMenuContext[chatId] || 'none')}`);
            handleBackNavigation(chatId, telegramId);
            return;
        }
        
        // ========== –¢–ï–°–¢–´ –î–õ–Ø –°–¢–ê–ñ–ï–†–û–í ==========
        if (text === 'üåü –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π') {
            selectTest(chatId, telegramId, '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', 10);
        }
        if (text === 'üìà –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã') {
            selectTest(chatId, telegramId, '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã', 15);
        }
        if (text === 'üéØ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞') {
            selectTest(chatId, telegramId, '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞', 15);
        }

        // ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–†–ò–ß–ö–û–í ==========
        if (text === '‚öîÔ∏è PVP –°—Ä–∞–∂–µ–Ω–∏—è') {
            showPVPMenu(chatId, telegramId);
        }
        if (text === 'üõí –ú–∞–≥–∞–∑–∏–Ω') {
            showShop(chatId, telegramId);
        }
        if (text === 'üéì –ö—É—Ä—Å—ã') {
            showCoursesMenu(chatId);
        }
        if (text === 'üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è') {
            showEventsMenu(chatId);
        }
        if (text === 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏') {
            showTasksMenu(chatId, telegramId);
        }
        if (text === 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã') {
            startGiftProcess(chatId, telegramId);
        }
        if (text === 'üèÜ –†–µ–π—Ç–∏–Ω–≥') {
            showRating(chatId, telegramId);
        }
        if (text === 'üéâ –ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è') {
            startAchievementCreation(chatId, telegramId);
        }

        // ========== PVP –ú–ï–ù–Æ ==========
        if (text === 'üéØ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞') {
            findOpponent(chatId, telegramId);
        }
        if (text === 'üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥') {
            showRating(chatId, telegramId);
        }
        if (text === '‚ö° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é') {
            restoreEnergy(chatId, telegramId);
        }
        
        // ========== –ö–£–†–°–´ ==========
        else if (text.includes('üìä –û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')) {
            selectCourse(chatId, telegramId, '–û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 30);
        }
        else if (text.includes('üíº –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤')) {
            selectCourse(chatId, telegramId, '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤', 40);
        }
        else if (text.includes('üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞')) {
            selectCourse(chatId, telegramId, '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞', 35);
        }
        else if (text.includes('üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')) {
            selectCourse(chatId, telegramId, 'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 25);
        }
        
        // ========== –ú–ê–ì–ê–ó–ò–ù ==========
        else if (text.includes('üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å')) {
            buyItem(chatId, telegramId, '–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å', 100);
        }
        else if (text.includes('üëï –ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏')) {
            buyItem(chatId, telegramId, '–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 50);
        }
        else if (text.includes('üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑')) {
            buyItem(chatId, telegramId, '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑', 200);
        }
        else if (text.includes('‚òï –ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å')) {
            buyItem(chatId, telegramId, '–ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å', 25);
        }
        
        // ========== –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø ==========
        else if (text === 'üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞' || text === '–ó–∞—Ä—è–¥–∫–∞') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∞–¥–º–∏–Ω–∫–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
                if (admin && global.adminStates[telegramId]) {
                    // –ê–¥–º–∏–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    handleAdminEventCreation(chatId, telegramId, text);
                } else {
                    // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    showEventSlots(chatId, telegramId, '–ó–∞—Ä—è–¥–∫–∞');
                }
            });
        }
        else if (text === 'üé∞ –ü–æ–∫–µ—Ä' || text === '–ü–æ–∫–µ—Ä') {
            db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
                if (admin && global.adminStates[telegramId]) {
                    handleAdminEventCreation(chatId, telegramId, text);
                } else {
                    showEventSlots(chatId, telegramId, '–ü–æ–∫–µ—Ä');
                }
            });
        }
        else if (text === 'üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤' || text === '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤') {
            db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
                if (admin && global.adminStates[telegramId]) {
                    handleAdminEventCreation(chatId, telegramId, text);
                } else {
                    showEventSlots(chatId, telegramId, '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤');
                }
            });
        }
        else if (text === 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏' || text === '–¢—Ä–µ–Ω–∏–Ω–≥–∏') {
            db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
                if (admin && global.adminStates[telegramId]) {
                    handleAdminEventCreation(chatId, telegramId, text);
                } else {
                    showEventSlots(chatId, telegramId, '–¢—Ä–µ–Ω–∏–Ω–≥–∏');
                }
            });
        }
        // REMOVED DUPLICATE HANDLER FOR 'üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' - handled in first block to prevent duplicates

        // ========== –†–ê–°–°–´–õ–ö–ò (–ê–î–ú–ò–ù) ==========
        if (text === 'üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º') {
            setBroadcastTarget(chatId, telegramId, 'all');
        }
        if (text === 'üßì –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∏—á–∫–∞–º') {
            setBroadcastTarget(chatId, telegramId, 'seniors');
        }
        if (text === 'üë∂ –¢–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä–∞–º') {
            setBroadcastTarget(chatId, telegramId, 'interns');
        }
        if (text === 'üìä –í—ã–±–æ—Ä–æ—á–Ω–æ') {
            setBroadcastTarget(chatId, telegramId, 'selective');
        }

        // ========== –ú–ï–ù–Æ –ó–ê–î–ê–ß ==========
        if (text === 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏') {
            showMyTasks(chatId, telegramId);
        }
        if (text === '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ') {
            showCompletedTasks(chatId, telegramId);
        }
        if (text === 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É') {
            startTaskCreation(chatId, telegramId);
        }
        if (text === 'üë• –ó–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥—ã') {
            showTeamTasks(chatId, telegramId);
        }
        if (text === 'üì¶ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ') {
            showPostponedTasks(chatId, telegramId);
        }
        if (text === '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ') {
            showCancelledTasks(chatId, telegramId);
        }

        // ========== –î–ï–ô–°–¢–í–ò–Ø –° –ó–ê–î–ê–ß–ê–ú–ò ==========
        if (text === '‚úÖ –ü—Ä–∏–Ω—è—Ç—å') {
            acceptTask(chatId, telegramId);
        }
        if (text === 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å') {
            startTaskComment(chatId, telegramId);
        }
        if (text === 'üì¶ –û—Ç–ª–æ–∂–∏—Ç—å') {
            postponeTask(chatId, telegramId);
        }
        if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') {
            cancelTask(chatId, telegramId);
        }
        else if (text === 'üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ') {
            redirectTask(chatId, telegramId);
        }
        else if (text === 'üì¶ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å') {
            keepTaskAsIs(chatId, telegramId);
        }

        // ========== –î–ï–ô–°–¢–í–ò–Ø –° –î–û–°–¢–ò–ñ–ï–ù–ò–Ø–ú–ò ==========
        else if (text === '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å') {
            publishAchievement(chatId, telegramId);
        }

        // ========== –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß (–ö–ù–û–ü–ö–ò) ==========
        else if (text === 'üî¥ –í—ã—Å–æ–∫–∏–π' || text === 'üü° –°—Ä–µ–¥–Ω–∏–π' || text === 'üü¢ –ù–∏–∑–∫–∏–π') {
            setTaskPriority(chatId, telegramId, text);
        }
        else if (text.includes('–∫–æ–∏–Ω–æ–≤') && text !== 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
            setTaskReward(chatId, telegramId, text);
        }

        // /cancel handler
        if (text === '/cancel') {
            if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'invoice_creation') {
                delete global.userScreenshots[telegramId];
                bot.sendMessage(chatId, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.").catch(console.error);
                backToMainMenu(chatId, telegramId);
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
        else {
            handleTextInput(chatId, telegramId, text, username);
        }
        
    } catch (error) {
        console.error('‚ùå Message handler error:', error);
        bot.sendMessage(msg.chat.id, 'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ').catch(console.error);
    }
});

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function registerUser(chatId, telegramId, username, role) {
    try {
        const initialCoins = role === '—Å—Ç–∞–∂–µ—Ä' ? 0 : 50;
        
        db.run(`INSERT OR REPLACE INTO users (telegram_id, username, role, p_coins, energy, is_registered) 
                VALUES (?, ?, ?, ?, 100, 0)`, 
               [telegramId, username, role, initialCoins], () => {
            
            const message = role === '—Å—Ç–∞–∂–µ—Ä' ? 
                'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, —Å—Ç–∞–∂–µ—Ä! üëã\n\n' +
                'üìù –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n' +
                '‚Ä¢ –ö–∞–∫ –∑–æ–≤—É—Ç? ü§î\n' +
                '‚Ä¢ –ö–∞–∫ –ø–æ–ø–∞–ª –∫ –Ω–∞–º? üöÄ\n' +
                '‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—à—å –æ—Ç —Ä–∞–±–æ—Ç—ã? üí´\n\n' +
                '‚úèÔ∏è –ù–∞–ø–∏—à–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:' :
                'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üëã\n\n' +
                'üìã –£–∫–∞–∂–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n' +
                '‚Ä¢ –§–ò–û üë§\n' +
                '‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å üíº\n' +
                '‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω üì±\n\n' +
                '‚úèÔ∏è –ù–∞–ø–∏—à–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:';
                
            bot.sendMessage(chatId, message).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Register user error:', error);
    }
}

function handleTextInput(chatId, telegramId, text, username) {
    // [DEBUG LOG] Entry to handleTextInput
    const currentState = global.userScreenshots[telegramId];
    console.log(`[TEXTINPUT DEBUG] User ${telegramId} text "${text}" | State on entry: ${currentState ? JSON.stringify({type: currentState.type, step: currentState.step}) : 'none'}`);
    
    // Escape mechanism: Check for keywords to reset state
    const lowerText = text.toLowerCase();
    const escapeKeywords = ['exit', 'menu', 'back', '/menu'];
    if (lowerText.includes('exit') || lowerText.includes('menu') || lowerText.includes('back') || text === '/menu') {
        console.log(`[ESCAPE DEBUG] Escape keyword detected: "${text}" for user ${telegramId}`);
        if (currentState) {
            delete global.userScreenshots[telegramId];
            console.log(`[ESCAPE DEBUG] Cleared state for user ${telegramId}`);
        }
        backToMainMenu(chatId, telegramId);
        return;
    }
    
    try {
        // Invoice creation state
        if (currentState && currentState.type === 'invoice_creation') {
            const state = currentState;
            const data = state.data;
            let valid = true;
            let nextStep = '';
            let prompt = '';

            switch (state.step) {
                case 'org_name':
                    if (text.trim() === '') {
                        valid = false;
                        prompt = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!";
                    } else {
                        data.org_name = text.trim();
                        nextStep = 'org_address';
                        prompt = `‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${data.org_name}. –®–∞–≥ 2: –ê–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏? (–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è PDF)`;
                    }
                    break;
                case 'org_address':
                    if (text.trim() === '') {
                        valid = false;
                        prompt = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!";
                    } else {
                        data.org_address = text.trim();
                        nextStep = 'work_type';
                        prompt = `‚úÖ –ê–¥—Ä–µ—Å: ${data.org_address}. –®–∞–≥ 3: –¢–∏–ø —Ä–∞–±–æ—Ç—ã (e.g., 'website branding')? (–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è PDF)`;
                    }
                    break;
                case 'work_type':
                    if (text.trim() === '') {
                        valid = false;
                        prompt = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã!";
                    } else {
                        data.work_type = text.trim();
                        nextStep = 'quantity';
                        prompt = `‚úÖ –¢–∏–ø: ${data.work_type}. –®–∞–≥ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ?`;
                    }
                    break;
                case 'quantity':
                    const qty = parseInt(text);
                    if (isNaN(qty) || qty <= 0) {
                        valid = false;
                        prompt = "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!";
                    } else {
                        data.quantity = qty;
                        nextStep = 'amount';
                        prompt = `‚úÖ –ö–æ–ª-–≤–æ: ${data.quantity}. –®–∞–≥ 5: –°—É–º–º–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (USDT)?`;
                    }
                    break;
                case 'amount':
                    const amt = parseFloat(text);
                    if (isNaN(amt) || amt <= 0) {
                        valid = false;
                        prompt = "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!";
                    } else {
                        data.amount = amt;
                        data.total = data.quantity * data.amount;
                        data.start_date = new Date().toLocaleDateString('ru-RU');
                        data.end_date = data.start_date;
                        data.description = null;
                        db.get("SELECT COALESCE(MAX(invoice_number), 0) + 1 AS next FROM invoices", (err, row) => {
                            if (err) {
                                console.error('Error getting next invoice number:', err);
                                bot.sendMessage(chatId, "Error preparing preview.").catch(console.error);
                                return;
                            }
                            const next_seq = row.next;
                            state.step = 'preview';
                            global.userScreenshots[telegramId] = state;
                            const previewText = `üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${data.org_name}, –ê–¥—Ä–µ—Å: ${data.org_address}, –¢–∏–ø: ${data.work_type}, –ö–æ–ª-–≤–æ: ${data.quantity}, –°—É–º–º–∞/–µ–¥: ${data.amount}, –ò—Ç–æ–≥–æ: ${data.total} USDT. Invoice #: ${next_seq}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?`;
                            bot.sendMessage(chatId, previewText, {
                                reply_markup: {
                                    inline_keyboard: [
                                        [{text: '‚úÖ –î–∞', callback_data: 'confirm_invoice'}],
                                        [{text: '‚ùå –ù–µ—Ç', callback_data: 'cancel_invoice'}]
                                    ]
                                }
                            }).catch(console.error);
                        });
                        return;
                    }
                    break;
                default:
                    valid = false;
            }

            if (valid && nextStep !== 'preview') {
                state.step = nextStep;
                global.userScreenshots[telegramId] = state;
                bot.sendMessage(chatId, prompt).catch(console.error);
            } else if (!valid) {
                bot.sendMessage(chatId, prompt).catch(console.error);
            }
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∞–¥–º–∏–Ω–æ–º
        if (global.adminStates[telegramId]) {
            handleAdminEventCreation(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'task_creation') {
            handleTaskCreation(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'achievement_creation') {
            handleAchievementCreation(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'achievement_comment') {
            handleAchievementComment(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'event_selection') {
            handleEventSelection(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∞–¥–º–∏–Ω–æ–º
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'balance_add') {
            handleBalanceAdd(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –∞–¥–º–∏–Ω–æ–º
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'balance_deduct') {
            handleBalanceDeduct(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –∞–¥–º–∏–Ω–æ–º
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'broadcast') {
            handleBroadcastMessage(chatId, telegramId, text);
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ —Ç–µ—Å—Ç
        if (global.waitingForPoints[telegramId]) {
            const testData = global.waitingForPoints[telegramId];
            const points = parseInt(text);
            
            if (isNaN(points) || points < 0 || points > 100) {
                bot.sendMessage(chatId, 'ü§î –ú–º–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 üìä').catch(console.error);
                return;
            }
            
            createTestSubmission(chatId, telegramId, testData.testName, points, testData.photoFileId, username);
            delete global.waitingForPoints[telegramId];
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å–ª–æ—Ç–∞
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'event_booking') {
            console.log(`[DEBUG TEXT INPUT] User ${telegramId} text "${text}", state: event_booking, slots count: ${global.userScreenshots[telegramId].slots.length}`);
            const slotNumber = parseInt(text);
            const eventData = global.userScreenshots[telegramId];
 
            if (isNaN(slotNumber)) {
                // Add counter for event booking if needed, but since it clears silently, keep as is
                console.log(`[DEBUG SLOT ERROR] Non-numeric text "${text}", clearing state silently for user ${telegramId}`);
                delete global.userScreenshots[telegramId];
                // Allow fall-through to other handlers if needed, but since end, just clear
            } else if (slotNumber < 1 || slotNumber > eventData.slots.length) {
                console.log(`[DEBUG SLOT ERROR] Invalid slot number ${slotNumber} for user ${telegramId}`);
                bot.sendMessage(chatId, 'ü§∑‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–∞ –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üî¢').catch(console.error);
                return;
            } else {
                bookEventSlot(chatId, telegramId, eventData.slots[slotNumber - 1]);
                delete global.userScreenshots[telegramId];
                console.log(`[DEBUG EVENT BOOKING] Cleared state for user ${telegramId} after booking slot ${slotNumber}`);
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'gift') {
            handleGiftProcess(chatId, telegramId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if (text.startsWith('–≤—ã–ø–æ–ª–Ω–∏–ª ')) {
            const taskNumber = parseInt(text.replace('–≤—ã–ø–æ–ª–Ω–∏–ª ', ''));
            completeTask(chatId, telegramId, taskNumber);
            return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.get("SELECT * FROM users WHERE telegram_id = ? AND is_registered = 0", [telegramId], (err, user) => {
            if (user) {
                db.run("UPDATE users SET full_name = ?, contacts = ?, is_registered = 1 WHERE telegram_id = ?",
                       [text, text, telegramId], () => {
                       
                    const message = user.role === '—Å—Ç–∞–∂–µ—Ä' ?
                        'üéä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n' +
                        'üìö –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã! üí™\n' +
                        'üî• –£–¥–∞—á–∏, —Å—Ç–∞–∂–µ—Ä!' :
                        'üéä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n' +
                        'üí∞ –ü–æ–ª—É—á–µ–Ω–æ 50 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ü-–∫–æ–∏–Ω–æ–≤!\n' +
                        'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!';
                    
                    const keyboard = user.role === '—Å—Ç–∞–∂–µ—Ä' ? internMenuKeyboard : mainMenuKeyboard;
                    bot.sendMessage(chatId, message, keyboard).catch(console.error);
                });
            }
        });
    } catch (error) {
        console.error('‚ùå Handle text input error:', error);
    }
}

function showMainMenu(chatId, user) {
    console.log(`[MENU DEBUG] showMainMenu called for user ${user.id} (role: ${user.role}), chatId: ${chatId}`);
    try {
        if (user.role === '—Å—Ç–∞–∂–µ—Ä') {
            console.log(`[MENU DEBUG] Processing intern path for user ${user.id}`);
            db.get(`SELECT COUNT(*) as completed FROM intern_progress ip
                    JOIN users u ON u.id = ip.user_id
                    WHERE u.telegram_id = ? AND ip.completed = 1`, [user.telegram_id], (err, progress) => {
                if (err) {
                    console.error('[MENU DEBUG] Intern progress query error:', err);
                    return;
                }
                console.log(`[MENU DEBUG] Intern progress fetched: ${progress ? progress.completed : 0} completed tests`);

                if (progress && progress.completed >= 3) {
                    console.log(`[MENU DEBUG] Sending completed intern menu message`);
                    bot.sendMessage(chatId,
                        'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üèÜ\n\n' +
                        `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        'üöÄ –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏!\n' +
                        'üî• –í—Ä–µ–º—è –ø–æ–∫–æ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã!', mainMenuKeyboard).catch((sendErr) => {
                            console.error('[MENU DEBUG] Failed to send completed intern message:', sendErr);
                        });
                } else {
                    console.log(`[MENU DEBUG] Sending active intern menu message`);
                    bot.sendMessage(chatId,
                        'üëã –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞–∂–µ—Ä! üìö\n\n' +
                        `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        'üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã!\n' +
                        'üí™ –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!', internMenuKeyboard).catch((sendErr) => {
                            console.error('[MENU DEBUG] Failed to send active intern message:', sendErr);
                        });
                }
            });
        } else {
            console.log(`[MENU DEBUG] Processing non-intern path for user ${user.id}`);
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.all(`SELECT COUNT(*) as active_tasks FROM tasks
                    WHERE assignee_id = ? AND status = 'pending'`, [user.id], (err, taskCount) => {

                const activeTasksCount = taskCount && taskCount[0] ? taskCount[0].active_tasks : 0;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É)
                const position = user.role === '—Å—Ç–∞—Ä–∏—á–æ–∫' ? '–û–ø—ã—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫' : '–°–æ—Ç—Ä—É–¥–Ω–∏–∫';

                let menuText = `üë§ ${user.full_name || user.username}\n`;
                menuText += `üè¢ ${position}\n\n`;
                menuText += `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                menuText += `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy}%\n`;

                if (activeTasksCount > 0) {
                    menuText += `üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${activeTasksCount}\n`;
                } else {
                    menuText += `‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n`;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
                menuText += `üéì –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã: –î–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö—É—Ä—Å—ã"\n\n`;

                // –ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è
                const greetings = [
                    'üåü –ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!',
                    'üöÄ –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —É—Å–ø–µ—Ö–æ–≤!',
                    'üí™ –£–¥–∞—á–∏ –≤ –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏—è—Ö!',
                    'üî• –ü–æ–∫–æ—Ä—è–π –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã!',
                    '‚≠ê –ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ä–∞–¥–æ—Å—Ç—å!'
                ];

                const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
                menuText += randomGreeting;

                console.log(`[MENU DEBUG] Sending non-intern main menu message for user ${user.id}`);
                bot.sendMessage(chatId, menuText, mainMenuKeyboard).catch((sendErr) => {
                    console.error('[MENU DEBUG] Failed to send non-intern main menu message:', sendErr);
                });
            });
        }
    } catch (error) {
        console.error('‚ùå Show main menu error:', error);
    }
}

// New category menu functions
function showPersonalMenu(chatId) {
    bot.sendMessage(chatId,
        'üí∞ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ üë§\n\n' +
        '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.\n\n' +
        'üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', personalKeyboard).catch(console.error);
}

function showLearningMenu(chatId) {
    let context = global.userMenuContext[chatId];
    if (!context) {
        context = { path: ['main'], menuFn: 'main' };
    }
    if (context.path[context.path.length - 1] === 'main') {
        context.path.push('learning');
        context.menuFn = 'learning';
    } else {
        context.path = ['main', 'learning'];
        context.menuFn = 'learning';
    }
    global.userMenuContext[chatId] = context;
    console.log(`[NAV LOG] Entering learning menu for user ${chatId}, context: ${JSON.stringify(context)}`);
    bot.sendMessage(chatId,
        'üéì –û–ë–£–ß–ï–ù–ò–ï –ò –†–ê–ó–í–ò–¢–ò–ï üìö\n\n' +
        '–ü—Ä–æ–∫–∞—á–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∫—É—Ä—Å—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n' +
        'üëá –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:', learningKeyboard).catch(console.error);
}

function showWorkMenu(chatId, telegramId) {
    // Get active tasks count for message
    db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
        if (!user) return;
        db.get(`SELECT COUNT(*) as active_tasks FROM tasks WHERE assignee_id = ? AND status = 'pending'`, [user.id], (err, taskCount) => {
            const activeTasksCount = taskCount ? taskCount.active_tasks : 0;
            bot.sendMessage(chatId,
                'üìã –†–ê–ë–û–¢–ê –ò –ó–ê–î–ê–ß–ò üíº\n\n' +
                `üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${activeTasksCount}\n` +
                '–£–ø—Ä–∞–≤–ª—è–π –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n' +
                'üëá –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:', workKeyboard).catch(console.error);
        });
    });
}

function showFunMenu(chatId) {
    bot.sendMessage(chatId,
        'üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò –ù–ê–ì–†–ê–î–´ üéÅ\n\n' +
        '–°—Ä–∞–∂–∞–π—Å—è –≤ PVP, –ø–æ–∫—É–ø–∞–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –¥–∞—Ä–∏ –±–∞–ª–ª—ã –∏ —Ö–≤–∞—Å—Ç–∞–π—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏!\n\n' +
        'üëá –í—ã–±–µ—Ä–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ:', funKeyboard).catch(console.error);
}

// Admin sub-menus
function showAdminEventsMenu(chatId) {
    bot.sendMessage(chatId,
        'üóìÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–ú–ò üìÖ\n\n' +
        '–°–æ–∑–¥–∞–≤–∞–π, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏ —É–¥–∞–ª—è–π —Å–ª–æ—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n' +
        'üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', adminEventsKeyboard).catch(console.error);
}

function showAdminUsersMenu(chatId) {
    bot.sendMessage(chatId,
        'üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò üìä\n\n' +
        '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–π –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–µ—Å—Ç—ã.\n\n' +
        'üëá –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:', adminUsersKeyboard).catch(console.error);
}

// ========== –§–£–ù–ö–¶–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========

function showTestMenu(chatId) {
    global.userMenuContext[chatId] = { path: ['main', 'learning', 'tests'], menuFn: 'tests' };
    console.log(`[NAV LOG] Entering test menu for user ${chatId}, context: ${JSON.stringify(global.userMenuContext[chatId])}`);
    try {
        bot.sendMessage(chatId,
            'üìö –¶–ï–ù–¢–† –û–ë–£–ß–ï–ù–ò–Ø üéì\n\n' +
            'üåü –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π - 10 –±–∞–ª–ª–æ–≤\n' +
            'üìà –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã - 15 –±–∞–ª–ª–æ–≤\n' +
            'üéØ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞ - 15 –±–∞–ª–ª–æ–≤\n\n' +
            'üí° –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç - —ç—Ç–æ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã!\n' +
            'üéØ –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:', testKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show test menu error:', error);
    }
}

function selectTest(chatId, telegramId, testName, reward) {
    try {
        db.get(`SELECT ip.* FROM intern_progress ip 
                JOIN users u ON u.id = ip.user_id 
                WHERE u.telegram_id = ? AND ip.test_name = ? AND ip.completed = 1`, 
               [telegramId, testName], (err, completed) => {
            
            if (completed) {
                bot.sendMessage(chatId, 
                    `‚úÖ –¢–µ—Å—Ç "${testName}" —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω! üéâ\n\n` +
                    `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${completed.points_earned} –∫–æ–∏–Ω–æ–≤\n` +
                    'üî• –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã!').catch(console.error);
                return;
            }
            
            db.get("SELECT * FROM test_submissions WHERE telegram_id = ? AND test_name = ? AND status = 'pending'", 
                   [telegramId, testName], (err, pending) => {
                
                if (pending) {
                    bot.sendMessage(chatId, 
                        `‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Å—Ç "${testName}" —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ! üìã\n\n` +
                        'üïê –°–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∂–¥–∏!')
                        .catch(console.error);
                    return;
                }
                
                global.userScreenshots[telegramId] = { testName, reward };
                
                bot.sendMessage(chatId, 
                    `üéØ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç: "${testName}" üìñ\n\n` +
                    `üèÜ –ù–∞–≥—Ä–∞–¥–∞: –¥–æ ${reward} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                    `‚è∞ –í—Ä–µ–º—è: ~15 –º–∏–Ω—É—Ç\n` +
                    `üîó –§–æ—Ä–º–∞—Ç: –û–Ω–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n` +
                    `üåê –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç:\nhttps://partnerkino.ru/tests/\n\n` +
                    'üì∏ –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!\n' +
                    'üéØ –£–¥–∞—á–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏! üí™').catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Select test error:', error);
    }
}

function handleScreenshot(chatId, telegramId, photoFileId, username) {
    try {
        if (!global.userScreenshots[telegramId]) {
            bot.sendMessage(chatId,
                'ü§î –•–º, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –∏–∑ –º–µ–Ω—é! üìö\n' +
                'üëÜ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ').catch(console.error);
            return;
        }

        const userData = global.userScreenshots[telegramId];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (userData.type === 'achievement_creation') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            userData.photoFileId = photoFileId;
            userData.step = 'confirm_achievement';

            bot.sendMessage(chatId,
                'üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! ‚úÖ\n\n' +
                `üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: ${userData.title}\n` +
                `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
                '‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ?\n' +
                'üì¢ –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', {
                    reply_markup: {
                        keyboard: [
                            ['‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }).catch(console.error);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            global.waitingForPoints[telegramId] = {
                testName: userData.testName,
                reward: userData.reward,
                photoFileId: photoFileId
            };

            delete global.userScreenshots[telegramId];

            bot.sendMessage(chatId,
                `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! ‚úÖ\n\n` +
                `üìù –¢–µ—Å—Ç: ${userData.testName}\n` +
                `üèÜ –ú–∞–∫—Å–∏–º—É–º: ${userData.reward} –±–∞–ª–ª–æ–≤\n\n` +
                'üéØ –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç—ã –Ω–∞–±—Ä–∞–ª?\n' +
                'üî¢ –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 85)').catch(console.error);
        }
    } catch (error) {
        console.error('‚ùå Handle screenshot error:', error);
    }
}

function createTestSubmission(chatId, telegramId, testName, points, photoFileId, username) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            db.run(`INSERT INTO test_submissions 
                    (user_id, telegram_id, username, test_name, points_claimed, photo_file_id, status) 
                    VALUES (?, ?, ?, ?, ?, ?, 'pending')`, 
                   [user.id, telegramId, username, testName, points, photoFileId], () => {
                
                bot.sendMessage(chatId, 
                    `üöÄ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üìã\n\n` +
                    `üìù –¢–µ—Å—Ç: ${testName}\n` +
                    `üéØ –ë–∞–ª–ª—ã: ${points}\n` +
                    `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n\n` +
                    '‚è≥ –ñ–¥–∏ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n' +
                    'üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! üîî').catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Create test submission error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ë–ê–õ–ê–ù–°–ê –ò –ü–†–û–ì–†–ï–°–°–ê ==========

function showBalance(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (user) {
                bot.sendMessage(chatId, 
                    `üí∞ –¢–í–û–ô –ë–ê–õ–ê–ù–° üìä\n\n` +
                    `üíé –ü-–∫–æ–∏–Ω–æ–≤: ${user.p_coins}\n` +
                    `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy}%\n` +
                    `üë§ –°—Ç–∞—Ç—É—Å: ${user.role}\n\n` +
                    'üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã!').catch(console.error);
            }
        });
    } catch (error) {
        console.error('‚ùå Show balance error:', error);
    }
}

function showInternProgress(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            db.all(`SELECT * FROM intern_progress WHERE user_id = ? ORDER BY completed_date DESC`, 
                   [user.id], (err, tests) => {
                
                const allTests = [
                    { name: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π', reward: 10, emoji: 'üåü' },
                    { name: '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã', reward: 15, emoji: 'üìà' },
                    { name: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞', reward: 15, emoji: 'üéØ' }
                ];
                
                let progressText = 'üìä –ü–†–û–ì–†–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø üéì\n\n';
                let completed = 0;
                let totalEarned = 0;
                
                allTests.forEach(testInfo => {
                    const test = tests.find(t => t.test_name === testInfo.name && t.completed === 1);
                    if (test) {
                        progressText += `‚úÖ ${testInfo.emoji} ${testInfo.name} - ${test.points_earned} –±–∞–ª–ª–æ–≤\n`;
                        completed++;
                        totalEarned += test.points_earned;
                    } else {
                        progressText += `‚è≥ ${testInfo.emoji} ${testInfo.name} - ${testInfo.reward} –±–∞–ª–ª–æ–≤\n`;
                    }
                });
                
                progressText += `\nüìà –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed}/3\n`;
                progressText += `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalEarned} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                
                if (completed >= 3) {
                    progressText += '\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! üèÜ\nüöÄ –¢—ã –º–æ–ª–æ–¥–µ—Ü!';
                } else {
                    progressText += '\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!';
                }
                
                bot.sendMessage(chatId, progressText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show intern progress error:', error);
    }
}

function backToMainMenu(chatId, telegramId) {
    // [DEBUG LOG] Clear states on navigation to main menu
    if (global.userScreenshots[telegramId]) {
        console.log(`[NAV DEBUG] Clearing userScreenshots state for user ${telegramId}: ${JSON.stringify({type: global.userScreenshots[telegramId].type, step: global.userScreenshots[telegramId].step})}`);
        delete global.userScreenshots[telegramId];
    }
    delete global.userMenuContext[chatId];
    console.log(`[NAV DEBUG] backToMainMenu invoked for user ${telegramId}, context cleared`);
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (err) {
                console.error('[NAV DEBUG] DB error in backToMainMenu:', err);
                return;
            }
            if (user) {
                console.log(`[NAV DEBUG] Fetching user ${user.id} for main menu display`);
                showMainMenu(chatId, user);
            } else {
                console.log(`[NAV DEBUG] No user found for ${telegramId} in backToMainMenu`);
            }
        });
    } catch (error) {
        console.error('‚ùå Back to main menu error:', error);
    }
}

function handleBackNavigation(chatId, telegramId) {
    // Clear event booking state if active
    if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'event_booking') {
        delete global.userScreenshots[telegramId];
    }
    let context = global.userMenuContext[chatId];
    if (!context || context.path.length <= 1) {
        console.log(`[NAV LOG] No context or root level, going to main for user ${telegramId}`);
        backToMainMenu(chatId, telegramId);
        return;
    }

    // Pop the last menu level
    context.path.pop();
    const newPath = context.path;
    console.log(`[NAV LOG] Back navigation for user ${telegramId}, popped to path: ${newPath.join(' -> ')}`);

    // Show previous menu based on new path
    const lastMenu = newPath[newPath.length - 1];
    switch (lastMenu) {
        case 'learning':
            showLearningMenu(chatId);
            break;
        case 'tests':
            showTestMenu(chatId);
            break;
        case 'personal':
            showPersonalMenu(chatId);
            break;
        case 'work':
            showWorkMenu(chatId, telegramId);
            break;
        case 'fun':
            showFunMenu(chatId);
            break;
        default:
            // Fallback to main
            console.log(`[NAV LOG] Unknown previous menu ${lastMenu}, fallback to main for ${telegramId}`);
            backToMainMenu(chatId, telegramId);
    }
}

// Helper function if needed (since chatId == telegramId in 1:1 bot chats)
function getTelegramIdFromChat(chatId) {
    return chatId; // Assuming direct chat
}

// ========== –§–£–ù–ö–¶–ò–ò –ö–£–†–°–û–í ==========

function showCoursesMenu(chatId) {
    let context = global.userMenuContext[chatId] || { path: ['main'], menuFn: 'main' };
    if (context.path[context.path.length - 1] === 'learning') {
        context.path.push('courses');
        context.menuFn = 'courses';
    } else {
        context.path = ['main', 'learning', 'courses'];
        context.menuFn = 'courses';
    }
    global.userMenuContext[chatId] = context;
    console.log(`[NAV LOG] Entering courses menu for user ${chatId}, context: ${JSON.stringify(context)}`);
    try {
        bot.sendMessage(chatId,
            'üéì –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ö–£–†–°–´ üìö\n\n' +
            'üìä –û—Å–Ω–æ–≤—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - 30 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n' +
            'üíº –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - 40 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n' +
            'üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ - 35 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n' +
            'üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - 25 –ü-–∫–æ–∏–Ω–æ–≤ üíé\n\n' +
            'üöÄ –ü—Ä–æ–∫–∞—á–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã!\n' +
            'üí° –í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:', coursesKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show courses menu error:', error);
    }
}

function selectCourse(chatId, telegramId, courseName, reward) {
    try {
        bot.sendMessage(chatId, 
            `üéì –ö—É—Ä—Å: "${courseName}" üìñ\n\n` +
            `üèÜ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: ${reward} –ü-–∫–æ–∏–Ω–æ–≤\n` +
            `‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~2-3 —á–∞—Å–∞\n` +
            `üñ•Ô∏è –§–æ—Ä–º–∞—Ç: –û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ\n` +
            `üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n` +
            `üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:\nhttps://partnerkino.ru/courses/\n\n` +
            'üì∏ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞!\n' +
            'üéØ –£–∫–∞–∂–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –∫—É—Ä—Å.\n' +
            'üí™ –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏!').catch(console.error);
            
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫—É—Ä—Å–∞
        global.userScreenshots[telegramId] = { 
            testName: courseName, 
            reward: reward, 
            type: 'course' 
        };
    } catch (error) {
        console.error('‚ùå Select course error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò PVP ==========

function showPVPMenu(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            bot.sendMessage(chatId, 
                `‚öîÔ∏è PVP –ê–†–ï–ù–ê üèüÔ∏è\n\n` +
                `‚ö° –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è: ${user.energy}%\n` +
                `üí∞ –ü-–∫–æ–∏–Ω–æ–≤: ${user.p_coins}\n\n` +
                'üéÆ –ó–∞ —Å—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è 20% —ç–Ω–µ—Ä–≥–∏–∏\n' +
                'üéØ –ú–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å 10 –ü-–∫–æ–∏–Ω–æ–≤\n' +
                'üèÜ –ü–æ–±–µ–∂–¥–∞–µ—Ç —Å–∏–ª—å–Ω–µ–π—à–∏–π!\n\n' +
                'üî• –ì–æ—Ç–æ–≤ –∫ –±–æ—é?', pvpKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show PVP menu error:', error);
    }
}

function findOpponent(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            if (user.energy < 20) {
                bot.sendMessage(chatId, 
                    `üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°\n\n` +
                    `üîã –£ —Ç–µ–±—è: ${user.energy}%\n` +
                    '‚ö° –ù—É–∂–Ω–æ: 20%\n\n' +
                    'üí§ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Å–∏–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üîÑ').catch(console.error);
                return;
            }
            
            if (user.p_coins < 10) {
                bot.sendMessage(chatId, 
                    'üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü-–∫–æ–∏–Ω–æ–≤! üò¢\n\n' +
                    'üí∞ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è\n' +
                    'üìö –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç—ã –∏–ª–∏ –∫—É—Ä—Å—ã!').catch(console.error);
                return;
            }
            
            db.get(`SELECT * FROM users 
                    WHERE telegram_id != ? 
                    AND p_coins >= 10 
                    AND is_registered = 1 
                    ORDER BY RANDOM() LIMIT 1`, [telegramId], (err, opponent) => {
                
                if (!opponent) {
                    bot.sendMessage(chatId, 
                        'üëª –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ üòî\n\n' +
                        '‚è∞ –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ!').catch(console.error);
                    return;
                }
                
                const playerWins = Math.random() > 0.5;
                const pointsWon = 10;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏–≥—Ä–æ–∫–∞
                db.run("UPDATE users SET energy = energy - 20 WHERE telegram_id = ?", [telegramId]);
                
                if (playerWins) {
                    // –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE telegram_id = ?", [pointsWon, telegramId]);
                    db.run("UPDATE users SET p_coins = p_coins - ? WHERE telegram_id = ?", [pointsWon, opponent.telegram_id]);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∏—Ç–≤—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    db.run("INSERT INTO battles (attacker_id, defender_id, winner_id, points_won) VALUES (?, ?, ?, ?)",
                           [user.id, opponent.id, user.id, pointsWon]);
                    
                    bot.sendMessage(chatId, 
                        `üèÜ –ü–û–ë–ï–î–ê! üéâ\n\n` +
                        `‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${opponent.username}\n` +
                        `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy - 20}%\n\n` +
                        'üî• –û—Ç–ª–∏—á–Ω–æ —Å—Ä–∞–∂–∞–ª—Å—è! üí™').catch(console.error);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ
                    bot.sendMessage(opponent.telegram_id, 
                        `‚öîÔ∏è –ù–ê –¢–ï–ë–Ø –ù–ê–ü–ê–õ–ò! üò±\n\n` +
                        `ü•ä –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${user.username}\n` +
                        `üí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª ${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                        'üò§ –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ—Ç—ã–≥—Ä–∞–µ—à—å—Å—è!').catch(console.error);
                } else {
                    // –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
                    db.run("UPDATE users SET p_coins = p_coins - ? WHERE telegram_id = ?", [pointsWon, telegramId]);
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE telegram_id = ?", [pointsWon, opponent.telegram_id]);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∏—Ç–≤—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    db.run("INSERT INTO battles (attacker_id, defender_id, winner_id, points_won) VALUES (?, ?, ?, ?)",
                           [user.id, opponent.id, opponent.id, pointsWon]);
                    
                    bot.sendMessage(chatId, 
                        `üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï üòî\n\n` +
                        `‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${opponent.username}\n` +
                        `üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: -${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                        `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy - 20}%\n\n` +
                        'üí™ –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ!').catch(console.error);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    bot.sendMessage(opponent.telegram_id, 
                        `‚öîÔ∏è –ù–ê –¢–ï–ë–Ø –ù–ê–ü–ê–õ–ò! ü•ä\n\n` +
                        `üèÜ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${user.username}\n` +
                        `üí∞ –ü–æ–±–µ–¥–∏–ª! +${pointsWon} –ü-–∫–æ–∏–Ω–æ–≤!\n\n` +
                        'üéâ –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞!').catch(console.error);
                }
            });
        });
    } catch (error) {
        console.error('‚ùå Find opponent error:', error);
    }
}

function showRating(chatId, telegramId) {
    try {
        db.all(`SELECT username, full_name, p_coins, role 
                FROM users 
                WHERE is_registered = 1 
                ORDER BY p_coins DESC 
                LIMIT 10`, (err, users) => {
            
            if (!users || users.length === 0) {
                bot.sendMessage(chatId, 
                    'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ü§∑‚Äç‚ôÇÔ∏è\n' +
                    '‚è∞ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!').catch(console.error);
                return;
            }
            
            let ratingText = 'üèÜ –¢–û–ü-10 –ü–û –ü-–ö–û–ò–ù–ê–ú üí∞\n\n';
            
            users.forEach((user, index) => {
                const name = user.full_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}. üèÖ`;
                ratingText += `${medal} ${name} - ${user.p_coins} –∫–æ–∏–Ω–æ–≤\n`;
            });
            
            ratingText += '\nüî• –ö—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤ —Ç–æ–ø–µ?';
            
            bot.sendMessage(chatId, ratingText).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show rating error:', error);
    }
}

function restoreEnergy(chatId, telegramId) {
    try {
        db.run("UPDATE users SET energy = 100 WHERE telegram_id = ?", [telegramId], () => {
            bot.sendMessage(chatId, 
                '‚ö° –≠–ù–ï–†–ì–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê! üîã\n\n' +
                'üí™ –≠–Ω–µ—Ä–≥–∏—è: 100%\n' +
                'üéØ –ì–æ—Ç–æ–≤ –∫ 5 —Å—Ä–∞–∂–µ–Ω–∏—è–º –ø–æ–¥—Ä—è–¥!\n\n' +
                'üî• –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º –∫—Ç–æ —Ç—É—Ç –±–æ—Å—Å! üëë').catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Restore energy error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ú–ê–ì–ê–ó–ò–ù–ê ==========

function showShop(chatId, telegramId) {
    try {
        db.get("SELECT p_coins FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            bot.sendMessage(chatId, 
                `üõí –ú–ê–ì–ê–ó–ò–ù –ù–ê–ì–†–ê–î üéÅ\n\n` +
                `üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                'üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å - 100 –∫–æ–∏–Ω–æ–≤ üå¥\n' +
                'üëï –ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏ - 50 –∫–æ–∏–Ω–æ–≤ üéΩ\n' +
                'üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ - 200 –∫–æ–∏–Ω–æ–≤ üéä\n' +
                '‚òï –ö–æ—Ñ–µ –≤ –æ—Ñ–∏—Å - 25 –∫–æ–∏–Ω–æ–≤ ‚òï\n\n' +
                'üõçÔ∏è –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?', shopKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show shop error:', error);
    }
}

function buyItem(chatId, telegramId, itemName, price) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            if (user.p_coins < price) {
                bot.sendMessage(chatId, 
                    `üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü-–∫–æ–∏–Ω–æ–≤! üò¢\n\n` +
                    `üí∞ –£ —Ç–µ–±—è: ${user.p_coins} –∫–æ–∏–Ω–æ–≤\n` +
                    `üéØ –ù—É–∂–Ω–æ: ${price} –∫–æ–∏–Ω–æ–≤\n` +
                    `üìä –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${price - user.p_coins} –∫–æ–∏–Ω–æ–≤\n\n` +
                    'üí™ –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç—ã –∏–ª–∏ –∫—É—Ä—Å—ã!').catch(console.error);
                return;
            }
            
            db.run("UPDATE users SET p_coins = p_coins - ? WHERE telegram_id = ?", [price, telegramId], () => {
                db.run("INSERT INTO purchases (user_id, item_name, price) VALUES (?, ?, ?)",
                       [user.id, itemName, price]);
                
                bot.sendMessage(chatId, 
                    `üéâ –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê! üõçÔ∏è\n\n` +
                    `üéÅ –¢–æ–≤–∞—Ä: ${itemName}\n` +
                    `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${price} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                    `üí∞ –û—Å—Ç–∞—Ç–æ–∫: ${user.p_coins - price} –∫–æ–∏–Ω–æ–≤\n\n` +
                    'üë§ –û–±—Ä–∞—Ç–∏—Å—å –∫ HR –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!\n' +
                    'üéä –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø–æ–∫—É–ø–∫–æ–π!').catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Buy item error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô ==========

function showEventsMenu(chatId) {
    try {
        bot.sendMessage(chatId, 
            'üéØ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üéâ\n\n' +
            'üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞ - 5 –ü-–∫–æ–∏–Ω–æ–≤ ‚ö°\n' +
            'üé∞ –¢—É—Ä–Ω–∏—Ä –ø–æ –ø–æ–∫–µ—Ä—É - 10 –ü-–∫–æ–∏–Ω–æ–≤ üÉè\n' +
            'üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ - 15 –ü-–∫–æ–∏–Ω–æ–≤ ü•≥\n' +
            'üìö –û–±—É—á–∞—é—â–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ - 20 –ü-–∫–æ–∏–Ω–æ–≤ üéì\n\n' +
            'üìÖ –í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n' +
            '‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–π–º-—Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä!', eventsKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show events menu error:', error);
    }
}

function showEventSlots(chatId, telegramId, eventName) {
    try {
        db.all("SELECT * FROM event_slots WHERE category = ? AND status = 'active' AND current_participants < max_participants ORDER BY date, time", 
               [eventName], (err, slots) => {
            
            if (!slots || slots.length === 0) {
                bot.sendMessage(chatId, 
                    `üìÖ ${eventName} üéØ\n\n` + 
                    '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. üòï').catch(console.error);
                return;
            }
            
            let slotsText = `üìÖ ${eventName} - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã! üéØ\n\n`;
            
            slots.forEach((slot, index) => {
                const availableSpots = slot.max_participants - slot.current_participants;
                slotsText += `${index + 1}. üìç ${slot.date} –≤ ${slot.time}\n`;
                slotsText += `   üè¢ –ú–µ—Å—Ç–æ: ${slot.location}\n`;
                slotsText += `   üë• –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç: ${availableSpots}\n`;
                slotsText += `   üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${slot.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n`;
            });
            
            slotsText += 'üéØ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞!\n' +
                        '‚úèÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: 1';
            
            bot.sendMessage(chatId, slotsText).catch(console.error);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            global.userScreenshots[telegramId] = { 
                type: 'event_booking', 
                eventName: eventName, 
                slots: slots 
            };
        });
    } catch (error) {
        console.error('‚ùå Show event slots error:', error);
    }
}

function bookEventSlot(chatId, telegramId, slot) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db.get("SELECT * FROM event_bookings WHERE user_id = ? AND slot_id = ?", 
                   [user.id, slot.id], (err, existing) => {
                
                if (existing) {
                    bot.sendMessage(chatId, 
                        'üòÖ –¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! üìÖ\n' +
                        'üéØ –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç!').catch(console.error);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –º–µ—Å—Ç–∞
                if (slot.current_participants >= slot.max_participants) {
                    bot.sendMessage(chatId, 
                        'üòî –ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! üìµ\n' +
                        '‚è∞ –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!').catch(console.error);
                    return;
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.run("INSERT INTO event_bookings (user_id, slot_id) VALUES (?, ?)", 
                       [user.id, slot.id], () => {
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    db.run("UPDATE event_slots SET current_participants = current_participants + 1 WHERE id = ?", 
                           [slot.id]);
                    
                    bot.sendMessage(chatId, 
                        `üéâ –£–°–ü–ï–®–ù–ê–Ø –ó–ê–ü–ò–°–¨! ‚úÖ\n\n` +
                        `üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${slot.event_name}\n` +
                        `üìÖ –î–∞—Ç–∞: ${slot.date}\n` +
                        `‚è∞ –í—Ä–µ–º—è: ${slot.time}\n` +
                        `üè¢ –ú–µ—Å—Ç–æ: ${slot.location}\n` +
                        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${slot.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                        'üîî –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è!\n' +
                        'üí´ –£–≤–∏–¥–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!').catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Book event slot error:', error);
    }
}

function showAllEventSlots(chatId) {
    console.log(`[DEBUG USER VIEW] showAllEventSlots called for chatId ${chatId}`);
    try {
        db.all("SELECT * FROM event_slots WHERE status = 'active' ORDER BY date, time", (err, slots) => {
            console.log(`[DEBUG USER VIEW] DB query completed, slots count: ${slots ? slots.length : 0}, error: ${err ? 'Yes' : 'No'}`);
            if (!slots || slots.length === 0) {
                bot.sendMessage(chatId,
                    'üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –í–°–ï–• –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô üóìÔ∏è\n\n' +
                    '‚è∞ –ü–æ–∫–∞ —á—Ç–æ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –Ω–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è! üîÑ\n\n' +
                    'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!\n' +
                    'üîî –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!\n' +
                    'üí´ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!').catch((sendErr) => console.error('Send empty message error:', sendErr));
                return;
            }
            
            let scheduleText = 'üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –í–°–ï–• –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô üóìÔ∏è\n\n';
            
            slots.forEach((slot, index) => {
                const availableSpots = slot.max_participants - slot.current_participants;
                scheduleText += `${index + 1}. üéØ ${slot.event_name}\n`;
                scheduleText += `üìÖ ${slot.date} –≤ ${slot.time}\n`;
                scheduleText += `üè¢ ${slot.location}\n`;
                scheduleText += `üë• –°–≤–æ–±–æ–¥–Ω–æ: ${availableSpots}/${slot.max_participants}\n`;
                scheduleText += `üí∞ ${slot.points_reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n`;
            });
            
            scheduleText += 'üéØ –î–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!';
            
            console.log(`[DEBUG USER VIEW] Sending message with ${slots.length} slots`);
            bot.sendMessage(chatId, scheduleText).catch((sendErr) => {
                console.error('‚ùå User view send error:', sendErr);
            });
            console.log(`[DEBUG USER VIEW] Message sent successfully`);
        });
    } catch (error) {
        console.error('‚ùå Show all event slots error:', error);
    }
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function showTasksMenu(chatId, telegramId) {
    try {
        bot.sendMessage(chatId,
            'üìã –°–ò–°–¢–ï–ú–ê –ó–ê–î–ê–ß üéØ\n\n' +
            'üìù –£–ø—Ä–∞–≤–ª—è–π –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã!\n' +
            'üéØ –°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–ª–ª–µ–≥\n' +
            'üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n' +
            'üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', tasksKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Show tasks menu error:', error);
    }
}

function startGiftProcess(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            if (user.p_coins < config.GAME.min_gift_amount) {
                bot.sendMessage(chatId,
                    `üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü-–∫–æ–∏–Ω–æ–≤! üò¢\n\n` +
                    `üí∞ –£ —Ç–µ–±—è: ${user.p_coins} –∫–æ–∏–Ω–æ–≤\n` +
                    `üéØ –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞: ${config.GAME.min_gift_amount} –∫–æ–∏–Ω–æ–≤\n\n` +
                    'üí™ –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç—ã –∏–ª–∏ –∫—É—Ä—Å—ã!').catch(console.error);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ –¥–µ–Ω—å
            db.get(`SELECT SUM(amount) as total_gifted
                    FROM gifts
                    WHERE sender_id = ?
                    AND date(gift_date) = date('now')`, [user.id], (err, giftStats) => {

                const todayGifted = giftStats?.total_gifted || 0;
                const remaining = config.GAME.max_gift_per_day - todayGifted;

                if (remaining <= 0) {
                    bot.sendMessage(chatId,
                        `üö´ –õ–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω! üìÖ\n\n` +
                        `üí∞ –ü–æ–¥–∞—Ä–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayGifted} –∫–æ–∏–Ω–æ–≤\n` +
                        `üéØ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ${config.GAME.max_gift_per_day} –∫–æ–∏–Ω–æ–≤\n\n` +
                        '‚è∞ –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!').catch(console.error);
                    return;
                }

                global.userScreenshots[telegramId] = {
                    type: 'gift',
                    step: 'select_user',
                    remaining: remaining,
                    failed_attempts: 0
                };

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
                db.all(`SELECT username, full_name, telegram_id
                        FROM users
                        WHERE telegram_id != ?
                        AND is_registered = 1
                        ORDER BY full_name`, [telegramId], (err, users) => {

                    if (!users || users.length === 0) {
                        bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!').catch(console.error);
                        return;
                    }

                    let usersList = 'üéÅ –ü–û–î–ê–†–ò–¢–¨ –ü-–ö–û–ò–ù–´ üíù\n\n';
                    usersList += `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–¥–∞—Ä–∫—É: ${remaining} –∫–æ–∏–Ω–æ–≤\n`;
                    usersList += `üìä –ú–∏–Ω–∏–º—É–º: ${config.GAME.min_gift_amount} –∫–æ–∏–Ω–æ–≤\n\n`;
                    usersList += 'üë• –í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n';

                    users.forEach((u, index) => {
                        const name = u.full_name || u.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                        usersList += `${index + 1}. ${name} (@${u.username})\n`;
                    });

                    usersList += '\n‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';

                    global.userScreenshots[telegramId].users = users;
                    bot.sendMessage(chatId, usersList).catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Start gift process error:', error);
    }
}

function handleGiftProcess(chatId, telegramId, text) {
    // [DEBUG LOG] Gift process entry
    const giftState = global.userScreenshots[telegramId];
    console.log(`[GIFT DEBUG] User ${telegramId} text "${text}" | Step: ${giftState ? giftState.step : 'none'}`);
    
    try {
        const giftData = global.userScreenshots[telegramId];

        if (giftData.step === 'select_user') {
            const userIndex = parseInt(text) - 1;

            if (isNaN(userIndex) || userIndex < 0 || userIndex >= giftData.users.length) {
                // [DEBUG LOG] Invalid user number in gift selection
                console.log(`[GIFT DEBUG] Invalid user index "${text}" for user ${telegramId}, users length: ${giftData.users.length}`);
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üî¢').catch(console.error);
                return;
            }

            giftData.selectedUser = giftData.users[userIndex];
            giftData.step = 'enter_amount';

            bot.sendMessage(chatId,
                `üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${giftData.selectedUser.full_name || giftData.selectedUser.username}\n\n` +
                `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${giftData.remaining} –∫–æ–∏–Ω–æ–≤\n` +
                `üìä –ú–∏–Ω–∏–º—É–º: ${config.GAME.min_gift_amount} –∫–æ–∏–Ω–æ–≤\n\n` +
                'üíé –°–∫–æ–ª—å–∫–æ –∫–æ–∏–Ω–æ–≤ –ø–æ–¥–∞—Ä–∏—Ç—å?\n' +
                '‚úèÔ∏è –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ:').catch(console.error);

        } else if (giftData.step === 'enter_amount') {
            const amount = parseInt(text);

            if (isNaN(amount) || amount < config.GAME.min_gift_amount || amount > giftData.remaining) {
                bot.sendMessage(chatId,
                    `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! üí∏\n\n` +
                    `üìä –ú–∏–Ω–∏–º—É–º: ${config.GAME.min_gift_amount} –∫–æ–∏–Ω–æ–≤\n` +
                    `üí∞ –ú–∞–∫—Å–∏–º—É–º: ${giftData.remaining} –∫–æ–∏–Ω–æ–≤\n\n` +
                    'üî¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:').catch(console.error);
                return;
            }

            giftData.amount = amount;
            giftData.step = 'enter_message';

            bot.sendMessage(chatId,
                `üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤! üíù\n\n` +
                `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${giftData.selectedUser.full_name || giftData.selectedUser.username}\n` +
                `üí∞ –°—É–º–º–∞: ${amount} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                'üíå –î–æ–±–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–æ–¥–∞—Ä–∫—É:\n' +
                '‚úèÔ∏è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")').catch(console.error);

        } else if (giftData.step === 'enter_message') {
            const message = text === '–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è' ? null : text;
            processGift(chatId, telegramId, giftData, message);
        }
    } catch (error) {
        console.error('‚ùå Handle gift process error:', error);
    }
}

function processGift(chatId, telegramId, giftData, message) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, sender) => {
            if (!sender) return;

            db.get("SELECT id FROM users WHERE telegram_id = ?", [giftData.selectedUser.telegram_id], (err, receiver) => {
                if (!receiver) return;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                db.get("SELECT p_coins FROM users WHERE id = ?", [sender.id], (err, senderData) => {
                    if (!senderData || senderData.p_coins < giftData.amount) {
                        bot.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!').catch(console.error);
                        delete global.userScreenshots[telegramId];
                        return;
                    }

                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–∏–Ω—ã
                    db.run("UPDATE users SET p_coins = p_coins - ? WHERE id = ?", [giftData.amount, sender.id]);
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE id = ?", [giftData.amount, receiver.id]);

                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    db.run("INSERT INTO gifts (sender_id, receiver_id, amount, message) VALUES (?, ?, ?, ?)",
                           [sender.id, receiver.id, giftData.amount, message], () => {

                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        bot.sendMessage(chatId,
                            `üéâ –ü–û–î–ê–†–û–ö –û–¢–ü–†–ê–í–õ–ï–ù! üíù\n\n` +
                            `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${giftData.selectedUser.full_name || giftData.selectedUser.username}\n` +
                            `üí∞ –°—É–º–º–∞: ${giftData.amount} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                            `üíå –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n` +
                            'üéä –°–ø–∞—Å–∏–±–æ –∑–∞ —â–µ–¥—Ä–æ—Å—Ç—å!').catch(console.error);

                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        const senderName = global.userScreenshots[telegramId]?.senderName || '–ö–æ–ª–ª–µ–≥–∞';
                        bot.sendMessage(giftData.selectedUser.telegram_id,
                            `üéÅ –¢–ï–ë–ï –ü–û–î–ê–†–û–ö! üíù\n\n` +
                            `üë§ –û—Ç: ${senderName}\n` +
                            `üí∞ –°—É–º–º–∞: +${giftData.amount} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                            `üíå –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n` +
                            'ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–∞—Ä–∫–æ–º!').catch(console.error);

                        delete global.userScreenshots[telegramId];
                    });
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Process gift error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –ó–ê–î–ê–ß ==========

function showMyTasks(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            db.all(`SELECT t.*,
                    u_creator.full_name as creator_name, u_creator.username as creator_username
                    FROM tasks t
                    LEFT JOIN users u_creator ON t.creator_id = u_creator.id
                    WHERE t.assignee_id = ? AND t.status = 'pending'
                    ORDER BY t.due_date ASC, t.priority DESC`, [user.id], (err, tasks) => {

                if (!tasks || tasks.length === 0) {
                    bot.sendMessage(chatId,
                        'üìù –ú–û–ò –ó–ê–î–ê–ß–ò üéØ\n\n' +
                        '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ\n\n' +
                        'üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ú–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –≤–∑—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏!').catch(console.error);
                    return;
                }

                let tasksText = 'üìù –ú–û–ò –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò üéØ\n\n';

                tasks.forEach((task, index) => {
                    const priority = task.priority === 'high' ? 'üî¥' : task.priority === 'medium' ? 'üü°' : 'üü¢';
                    const creatorName = task.creator_name || task.creator_username || '–°–∏—Å—Ç–µ–º–∞';
                    const dueDate = task.due_date ? new Date(task.due_date).toLocaleDateString('ru-RU') : '–±–µ–∑ —Å—Ä–æ–∫–∞';

                    tasksText += `${index + 1}. ${priority} ${task.title}\n`;
                    tasksText += `   üìù ${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
                    tasksText += `   üë§ –û—Ç: ${creatorName}\n`;
                    tasksText += `   üìÖ –°—Ä–æ–∫: ${dueDate}\n`;
                    if (task.reward_coins > 0) {
                        tasksText += `   üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                    }
                    tasksText += '\n';
                });

                tasksText += '‚úÖ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞–ø–∏—à–∏:\n';
                tasksText += '"–≤—ã–ø–æ–ª–Ω–∏–ª [–Ω–æ–º–µ—Ä]"\n';
                tasksText += 'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–≤—ã–ø–æ–ª–Ω–∏–ª 1"';

                bot.sendMessage(chatId, tasksText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show my tasks error:', error);
    }
}

function showCompletedTasks(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            db.all(`SELECT t.*,
                    u_creator.full_name as creator_name, u_creator.username as creator_username
                    FROM tasks t
                    LEFT JOIN users u_creator ON t.creator_id = u_creator.id
                    WHERE t.assignee_id = ? AND t.status = 'completed'
                    ORDER BY t.completed_date DESC
                    LIMIT 10`, [user.id], (err, tasks) => {

                if (!tasks || tasks.length === 0) {
                    bot.sendMessage(chatId,
                        '‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò üèÜ\n\n' +
                        'üìã –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n\n' +
                        'üí™ –ù–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏!').catch(console.error);
                    return;
                }

                let tasksText = '‚úÖ –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò üèÜ\n\n';

                tasks.forEach((task, index) => {
                    const creatorName = task.creator_name || task.creator_username || '–°–∏—Å—Ç–µ–º–∞';
                    const completedDate = new Date(task.completed_date).toLocaleDateString('ru-RU');

                    tasksText += `${index + 1}. ‚úÖ ${task.title}\n`;
                    tasksText += `   üë§ –û—Ç: ${creatorName}\n`;
                    tasksText += `   üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedDate}\n`;
                    if (task.reward_coins > 0) {
                        tasksText += `   üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${task.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                    }
                    tasksText += '\n';
                });

                bot.sendMessage(chatId, tasksText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show completed tasks error:', error);
    }
}

function startTaskCreation(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            global.userScreenshots[telegramId] = {
                type: 'task_creation',
                step: 'select_assignee',
                taskData: {
                    creator_id: user.id,
                    priority: 'medium',
                    reward_coins: 0
                },
                failed_attempts: 0
            };

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            db.all(`SELECT username, full_name, telegram_id, id
                    FROM users
                    WHERE telegram_id != ?
                    AND is_registered = 1
                    ORDER BY full_name`, [telegramId], (err, users) => {

                if (!users || users.length === 0) {
                    bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á!').catch(console.error);
                    return;
                }

                let usersList = 'üéØ –°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ß–£ üìù\n\n';
                usersList += 'üë• –í—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:\n\n';

                users.forEach((u, index) => {
                    const name = u.full_name || u.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    usersList += `${index + 1}. ${name} (@${u.username})\n`;
                });

                usersList += '\n‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';

                global.userScreenshots[telegramId].users = users;
                bot.sendMessage(chatId, usersList).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Start task creation error:', error);
    }
}

function showTeamTasks(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            db.all(`SELECT t.*,
                    u_creator.full_name as creator_name, u_creator.username as creator_username,
                    u_assignee.full_name as assignee_name, u_assignee.username as assignee_username
                    FROM tasks t
                    LEFT JOIN users u_creator ON t.creator_id = u_creator.id
                    LEFT JOIN users u_assignee ON t.assignee_id = u_assignee.id
                    WHERE t.creator_id = ? OR t.assignee_id = ?
                    ORDER BY t.created_date DESC
                    LIMIT 15`, [user.id, user.id], (err, tasks) => {

                if (!tasks || tasks.length === 0) {
                    bot.sendMessage(chatId,
                        'üë• –ó–ê–î–ê–ß–ò –ö–û–ú–ê–ù–î–´ üéØ\n\n' +
                        'üìã –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ –∫–æ–º–∞–Ω–¥–µ\n\n' +
                        'üéØ –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!').catch(console.error);
                    return;
                }

                let tasksText = 'üë• –ó–ê–î–ê–ß–ò –ö–û–ú–ê–ù–î–´ üéØ\n\n';

                tasks.forEach((task, index) => {
                    const creatorName = task.creator_name || task.creator_username || '–°–∏—Å—Ç–µ–º–∞';
                    const assigneeName = task.assignee_name || task.assignee_username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    const status = task.status === 'completed' ? '‚úÖ' : '‚è≥';
                    const priority = task.priority === 'high' ? 'üî¥' : task.priority === 'medium' ? 'üü°' : 'üü¢';

                    tasksText += `${index + 1}. ${status} ${priority} ${task.title}\n`;
                    tasksText += `   üë§ ${creatorName} ‚Üí ${assigneeName}\n`;
                    tasksText += `   üìÖ ${new Date(task.created_date).toLocaleDateString('ru-RU')}\n\n`;
                });

                bot.sendMessage(chatId, tasksText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show team tasks error:', error);
    }
}

function completeTask(chatId, telegramId, taskNumber) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            db.all(`SELECT t.*,
                    u_creator.full_name as creator_name, u_creator.username as creator_username
                    FROM tasks t
                    LEFT JOIN users u_creator ON t.creator_id = u_creator.id
                    WHERE t.assignee_id = ? AND t.status = 'pending'
                    ORDER BY t.due_date ASC, t.priority DESC`, [user.id], (err, tasks) => {

                if (!tasks || tasks.length === 0) {
                    bot.sendMessage(chatId, 'üìã –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!').catch(console.error);
                    return;
                }

                if (taskNumber < 1 || taskNumber > tasks.length) {
                    bot.sendMessage(chatId,
                        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!\n\n` +
                        `üî¢ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞—á: 1-${tasks.length}\n` +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–≤—ã–ø–æ–ª–Ω–∏–ª 1"').catch(console.error);
                    return;
                }

                const task = tasks[taskNumber - 1];

                // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                db.run("UPDATE tasks SET status = 'completed', completed_date = CURRENT_TIMESTAMP WHERE id = ?",
                       [task.id], () => {

                    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (task.reward_coins > 0) {
                        db.run("UPDATE users SET p_coins = p_coins + ? WHERE id = ?",
                               [task.reward_coins, user.id]);
                    }

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    bot.sendMessage(chatId,
                        `‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê! üéâ\n\n` +
                        `üìù "${task.title}"\n` +
                        `üë§ –û—Ç: ${task.creator_name || task.creator_username || '–°–∏—Å—Ç–µ–º–∞'}\n` +
                        (task.reward_coins > 0 ? `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${task.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` : '') +
                        '\nüèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!').catch(console.error);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
                    if (task.creator_id && task.creator_id !== user.id) {
                        db.get("SELECT telegram_id, full_name, username FROM users WHERE id = ?",
                               [task.creator_id], (err, creator) => {
                            if (creator) {
                                const executorName = user.full_name || user.username || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫';
                                bot.sendMessage(creator.telegram_id,
                                    `‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê! üéâ\n\n` +
                                    `üìù "${task.title}"\n` +
                                    `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorName}\n` +
                                    `üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                                    'üéØ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!').catch(console.error);
                            }
                        });
                    }
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Complete task error:', error);
    }
}

function showUserStats(chatId, telegramId) {
    try {
        db.get(`SELECT u.*, 
                (SELECT COUNT(*) FROM battles WHERE winner_id = u.id) as wins,
                (SELECT COUNT(*) FROM battles WHERE (attacker_id = u.id OR defender_id = u.id) AND winner_id != u.id) as losses,
                (SELECT COUNT(*) FROM purchases WHERE user_id = u.id) as purchases_count,
                (SELECT COUNT(*) FROM event_bookings WHERE user_id = u.id) as events_count
                FROM users u WHERE u.telegram_id = ?`, [telegramId], (err, stats) => {
            
            if (!stats) return;
            
            const winRate = stats.wins + stats.losses > 0 ? 
                Math.round((stats.wins / (stats.wins + stats.losses)) * 100) : 0;
            
            const statsText = 
                'üìä –¢–í–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê üéØ\n\n' +
                `üë§ –ò–º—è: ${stats.full_name || stats.username}\n` +
                `üí∞ –ü-–∫–æ–∏–Ω–æ–≤: ${stats.p_coins}\n` +
                `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${stats.energy}%\n` +
                `üé≠ –†–æ–ª—å: ${stats.role}\n\n` +
                '‚öîÔ∏è PVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n' +
                `üèÜ –ü–æ–±–µ–¥: ${stats.wins || 0}\n` +
                `üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.losses || 0}\n` +
                `üìä –í–∏–Ω—Ä–µ–π—Ç: ${winRate}%\n\n` +
                'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n' +
                `üõçÔ∏è –ü–æ–∫—É–ø–æ–∫: ${stats.purchases_count || 0}\n` +
                `üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${stats.events_count || 0}\n\n` +
                `üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(stats.registration_date).toLocaleDateString('ru-RU')}\n\n` +
                'üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
            
            bot.sendMessage(chatId, statsText).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show user stats error:', error);
    }
}

// ========== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========

function handleAdminLogin(chatId, telegramId) {
    try {
        db.get("SELECT * FROM users WHERE telegram_id = ? AND role = '—Å—Ç–∞—Ä–∏—á–æ–∫'", [telegramId], (err, user) => {
            if (!user) {
                bot.sendMessage(chatId, 
                    '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! üö´\n\n' +
                    'üë§ –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∏—á–∫–∏ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É!').catch(console.error);
                return;
            }
            
            db.run("INSERT OR REPLACE INTO admins (user_id, telegram_id) VALUES (?, ?)", 
                   [user.id, telegramId], () => {
                bot.sendMessage(chatId, 
                    'üîë –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ê–î–ú–ò–ù–ö–£! üë®‚Äçüíº\n\n' +
                    'üéØ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å—É–ø–µ—Ä—Å–∏–ª—ã!\n' +
                    'üìä –£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∫–∞–∫ —Ö–æ—á–µ—à—å!\n\n' +
                    'üöÄ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', adminKeyboard).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Admin login error:', error);
    }
}

function exitAdminMode(chatId, telegramId) {
    try {
        db.run("DELETE FROM admins WHERE telegram_id = ?", [telegramId], () => {
            bot.sendMessage(chatId, 
                'üëã –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏! üö™\n\n' +
                'üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º!').catch(console.error);
            backToMainMenu(chatId, telegramId);
        });
    } catch (error) {
        console.error('‚ùå Exit admin mode error:', error);
    }
}

// ========== –°–û–ó–î–ê–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô –ê–î–ú–ò–ù–û–ú ==========

function startEventCreation(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            global.adminStates[telegramId] = {
                step: 'category',
                eventData: {}
            };
            
            bot.sendMessage(chatId, 
                'üóìÔ∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø! ‚ú®\n\n' +
                'üéØ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n' +
                'üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', 
                eventCategoryKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Start event creation error:', error);
    }
}

function handleAdminEventCreation(chatId, telegramId, text) {
    try {
        if (!global.adminStates[telegramId]) return;

        const state = global.adminStates[telegramId];

        if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
            delete global.adminStates[telegramId];
            bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!', adminKeyboard).catch(console.error);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
        if (state.step === 'select_slot_edit') {
            const slotId = parseInt(text);
            const slot = state.slots.find(s => s.id === slotId);

            if (!slot) {
                bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!').catch(console.error);
                return;
            }

            state.selectedSlot = slot;
            state.step = 'edit_field';

            bot.sendMessage(chatId,
                `‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: ${slot.event_name}\n\n` +
                `üìÖ –î–∞—Ç–∞: ${slot.date}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${slot.time}\n` +
                `üìç –ú–µ—Å—Ç–æ: ${slot.location}\n` +
                `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${slot.max_participants}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${slot.points_reward}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${slot.status}\n\n` +
                '–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n' +
                '1. –î–∞—Ç—É\n' +
                '2. –í—Ä–µ–º—è\n' +
                '3. –ú–µ—Å—Ç–æ\n' +
                '4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' +
                '5. –ù–∞–≥—Ä–∞–¥—É\n' +
                '6. –°—Ç–∞—Ç—É—Å (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)\n\n' +
                'üî¢ –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä:').catch(console.error);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
        if (state.step === 'select_slot_delete') {
            const slotId = parseInt(text);
            const slot = state.slots.find(s => s.id === slotId);

            if (!slot) {
                bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!').catch(console.error);
                return;
            }

            db.run("DELETE FROM event_slots WHERE id = ?", [slotId], () => {
                bot.sendMessage(chatId,
                    `üóëÔ∏è –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –£–î–ê–õ–ï–ù–û!\n\n` +
                    `‚ùå "${slot.event_name}" —É–¥–∞–ª–µ–Ω–æ\n` +
                    `üìÖ ${slot.date} –≤ ${slot.time}\n\n` +
                    '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', adminKeyboard).catch(console.error);

                delete global.adminStates[telegramId];
            });
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        if (state.step === 'edit_field') {
            const fieldNumber = parseInt(text);
            const slot = state.selectedSlot;

            switch (fieldNumber) {
                case 1:
                    state.editField = 'date';
                    state.step = 'edit_value';
                    bot.sendMessage(chatId,
                        'üìÖ –ò–ó–ú–ï–ù–ò–¢–¨ –î–ê–¢–£\n\n' +
                        `–¢–µ–∫—É—â–∞—è: ${slot.date}\n\n` +
                        '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                        '–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É:').catch(console.error);
                    break;
                case 2:
                    state.editField = 'time';
                    state.step = 'edit_value';
                    bot.sendMessage(chatId,
                        '‚è∞ –ò–ó–ú–ï–ù–ò–¢–¨ –í–†–ï–ú–Ø\n\n' +
                        `–¢–µ–∫—É—â–µ–µ: ${slot.time}\n\n` +
                        '–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n' +
                        '–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:').catch(console.error);
                    break;
                case 3:
                    state.editField = 'location';
                    state.step = 'edit_value';
                    bot.sendMessage(chatId,
                        'üìç –ò–ó–ú–ï–ù–ò–¢–¨ –ú–ï–°–¢–û\n\n' +
                        `–¢–µ–∫—É—â–µ–µ: ${slot.location}\n\n` +
                        '–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:').catch(console.error);
                    break;
                case 4:
                    state.editField = 'max_participants';
                    state.step = 'edit_value';
                    bot.sendMessage(chatId,
                        'üë• –ò–ó–ú–ï–ù–ò–¢–¨ –ö–û–õ–ò–ß–ï–°–¢–í–û –£–ß–ê–°–¢–ù–ò–ö–û–í\n\n' +
                        `–¢–µ–∫—É—â–µ–µ: ${slot.max_participants}\n\n` +
                        '–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:').catch(console.error);
                    break;
                case 5:
                    state.editField = 'points_reward';
                    state.step = 'edit_value';
                    bot.sendMessage(chatId,
                        'üí∞ –ò–ó–ú–ï–ù–ò–¢–¨ –ù–ê–ì–†–ê–î–£\n\n' +
                        `–¢–µ–∫—É—â–∞—è: ${slot.points_reward} –∫–æ–∏–Ω–æ–≤\n\n` +
                        '–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É:').catch(console.error);
                    break;
                case 6:
                    const newStatus = slot.status === 'active' ? 'inactive' : 'active';
                    db.run("UPDATE event_slots SET status = ? WHERE id = ?", [newStatus, slot.id], () => {
                        bot.sendMessage(chatId,
                            `üìä –°–¢–ê–¢–£–° –ò–ó–ú–ï–ù–ï–ù!\n\n` +
                            `üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${slot.event_name}\n` +
                            `üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatus === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω üü¢' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥'}\n\n` +
                            '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', adminKeyboard).catch(console.error);

                        delete global.adminStates[telegramId];
                    });
                    break;
                default:
                    bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ 6.').catch(console.error);
            }
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if (state.step === 'edit_value') {
            const slot = state.selectedSlot;
            const field = state.editField;
            let newValue = text;
            let isValid = true;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (field === 'date' && !/^\d{2}\.\d{2}\.\d{4}$/.test(newValue)) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì').catch(console.error);
                return;
            }
            if (field === 'time' && !/^\d{2}:\d{2}$/.test(newValue)) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú').catch(console.error);
                return;
            }
            if ((field === 'max_participants' || field === 'points_reward') && (isNaN(parseInt(newValue)) || parseInt(newValue) < 1)) {
                bot.sendMessage(chatId, '‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!').catch(console.error);
                return;
            }

            if (field === 'max_participants' || field === 'points_reward') {
                newValue = parseInt(newValue);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.run(`UPDATE event_slots SET ${field} = ? WHERE id = ?`, [newValue, slot.id], () => {
                const fieldNames = {
                    'date': '–î–∞—Ç–∞',
                    'time': '–í—Ä–µ–º—è',
                    'location': '–ú–µ—Å—Ç–æ',
                    'max_participants': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                    'points_reward': '–ù–∞–≥—Ä–∞–¥–∞'
                };

                bot.sendMessage(chatId,
                    `‚úÖ –ò–ó–ú–ï–ù–ï–ù–û!\n\n` +
                    `üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${slot.event_name}\n` +
                    `üìù ${fieldNames[field]}: ${newValue}\n\n` +
                    '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', adminKeyboard).catch(console.error);

                delete global.adminStates[telegramId];
            });
            return;
        }
        
        switch (state.step) {
            case 'category':
            if (['üèÉ‚Äç‚ôÇÔ∏è –ó–∞—Ä—è–¥–∫–∞', 'üé∞ –ü–æ–∫–µ—Ä', 'üéâ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', 'üìö –¢—Ä–µ–Ω–∏–Ω–≥–∏'].includes(text)) {
                state.eventData.category = text.substring(text.indexOf(' ') + 1).trim();
                state.eventData.name = text.replace(/[\w\s]+\s/, '').trim();
                    state.step = 'custom_name';
                    
                    bot.sendMessage(chatId, 
                        `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${text}\n\n` +
                        'üìù –®–∞–≥ 2: –ù–∞–ø–∏—à–∏ –ù–ê–ó–í–ê–ù–ò–ï –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n' +
                        `üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"\n\n` +
                        '‚úèÔ∏è –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–¥–∞–ª–µ–µ" —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ').catch(console.error);
                }
                break;
                
            case 'custom_name':
                if (text.toLowerCase() !== '–¥–∞–ª–µ–µ') {
                    state.eventData.name = text;
                }
                state.step = 'date';
                
                bot.sendMessage(chatId, 
                    `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${state.eventData.name}\n\n` +
                    'üìÖ –®–∞–≥ 3: –£–∫–∞–∂–∏ –î–ê–¢–£ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n' +
                    'üìù –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                    'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024').catch(console.error);
                break;
                
            case 'date':
                if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
                    state.eventData.date = text;
                    state.step = 'time';
                    
                    bot.sendMessage(chatId, 
                        `‚úÖ –î–∞—Ç–∞: ${text}\n\n` +
                        '‚è∞ –®–∞–≥ 4: –£–∫–∞–∂–∏ –í–†–ï–ú–Ø –Ω–∞—á–∞–ª–∞\n\n' +
                        'üìù –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 18:00').catch(console.error);
                } else {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n' +
                        'üìù –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024').catch(console.error);
                }
                break;
                
            case 'time':
                if (/^\d{2}:\d{2}$/.test(text)) {
                    state.eventData.time = text;
                    state.step = 'location';
                    
                    bot.sendMessage(chatId, 
                        `‚úÖ –í—Ä–µ–º—è: ${text}\n\n` +
                        'üìç –®–∞–≥ 5: –£–∫–∞–∂–∏ –ú–ï–°–¢–û –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª 1", "–û—Ñ–∏—Å, 2 —ç—Ç–∞–∂"').catch(console.error);
                } else {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n' +
                        'üìù –ò—Å–ø–æ–ª—å–∑—É–π: –ß–ß:–ú–ú\n' +
                        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 18:00').catch(console.error);
                }
                break;
                
            case 'location':
                state.eventData.location = text;
                state.step = 'participants';
                
                bot.sendMessage(chatId, 
                    `‚úÖ –ú–µ—Å—Ç–æ: ${text}\n\n` +
                    'üë• –®–∞–≥ 6: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n' +
                    'üî¢ –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n' +
                    'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 10').catch(console.error);
                break;
                
            case 'participants':
                const maxParticipants = parseInt(text);
                if (isNaN(maxParticipants) || maxParticipants < 1 || maxParticipants > 100) {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!\n' +
                        'üî¢ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100').catch(console.error);
                    return;
                }
                
                state.eventData.maxParticipants = maxParticipants;
                state.step = 'reward';
                
                bot.sendMessage(chatId, 
                    `‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${maxParticipants}\n\n` +
                    'üèÜ –®–∞–≥ 7: –ù–∞–≥—Ä–∞–¥–∞ –≤ –ü-–∫–æ–∏–Ω–∞—Ö\n\n' +
                    'üí∞ –ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –∑–∞ —É—á–∞—Å—Ç–∏–µ\n' +
                    'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 15').catch(console.error);
                break;
                
            case 'reward':
                const reward = parseInt(text);
                if (isNaN(reward) || reward < 1 || reward > 100) {
                    bot.sendMessage(chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!\n' +
                        'üí∞ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100').catch(console.error);
                    return;
                }
                
                state.eventData.reward = reward;
                createEventSlot(chatId, telegramId, state.eventData);
                break;
        }
    } catch (error) {
        console.error('‚ùå Handle admin event creation error:', error);
    }
}

function createEventSlot(chatId, telegramId, eventData) {
    try {
        db.run(`INSERT INTO event_slots 
                (event_name, category, date, time, location, max_participants, points_reward, status) 
                VALUES (?, ?, ?, ?, ?, ?, ?, 'active')`,
               [eventData.name, eventData.category, eventData.date, eventData.time, 
                eventData.location, eventData.maxParticipants, eventData.reward], () => {
            
            delete global.adminStates[telegramId];
            
            bot.sendMessage(chatId, 
                'üéâ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –°–û–ó–î–ê–ù–û! ‚úÖ\n\n' +
                `üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: ${eventData.name}\n` +
                `üìÖ –î–∞—Ç–∞: ${eventData.date}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${eventData.time}\n` +
                `üìç –ú–µ—Å—Ç–æ: ${eventData.location}\n` +
                `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${eventData.maxParticipants}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${eventData.reward} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                'üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!', adminKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Create event slot error:', error);
    }
}

function showAllEventSlotsAdmin(chatId, telegramId) {
    console.log(`[DEBUG ADMIN VIEW] showAllEventSlotsAdmin called for chatId ${chatId}, user ${telegramId}`);
    db.all("SELECT * FROM event_slots ORDER BY date, time", (err, slots) => {
        console.log(`[DEBUG ADMIN VIEW] DB query completed, slots count: ${slots ? slots.length : 0}, error: ${err ? 'Yes' : 'No'}`);
        if (err) {
            console.error('‚ùå Show all event slots admin DB error:', err);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!').catch((sendErr) => console.error('Send error:', sendErr));
            return;
        }
        if (!slots || slots.length === 0) {
            console.log(`[DEBUG ADMIN VIEW] No slots, sending empty message`);
            bot.sendMessage(chatId,
                'üìÖ –í–°–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üóìÔ∏è\n\n' +
                'üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!\n\n' +
                'üéØ –°–æ–∑–¥–∞–π –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑\n' +
                '"üóìÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"', adminKeyboard).catch((sendErr) => console.error('Send empty message error:', sendErr));
            return;
        }

        let slotsText = 'üìÖ –í–°–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üóìÔ∏è\n\n';

        slots.forEach((slot, index) => {
            const status = slot.status === 'active' ? 'üü¢' : 'üî¥';
            slotsText += `${index + 1}. ${status} ${slot.event_name}\n`;
            slotsText += `   üìÖ ${slot.date} –≤ ${slot.time}\n`;
            slotsText += `   üìç ${slot.location}\n`;
            slotsText += `   üë• ${slot.current_participants}/${slot.max_participants}\n`;
            slotsText += `   üí∞ ${slot.points_reward} –∫–æ–∏–Ω–æ–≤\n`;
            slotsText += `   üÜî ID: ${slot.id}\n\n`;
        });

        slotsText += '‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç"\n';
        slotsText += 'üóëÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç"';

        console.log(`[DEBUG ADMIN VIEW] Sending message with ${slots.length} slots`);
        bot.sendMessage(chatId, slotsText, adminKeyboard).catch((sendErr) => {
            console.error('‚ùå Admin view send error:', sendErr);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!').catch(console.error);
        });
        console.log(`[DEBUG ADMIN VIEW] Message sent successfully`);
    });
}

function startSlotEdit(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            global.adminStates[telegramId] = {
                step: 'select_slot_edit',
                eventData: {}
            };

            db.all("SELECT * FROM event_slots ORDER BY date, time", (err, slots) => {
                if (!slots || slots.length === 0) {
                    bot.sendMessage(chatId, 'üìã –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!').catch(console.error);
                    return;
                }

                let slotsText = '‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï\n\n';
                slotsText += '–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';

                slots.forEach((slot, index) => {
                    const status = slot.status === 'active' ? 'üü¢' : 'üî¥';
                    slotsText += `${slot.id}. ${status} ${slot.event_name}\n`;
                    slotsText += `   üìÖ ${slot.date} –≤ ${slot.time}\n\n`;
                });

                slotsText += 'üî¢ –ù–∞–ø–∏—à–∏ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:';

                global.adminStates[telegramId].slots = slots;
                bot.sendMessage(chatId, slotsText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Start slot edit error:', error);
    }
}

function startSlotDelete(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            global.adminStates[telegramId] = {
                step: 'select_slot_delete',
                eventData: {}
            };

            db.all("SELECT * FROM event_slots ORDER BY date, time", (err, slots) => {
                if (!slots || slots.length === 0) {
                    bot.sendMessage(chatId, 'üìã –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!').catch(console.error);
                    return;
                }

                let slotsText = 'üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï\n\n';
                slotsText += '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n';
                slotsText += '–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';

                slots.forEach((slot, index) => {
                    const status = slot.status === 'active' ? 'üü¢' : 'üî¥';
                    slotsText += `${slot.id}. ${status} ${slot.event_name}\n`;
                    slotsText += `   üìÖ ${slot.date} –≤ ${slot.time}\n`;
                    slotsText += `   üë• ${slot.current_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n`;
                });

                slotsText += 'üî¢ –ù–∞–ø–∏—à–∏ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:';

                global.adminStates[telegramId].slots = slots;
                bot.sendMessage(chatId, slotsText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Start slot delete error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –†–ê–°–°–´–õ–û–ö ==========

function startBroadcast(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            bot.sendMessage(chatId,
                'üì¢ –°–û–ó–î–ê–¢–¨ –†–ê–°–°–´–õ–ö–£ üì®\n\n' +
                'üë• –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n\n' +
                '‚Ä¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n' +
                '‚Ä¢ –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∏—á–∫–∞–º - –æ–ø—ã—Ç–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\n' +
                '‚Ä¢ –¢–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä–∞–º - –Ω–æ–≤–∏—á–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ\n' +
                '‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω–æ - –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª—é–¥–µ–π\n\n' +
                'üëá –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', broadcastKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Start broadcast error:', error);
    }
}

function setBroadcastTarget(chatId, telegramId, target) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            global.userScreenshots[telegramId] = {
                type: 'broadcast',
                target: target,
                step: 'message'
            };

            let targetText = '';
            switch (target) {
                case 'all':
                    targetText = 'üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º';
                    break;
                case 'seniors':
                    targetText = 'üßì –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∏—á–∫–∞–º';
                    break;
                case 'interns':
                    targetText = 'üë∂ –¢–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä–∞–º';
                    break;
                case 'selective':
                    targetText = 'üìä –í—ã–±–æ—Ä–æ—á–Ω–æ';
                    break;
            }

            if (target === 'selective') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
                db.all("SELECT username, full_name, telegram_id, role FROM users WHERE is_registered = 1 ORDER BY full_name", (err, users) => {
                    if (!users || users.length === 0) {
                        bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!').catch(console.error);
                        return;
                    }

                    let usersList = 'üìä –í–´–ë–û–†–û–ß–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê\n\n';
                    usersList += '–í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n';

                    users.forEach((user, index) => {
                        const name = user.full_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                        const role = user.role === '—Å—Ç–∞–∂–µ—Ä' ? 'üë∂' : 'üßì';
                        usersList += `${index + 1}. ${role} ${name}\n`;
                    });

                    usersList += '\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: 1,3,5 –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–≤—Å–µ–º"';

                    global.userScreenshots[telegramId].users = users;
                    global.userScreenshots[telegramId].step = 'select_users';
                    bot.sendMessage(chatId, usersList).catch(console.error);
                });
            } else {
                bot.sendMessage(chatId,
                    `üì¢ –†–ê–°–°–´–õ–ö–ê: ${targetText}\n\n` +
                    'üìù –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n' +
                    'üí° –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n' +
                    '‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!').catch(console.error);
            }
        });
    } catch (error) {
        console.error('‚ùå Set broadcast target error:', error);
    }
}

function handleBroadcastMessage(chatId, telegramId, text) {
    try {
        const broadcastData = global.userScreenshots[telegramId];

        if (broadcastData.step === 'select_users') {
            let selectedUsers = [];

            if (text.toLowerCase() === '–≤—Å–µ–º') {
                selectedUsers = broadcastData.users;
            } else {
                const indices = text.split(',').map(n => parseInt(n.trim()) - 1);
                selectedUsers = indices.filter(i => i >= 0 && i < broadcastData.users.length)
                                      .map(i => broadcastData.users[i]);
            }

            if (selectedUsers.length === 0) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.').catch(console.error);
                return;
            }

            broadcastData.selectedUsers = selectedUsers;
            broadcastData.step = 'message';

            bot.sendMessage(chatId,
                `üìä –í–´–ë–†–ê–ù–û –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô: ${selectedUsers.length}\n\n` +
                selectedUsers.map(u => `‚Ä¢ ${u.full_name || u.username}`).join('\n') + '\n\n' +
                'üìù –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:').catch(console.error);

        } else if (broadcastData.step === 'message') {
            broadcastData.message = text;
            broadcastData.media = []; // Initialize media array
            broadcastData.step = 'media';

            bot.sendMessage(chatId,
                `üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n` +
                `üí¨ "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"\n\n` +
                'üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n' +
                '‚ö° –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤–æ" —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.\n' +
                'üí° –§–æ—Ç–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å—é –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ.').catch(console.error);

        } else if (broadcastData.step === 'media') {
            if (text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' || text === '/done') {
                console.log(`[BROADCAST LOG] Admin ${telegramId} finished media input. Media count: ${broadcastData.media.length}, sending broadcast.`);
                sendBroadcast(chatId, telegramId, broadcastData, broadcastData.message);
            } else {
                bot.sendMessage(chatId, 'üì∏ –û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –∏–ª–∏ "–≥–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.').catch(console.error);
            }
        }
    } catch (error) {
        console.error('‚ùå Handle broadcast message error:', error);
    }
}

function sendBroadcast(chatId, telegramId, broadcastData, message) {
    try {
        let query = '';
        let params = [];

        if (broadcastData.target === 'selective') {
            const userIds = broadcastData.selectedUsers.map(u => u.telegram_id);
            query = `SELECT telegram_id, full_name, username FROM users WHERE telegram_id IN (${userIds.map(() => '?').join(',')}) AND is_registered = 1`;
            params = userIds;
        } else {
            switch (broadcastData.target) {
                case 'all':
                    query = 'SELECT telegram_id, full_name, username FROM users WHERE is_registered = 1';
                    break;
                case 'seniors':
                    query = "SELECT telegram_id, full_name, username FROM users WHERE role = '—Å—Ç–∞—Ä–∏—á–æ–∫' AND is_registered = 1";
                    break;
                case 'interns':
                    query = "SELECT telegram_id, full_name, username FROM users WHERE role = '—Å—Ç–∞–∂–µ—Ä' AND is_registered = 1";
                    break;
            }
        }

        db.all(query, params, (err, users) => {
            if (!users || users.length === 0) {
                bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!').catch(console.error);
                return;
            }

            const media = broadcastData.media || [];
            console.log(`[BROADCAST LOG] Starting broadcast to ${users.length} users. Media count: ${media.length}, text: "${message.substring(0, 50)}${message.length > 50 ? '...' : ''}"`);

            let successCount = 0;
            let errorCount = 0;

            users.forEach(user => {
                if (media.length > 0) {
                    // Prepare media group
                    const mediaGroup = media.map((item, index) => ({
                        type: 'photo',
                        media: item.media,
                        caption: index === 0 ? `üì¢ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò\n\n${message}` : undefined
                    }));

                    bot.sendMediaGroup(user.telegram_id, mediaGroup)
                        .then(() => {
                            successCount++;
                            console.log(`[BROADCAST LOG] Media group sent successfully to ${user.telegram_id}`);
                        })
                        .catch((err) => {
                            errorCount++;
                            console.error(`[BROADCAST LOG] Failed to send media group to ${user.telegram_id}:`, err);
                        });
                } else {
                    // Send text only
                    const broadcastMessage = `üì¢ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò\n\n${message}`;
                    bot.sendMessage(user.telegram_id, broadcastMessage)
                        .then(() => {
                            successCount++;
                            console.log(`[BROADCAST LOG] Text message sent successfully to ${user.telegram_id}`);
                        })
                        .catch((err) => {
                            errorCount++;
                            console.error(`[BROADCAST LOG] Failed to send text to ${user.telegram_id}:`, err);
                        });
                }
            });

            // –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
            setTimeout(() => {
                const mediaInfo = media.length > 0 ? ` + ${media.length} —Ñ–æ—Ç–æ` : '';
                bot.sendMessage(chatId,
                    `üì¢ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! ‚úÖ\n\n` +
                    `üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
                    `‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
                    `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n\n` +
                    `üìù –¢–µ–∫—Å—Ç: "${message.substring(0, 50)}${message.length > 50 ? '...' : ''}"${mediaInfo}\n\n` +
                    'üéØ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', adminKeyboard).catch(console.error);

                delete global.userScreenshots[telegramId];
                console.log(`[BROADCAST LOG] Broadcast completed. Success: ${successCount}, Errors: ${errorCount}`);
            }, 3000); // Slightly longer delay for media sends
        });
    } catch (error) {
        console.error('‚ùå Send broadcast error:', error);
    }
}

function backToAdminMenu(chatId, telegramId) {
    try {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        delete global.adminStates[telegramId];
        delete global.userScreenshots[telegramId];

        bot.sendMessage(chatId,
            'üîô –í–û–ó–í–†–ê–¢ –í –ê–î–ú–ò–ù–ö–£ üë®‚Äçüíº\n\n' +
            'üéØ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', adminKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Back to admin menu error:', error);
    }
}

function showTestSubmissions(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            db.all("SELECT * FROM test_submissions WHERE status = 'pending' ORDER BY submitted_date DESC", 
                   (err, submissions) => {
                
                if (!submissions || submissions.length === 0) {
                    bot.sendMessage(chatId, 
                        'üìã –ó–ê–Ø–í–ö–ò –ù–ê –ü–†–û–í–ï–†–ö–£ üìù\n\n' +
                        '‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n\n' +
                        'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∞–¥–º–∏–Ω!').catch(console.error);
                    return;
                }
                
                submissions.forEach(submission => {
                    bot.sendPhoto(chatId, submission.photo_file_id, {
                        caption: `üìã –ó–ê–Ø–í–ö–ê #${submission.id}\n\n` +
                                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${submission.username}\n` +
                                `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                                `üéØ –ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: ${submission.points_claimed}\n` +
                                `üìÖ –î–∞—Ç–∞: ${new Date(submission.submitted_date).toLocaleString('ru-RU')}\n\n` +
                                'ü§î –¢–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ?',
                        reply_markup: {
                            inline_keyboard: [[
                                { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${submission.id}` },
                                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${submission.id}` }
                            ]]
                        }
                    }).catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Show test submissions error:', error);
    }
}

function showUsersList(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }
            
            db.all("SELECT * FROM users WHERE is_registered = 1 ORDER BY registration_date DESC", 
                   (err, users) => {
                
                if (!users || users.length === 0) {
                    bot.sendMessage(chatId, 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!').catch(console.error);
                    return;
                }
                
                let usersText = 'üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô üìã\n\n';
                
                users.forEach((user, index) => {
                    const roleEmoji = user.role === '—Å—Ç–∞–∂–µ—Ä' ? 'üë∂' : 'üßì';
                    usersText += `${index + 1}. ${roleEmoji} ${user.full_name || user.username}\n`;
                    usersText += `   üí∞ ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                    usersText += `   üìÖ ${new Date(user.registration_date).toLocaleDateString('ru-RU')}\n\n`;
                });
                
                bot.sendMessage(chatId, usersText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show users list error:', error);
    }
}

function showAdminStats(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            // –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db.all(`
                SELECT
                    (SELECT COUNT(*) FROM users WHERE is_registered = 1) as total_users,
                    (SELECT COUNT(*) FROM users WHERE role = '—Å—Ç–∞–∂–µ—Ä' AND is_registered = 1) as interns,
                    (SELECT COUNT(*) FROM users WHERE role = '—Å—Ç–∞—Ä–∏—á–æ–∫' AND is_registered = 1) as seniors,
                    (SELECT SUM(p_coins) FROM users WHERE is_registered = 1) as total_coins,
                    (SELECT COUNT(*) FROM event_slots) as total_events,
                    (SELECT COUNT(*) FROM event_slots WHERE status = 'active') as active_events,
                    (SELECT COUNT(*) FROM event_bookings) as total_bookings,
                    (SELECT COUNT(*) FROM battles) as total_battles,
                    (SELECT COUNT(*) FROM gifts) as total_gifts,
                    (SELECT SUM(amount) FROM gifts) as total_gifted,
                    (SELECT COUNT(*) FROM tasks) as total_tasks,
                    (SELECT COUNT(*) FROM tasks WHERE status = 'completed') as completed_tasks,
                    (SELECT COUNT(*) FROM test_submissions WHERE status = 'pending') as pending_tests
            `, (err, stats) => {
                if (err) {
                    console.error('Stats error:', err);
                    return;
                }

                const statsText =
                    'üìä –ê–î–ú–ò–ù–°–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê üéØ\n\n' +
                    'üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n' +
                    `   –í—Å–µ–≥–æ: ${stats[0].total_users}\n` +
                    `   –°—Ç–∞–∂–µ—Ä—ã: ${stats[0].interns}\n` +
                    `   –°—Ç–∞—Ä–∏—á–∫–∏: ${stats[0].seniors}\n\n` +
                    'üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê:\n' +
                    `   –í—Å–µ–≥–æ –ü-–∫–æ–∏–Ω–æ–≤: ${stats[0].total_coins}\n` +
                    `   –ü–æ–¥–∞—Ä–∫–æ–≤: ${stats[0].total_gifts}\n` +
                    `   –ü–æ–¥–∞—Ä–µ–Ω–æ –∫–æ–∏–Ω–æ–≤: ${stats[0].total_gifted}\n\n` +
                    'üéØ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n' +
                    `   –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${stats[0].total_events}\n` +
                    `   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats[0].active_events}\n` +
                    `   –ó–∞–ø–∏—Å–µ–π: ${stats[0].total_bookings}\n\n` +
                    '‚öîÔ∏è –ê–ö–¢–ò–í–ù–û–°–¢–¨:\n' +
                    `   PVP –±–∏—Ç–≤: ${stats[0].total_battles}\n` +
                    `   –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${stats[0].total_tasks}\n` +
                    `   –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats[0].completed_tasks}\n\n` +
                    'üìã –ó–ê–Ø–í–ö–ò:\n' +
                    `   –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${stats[0].pending_tests} —Ç–µ—Å—Ç–æ–≤\n\n` +
                    'üìà –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!';

                bot.sendMessage(chatId, statsText, adminKeyboard).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show admin stats error:', error);
    }
}

// ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

bot.on('callback_query', (callbackQuery) => {
    try {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const telegramId = callbackQuery.from.id;
        
        if (data === 'confirm_invoice') {
            console.log(`[INVOICE DEBUG] Confirm invoice callback for user ${telegramId}, state: ${JSON.stringify(global.userScreenshots[telegramId])}`);
            const state = global.userScreenshots[telegramId];
            if (!state || state.type !== 'invoice_creation' || state.step !== 'preview') {
                bot.answerCallbackQuery(callbackQuery.id, {text: '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'});
                return;
            }
            const data = state.data;
            db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
                if (err || !user) {
                    bot.answerCallbackQuery(callbackQuery.id, {text: '‚ùå –û—à–∏–±–∫–∞!'});
                    return;
                }
                // Get next invoice_number
                db.get("SELECT COALESCE(MAX(invoice_number), 0) + 1 AS next FROM invoices", (err, row) => {
                    if (err) {
                        bot.answerCallbackQuery(callbackQuery.id, {text: '‚ùå –û—à–∏–±–∫–∞ –ë–î!'});
                        return;
                    }
                    const invoice_number = row.next;
                    const invoice_date = new Date().toLocaleDateString('ru-RU');
                    const fileName = `INV-${invoice_number}_${new Date().toISOString().split('T')[0]}.pdf`;
                    const filePath = `./invoices/${fileName}`;
                    data.creator_id = user.id;
                    data.invoice_number = invoice_number;
                    data.invoice_date = invoice_date;
                    data.file_path = filePath;
                    // Generate PDF
                    generateInvoicePDF(data, filePath);
                    // Insert to DB
                    db.run(`INSERT INTO invoices (creator_id, company_name, org_address, work_type, start_date, end_date, quantity, amount, description, file_path, invoice_number, invoice_date)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [data.creator_id, data.org_name, data.org_address, data.work_type, data.start_date, data.end_date, data.quantity, data.amount, data.description, data.file_path, data.invoice_number, data.invoice_date], (err) => {
                        if (err) {
                            bot.answerCallbackQuery(callbackQuery.id, {text: '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!'});
                            return;
                        }
                        // Send document
                        bot.sendDocument(chatId, filePath, {caption: "‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î."}).catch(console.error);
                        bot.answerCallbackQuery(callbackQuery.id, {text: '‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!'});
                        delete global.userScreenshots[telegramId];
                        // Delete preview message
                        bot.deleteMessage(chatId, messageId).catch(console.error);
                    });
                });
            });
        } else if (data === 'cancel_invoice') {
            if (global.userScreenshots[telegramId] && global.userScreenshots[telegramId].type === 'invoice_creation') {
                delete global.userScreenshots[telegramId];
                bot.answerCallbackQuery(callbackQuery.id, {text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.'});
                bot.editMessageText("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", {chat_id: chatId, message_id: messageId}).catch(console.error);
                backToMainMenu(chatId, telegramId);
            }
        } else if (data.startsWith('approve_')) {
            const submissionId = data.split('_')[1];
            approveSubmission(chatId, messageId, telegramId, submissionId, callbackQuery.id);
        } else if (data.startsWith('reject_')) {
            const submissionId = data.split('_')[1];
            rejectSubmission(chatId, messageId, telegramId, submissionId, callbackQuery.id);
        }
    } catch (error) {
        console.error('‚ùå Callback query error:', error);
    }
});

function approveSubmission(chatId, messageId, adminTelegramId, submissionId, callbackQueryId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [adminTelegramId], (err, admin) => {
            if (!admin) {
                bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!' }).catch(console.error);
                return;
            }
            
            db.get("SELECT * FROM test_submissions WHERE id = ? AND status = 'pending'", 
                   [submissionId], (err, submission) => {
                if (!submission) {
                    bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' }).catch(console.error);
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                db.run("UPDATE test_submissions SET status = 'approved', admin_id = ?, reviewed_date = CURRENT_TIMESTAMP WHERE id = ?", 
                       [admin.user_id, submissionId], () => {
                    
                    // –ù–∞—á–∏—Å–ª—è–µ–º –ü-–∫–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    db.run("UPDATE users SET p_coins = p_coins + ? WHERE telegram_id = ?", 
                           [submission.points_claimed, submission.telegram_id], () => {
                        
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–∂–µ—Ä–∞
                        db.run(`INSERT OR REPLACE INTO intern_progress 
                                (user_id, test_name, completed, points_earned, completed_date) 
                                VALUES (?, ?, 1, ?, CURRENT_TIMESTAMP)`, 
                               [submission.user_id, submission.test_name, submission.points_claimed]);
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        bot.sendMessage(submission.telegram_id, 
                            `üéâ –¢–ï–°–¢ –û–î–û–ë–†–ï–ù! ‚úÖ\n\n` +
                            `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                            `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${submission.points_claimed} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                            'üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™\n' +
                            'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!').catch(console.error);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                        bot.editMessageCaption(
                            `‚úÖ –ó–ê–Ø–í–ö–ê #${submission.id} - –û–î–û–ë–†–ï–ù–ê!\n\n` +
                            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${submission.username}\n` +
                            `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                            `üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${submission.points_claimed} –±–∞–ª–ª–æ–≤\n\n` +
                            'üéâ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', 
                            { 
                                chat_id: chatId, 
                                message_id: messageId, 
                                reply_markup: { inline_keyboard: [] } 
                            }
                        ).catch(console.error);
                        
                        bot.answerCallbackQuery(callbackQueryId, { 
                            text: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ! –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!', 
                            show_alert: false 
                        }).catch(console.error);
                    });
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Approve submission error:', error);
    }
}

function rejectSubmission(chatId, messageId, adminTelegramId, submissionId, callbackQueryId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [adminTelegramId], (err, admin) => {
            if (!admin) {
                bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!' }).catch(console.error);
                return;
            }
            
            db.get("SELECT * FROM test_submissions WHERE id = ? AND status = 'pending'", 
                   [submissionId], (err, submission) => {
                if (!submission) {
                    bot.answerCallbackQuery(callbackQueryId, { text: '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' }).catch(console.error);
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                db.run("UPDATE test_submissions SET status = 'rejected', admin_id = ?, reviewed_date = CURRENT_TIMESTAMP WHERE id = ?", 
                       [admin.user_id, submissionId], () => {
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.sendMessage(submission.telegram_id, 
                        `‚ùå –¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω üòî\n\n` +
                        `üìö –¢–µ—Å—Ç: ${submission.test_name}\n\n` +
                        'ü§î –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                        '‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ—á–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç üì∏\n' +
                        '‚Ä¢ –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –±–∞–ª–ª—ã üéØ\n' +
                        '‚Ä¢ –¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚è≥\n' +
                        '‚Ä¢ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ üö´\n\n' +
                        'üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n' +
                        'üéØ –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏!').catch(console.error);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    bot.editMessageCaption(
                        `‚ùå –ó–ê–Ø–í–ö–ê #${submission.id} - –û–¢–ö–õ–û–ù–ï–ù–ê!\n\n` +
                        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${submission.username}\n` +
                        `üìö –¢–µ—Å—Ç: ${submission.test_name}\n` +
                        `üéØ –ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: ${submission.points_claimed}\n\n` +
                        'üö´ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', 
                        { 
                            chat_id: chatId, 
                            message_id: messageId, 
                            reply_markup: { inline_keyboard: [] } 
                        }
                    ).catch(console.error);
                    
                    bot.answerCallbackQuery(callbackQueryId, { 
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ!', 
                        show_alert: false 
                    }).catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Reject submission error:', error);
    }
}

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò –ó–ê–ü–£–°–ö ==========

console.log('üöÄ –ë–æ—Ç "–ñ–∏–∑–Ω—å –≤ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏–Ω–æ" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
console.log('üéØ –í–µ—Ä—Å–∏—è: –ö–Ω–æ–ø–æ—á–Ω–∞—è 2.0');
console.log('üìã Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

bot.on('error', (error) => {
    console.error('‚ùå Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ polling
    setTimeout(() => {
        console.log('üîÑ Attempting to restart polling...');
        bot.stopPolling();
        setTimeout(() => {
            bot.startPolling();
        }, 2000);
    }, 3000);
});

// ========== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –¢–ê–°–ö-–¢–†–ï–ö–ï–†–ê ==========

function handleTaskCreation(chatId, telegramId, text) {
    // [DEBUG LOG] Task creation entry
    const taskState = global.userScreenshots[telegramId];
    console.log(`[TASK DEBUG] User ${telegramId} text "${text}" | Step: ${taskState ? taskState.step : 'none'}`);
    
    try {
        const taskData = global.userScreenshots[telegramId];

        if (taskData.step === 'select_assignee') {
            const userIndex = parseInt(text) - 1;

            if (isNaN(userIndex) || userIndex < 0 || userIndex >= taskData.users.length) {
                // [DEBUG LOG] Invalid assignee in task creation
                console.log(`[TASK DEBUG] Invalid assignee index "${text}" for user ${telegramId}, users length: ${taskData.users.length}`);
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üî¢').catch(console.error);
                return;
            }

            taskData.taskData.assignee_id = taskData.users[userIndex].id;
            taskData.taskData.assignee_name = taskData.users[userIndex].full_name || taskData.users[userIndex].username;
            taskData.step = 'enter_title';

            bot.sendMessage(chatId,
                `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${taskData.taskData.assignee_name}\n\n` +
                'üìù –ù–∞–ø–∏—à–∏ –ù–ê–ó–í–ê–ù–ò–ï –∑–∞–¥–∞—á–∏:\n' +
                'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"').catch(console.error);

        } else if (taskData.step === 'enter_title') {
            taskData.taskData.title = text;
            taskData.step = 'enter_description';

            bot.sendMessage(chatId,
                `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: "${text}"\n\n` +
                'üìã –ù–∞–ø–∏—à–∏ –û–ü–ò–°–ê–ù–ò–ï –∑–∞–¥–∞—á–∏:\n' +
                'üí° –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å\n' +
                '‚ö° –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"').catch(console.error);

        } else if (taskData.step === 'enter_description') {
            taskData.taskData.description = text === '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' ? null : text;
            taskData.step = 'select_priority';

            bot.sendMessage(chatId,
                `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${taskData.taskData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
                'üéØ –í—ã–±–µ—Ä–∏ –ü–†–ò–û–†–ò–¢–ï–¢ –∑–∞–¥–∞—á–∏:', taskPriorityKeyboard).catch(console.error);

        } else if (taskData.step === 'select_reward') {
            taskData.step = 'enter_due_date';

            bot.sendMessage(chatId,
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${taskData.taskData.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                'üìÖ –£–∫–∞–∂–∏ –°–†–û–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n' +
                'üí° –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)\n' +
                '‚ö° –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–±–µ–∑ —Å—Ä–æ–∫–∞"').catch(console.error);

        } else if (taskData.step === 'enter_due_date') {
            let dueDate = null;
            if (text !== '–±–µ–∑ —Å—Ä–æ–∫–∞') {
                const dateMatch = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
                if (!dateMatch) {
                    bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ "–±–µ–∑ —Å—Ä–æ–∫–∞"').catch(console.error);
                    return;
                }
                dueDate = `${dateMatch[3]}-${dateMatch[2]}-${dateMatch[1]}`;
            }

            taskData.taskData.due_date = dueDate;

            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.run(`INSERT INTO tasks (creator_id, assignee_id, title, description, priority, reward_coins, due_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?)`,
                   [taskData.taskData.creator_id, taskData.taskData.assignee_id, taskData.taskData.title,
                    taskData.taskData.description, taskData.taskData.priority, taskData.taskData.reward_coins, dueDate], () => {

                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                bot.sendMessage(chatId,
                    '‚úÖ –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê! üéâ\n\n' +
                    `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${taskData.taskData.assignee_name}\n` +
                    `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${taskData.taskData.title}\n` +
                    `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${taskData.taskData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
                    `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${taskData.taskData.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : taskData.taskData.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}\n` +
                    `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${taskData.taskData.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` +
                    `üìÖ –°—Ä–æ–∫: ${text === '–±–µ–∑ —Å—Ä–æ–∫–∞' ? '–ë–µ–∑ —Å—Ä–æ–∫–∞' : text}\n\n` +
                    'üöÄ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!', mainMenuKeyboard).catch(console.error);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                db.get("SELECT telegram_id FROM users WHERE id = ?", [taskData.taskData.assignee_id], (err, assignee) => {
                    if (assignee) {
                        bot.sendMessage(assignee.telegram_id,
                            'üéØ –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê! üìù\n\n' +
                            `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${taskData.taskData.title}\n` +
                            `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${taskData.taskData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
                            `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${taskData.taskData.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : taskData.taskData.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}\n` +
                            (taskData.taskData.reward_coins > 0 ? `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${taskData.taskData.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n` : '') +
                            `üìÖ –°—Ä–æ–∫: ${text === '–±–µ–∑ —Å—Ä–æ–∫–∞' ? '–ë–µ–∑ —Å—Ä–æ–∫–∞' : text}\n\n` +
                            'üìã –ü—Ä–æ–≤–µ—Ä—å "–ú–æ–∏ –∑–∞–¥–∞—á–∏" –≤ –º–µ–Ω—é!').catch(console.error);
                    }
                });

                delete global.userScreenshots[telegramId];
            });
        }
    } catch (error) {
        console.error('‚ùå Handle task creation error:', error);
    }
}

function setTaskPriority(chatId, telegramId, priority) {
    try {
        if (!global.userScreenshots[telegramId] || global.userScreenshots[telegramId].type !== 'task_creation') {
            return;
        }

        const taskData = global.userScreenshots[telegramId];

        switch (priority) {
            case 'üî¥ –í—ã—Å–æ–∫–∏–π':
                taskData.taskData.priority = 'high';
                break;
            case 'üü° –°—Ä–µ–¥–Ω–∏–π':
                taskData.taskData.priority = 'medium';
                break;
            case 'üü¢ –ù–∏–∑–∫–∏–π':
                taskData.taskData.priority = 'low';
                break;
        }

        taskData.step = 'select_reward';

        bot.sendMessage(chatId,
            `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}\n\n` +
            'üí∞ –í—ã–±–µ—Ä–∏ –ù–ê–ì–†–ê–î–£ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:', taskRewardKeyboard).catch(console.error);
    } catch (error) {
        console.error('‚ùå Set task priority error:', error);
    }
}

function setTaskReward(chatId, telegramId, reward) {
    try {
        if (!global.userScreenshots[telegramId] || global.userScreenshots[telegramId].type !== 'task_creation') {
            return;
        }

        const taskData = global.userScreenshots[telegramId];
        taskData.taskData.reward_coins = parseInt(reward.split(' ')[0]);
        taskData.step = 'enter_due_date';

        bot.sendMessage(chatId,
            `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${reward}\n\n` +
            'üìÖ –£–∫–∞–∂–∏ –°–†–û–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n' +
            'üí° –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)\n' +
            '‚ö° –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–±–µ–∑ —Å—Ä–æ–∫–∞"').catch(console.error);
    } catch (error) {
        console.error('‚ùå Set task reward error:', error);
    }
}

// ========== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¢–ê–°–ö-–¢–†–ï–ö–ï–†–ê ==========

function showPostponedTasks(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            db.all(`SELECT t.*,
                    u_creator.full_name as creator_name, u_creator.username as creator_username
                    FROM tasks t
                    LEFT JOIN users u_creator ON t.creator_id = u_creator.id
                    WHERE t.assignee_id = ? AND t.status = 'postponed'
                    ORDER BY t.postponed_until ASC`, [user.id], (err, tasks) => {

                if (!tasks || tasks.length === 0) {
                    bot.sendMessage(chatId,
                        'üì¶ –û–¢–õ–û–ñ–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò üìã\n\n' +
                        '‚úÖ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!\n\n' +
                        'üöÄ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ!').catch(console.error);
                    return;
                }

                let tasksText = 'üì¶ –û–¢–õ–û–ñ–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò üìã\n\n';

                tasks.forEach((task, index) => {
                    const priority = task.priority === 'high' ? 'üî¥' : task.priority === 'medium' ? 'üü°' : 'üü¢';
                    const creatorName = task.creator_name || task.creator_username || '–°–∏—Å—Ç–µ–º–∞';
                    const postponedUntil = task.postponed_until ? new Date(task.postponed_until).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω';

                    tasksText += `${index + 1}. ${priority} ${task.title}\n`;
                    tasksText += `   üìù ${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
                    tasksText += `   üë§ –û—Ç: ${creatorName}\n`;
                    tasksText += `   üìÖ –û—Ç–ª–æ–∂–µ–Ω–æ –¥–æ: ${postponedUntil}\n`;
                    if (task.reward_coins > 0) {
                        tasksText += `   üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                    }
                    tasksText += '\n';
                });

                bot.sendMessage(chatId, tasksText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show postponed tasks error:', error);
    }
}

function showCancelledTasks(chatId, telegramId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) return;

            db.all(`SELECT t.*,
                    u_creator.full_name as creator_name, u_creator.username as creator_username
                    FROM tasks t
                    LEFT JOIN users u_creator ON t.creator_id = u_creator.id
                    WHERE (t.assignee_id = ? OR t.creator_id = ?) AND t.status = 'cancelled'
                    ORDER BY t.last_action_date DESC
                    LIMIT 10`, [user.id, user.id], (err, tasks) => {

                if (!tasks || tasks.length === 0) {
                    bot.sendMessage(chatId,
                        '‚ùå –û–¢–ú–ï–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò üìã\n\n' +
                        '‚úÖ –ù–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!\n\n' +
                        'üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!').catch(console.error);
                    return;
                }

                let tasksText = '‚ùå –û–¢–ú–ï–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò üìã\n\n';

                tasks.forEach((task, index) => {
                    const priority = task.priority === 'high' ? 'üî¥' : task.priority === 'medium' ? 'üü°' : 'üü¢';
                    const creatorName = task.creator_name || task.creator_username || '–°–∏—Å—Ç–µ–º–∞';
                    const cancelDate = new Date(task.last_action_date).toLocaleDateString('ru-RU');

                    tasksText += `${index + 1}. ${priority} ${task.title}\n`;
                    tasksText += `   üìù ${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
                    tasksText += `   üë§ –û—Ç: ${creatorName}\n`;
                    tasksText += `   üìÖ –û—Ç–º–µ–Ω–µ–Ω–æ: ${cancelDate}\n`;
                    if (task.cancelled_reason) {
                        tasksText += `   üí¨ –ü—Ä–∏—á–∏–Ω–∞: ${task.cancelled_reason}\n`;
                    }
                    tasksText += '\n';
                });

                bot.sendMessage(chatId, tasksText).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show cancelled tasks error:', error);
    }
}

function acceptTask(chatId, telegramId) {
    bot.sendMessage(chatId,
        '‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!\n\n' +
        'üéØ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"\n' +
        'üí™ –£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏!', mainMenuKeyboard).catch(console.error);
}

function startTaskComment(chatId, telegramId) {
    global.userScreenshots[telegramId] = {
        type: 'task_comment',
        step: 'enter_comment'
    };

    bot.sendMessage(chatId,
        'üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö –ó–ê–î–ê–ß–ï\n\n' +
        'üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ:\n' +
        'üí° –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å').catch(console.error);
}

function postponeTask(chatId, telegramId) {
    global.userScreenshots[telegramId] = {
        type: 'task_postpone',
        step: 'enter_date'
    };

    bot.sendMessage(chatId,
        'üì¶ –û–¢–õ–û–ñ–ò–¢–¨ –ó–ê–î–ê–ß–£\n\n' +
        'üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –æ—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É?\n' +
        'üí° –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)\n' +
        '‚ö° –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–Ω–∞ –Ω–µ–¥–µ–ª—é" / "–Ω–∞ –º–µ—Å—è—Ü"').catch(console.error);
}

function cancelTask(chatId, telegramId) {
    global.userScreenshots[telegramId] = {
        type: 'task_cancel',
        step: 'enter_reason'
    };

    bot.sendMessage(chatId,
        '‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–î–ê–ß–£\n\n' +
        'üìù –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:\n' +
        'üí° –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∑–∞–¥–∞—á—É –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å').catch(console.error);
}

function redirectTask(chatId, telegramId) {
    bot.sendMessage(chatId,
        'üîÑ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n\n' +
        'üìã –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º', mainMenuKeyboard).catch(console.error);
}

function keepTaskAsIs(chatId, telegramId) {
    bot.sendMessage(chatId,
        'üì¶ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n' +
        '‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏', mainMenuKeyboard).catch(console.error);
}

// ========== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–ú ==========

function showBalanceManagement(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!').catch(console.error);
                return;
            }

            const balanceKeyboard = {
                reply_markup: {
                    keyboard: [
                        ['‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã', '‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã'],
                        ['üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üìä –ë–∞–ª–∞–Ω—Å—ã'],
                        ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É']
                    ],
                    resize_keyboard: true
                }
            };

            bot.sendMessage(chatId,
                'üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–ú üí≥\n\n' +
                '‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n' +
                '‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n' +
                'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
                'üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤\n\n' +
                'üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', balanceKeyboard).catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Show balance management error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–Ø –ü–û–•–í–ê–°–¢–ê–¢–¨–°–Ø ==========

function startAchievementCreation(chatId, telegramId) {
    global.userScreenshots[telegramId] = {
        type: 'achievement_creation',
        step: 'enter_title'
    };

    bot.sendMessage(chatId,
        'üéâ –ü–û–•–í–ê–°–¢–ê–¢–¨–°–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ï–ú! üèÜ\n\n' +
        'üìù –ù–∞–ø–∏—à–∏ –ù–ê–ó–í–ê–ù–ò–ï —Å–≤–æ–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n' +
        'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–ó–∞–∫—Ä—ã–ª –∫—Ä—É–ø–Ω—É—é —Å–¥–µ–ª–∫—É", "–í—ã—É—á–∏–ª –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫"\n' +
        '‚ö° –ò–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ–π —É—Å–ø–µ—Ö –∫—Ä–∞—Ç–∫–æ').catch(console.error);
}

function handleAchievementCreation(chatId, telegramId, text) {
    try {
        const achievementData = global.userScreenshots[telegramId];

        if (achievementData.step === 'enter_title') {
            achievementData.title = text;
            achievementData.step = 'enter_description';

            bot.sendMessage(chatId,
                `üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: "${text}"\n\n` +
                'üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –û–ü–ò–°–ê–ù–ò–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n' +
                'üí° –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–µ–º —É—Å–ø–µ—Ö–µ\n' +
                '‚ö° –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"').catch(console.error);

        } else if (achievementData.step === 'enter_description') {
            achievementData.description = text === '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' ? null : text;
            achievementData.step = 'add_photo';

            bot.sendMessage(chatId,
                `üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: "${achievementData.title}"\n` +
                `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${achievementData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
                'üì∏ –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é?\n' +
                'üí° –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–±–µ–∑ —Ñ–æ—Ç–æ"', {
                    reply_markup: {
                        keyboard: [
                            ['üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', 'üìã –ë–µ–∑ —Ñ–æ—Ç–æ'],
                            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                        ],
                        resize_keyboard: true
                    }
                }).catch(console.error);

        } else if (achievementData.step === 'add_photo') {
            if (text === 'üìã –ë–µ–∑ —Ñ–æ—Ç–æ' || text === '–±–µ–∑ —Ñ–æ—Ç–æ') {
                // –ü—É–±–ª–∏–∫—É–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
                achievementData.photoFileId = null;
                achievementData.step = 'confirm_achievement';

                bot.sendMessage(chatId,
                    'üìã –ì–æ—Ç–æ–≤–æ –±–µ–∑ —Ñ–æ—Ç–æ! ‚úÖ\n\n' +
                    `üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: ${achievementData.title}\n` +
                    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${achievementData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
                    '‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ?\n' +
                    'üì¢ –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', {
                        reply_markup: {
                            keyboard: [
                                ['‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'],
                                ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    }).catch(console.error);
            } else if (text === 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ') {
                bot.sendMessage(chatId,
                    'üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üì∑\n\n' +
                    'üí° –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —á–∞—Ç').catch(console.error);
            }
        }
    } catch (error) {
        console.error('‚ùå Handle achievement creation error:', error);
    }
}

function publishAchievement(chatId, telegramId) {
    try {
        const achievementData = global.userScreenshots[telegramId];

        if (!achievementData || achievementData.type !== 'achievement_creation') {
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.').catch(console.error);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –±–∞–∑–µ
            db.run(`INSERT INTO achievements (user_id, title, description, photo_file_id)
                    VALUES (?, ?, ?, ?)`,
                   [user.id, achievementData.title, achievementData.description, achievementData.photoFileId],
                   function(err) {

                if (err) {
                    console.error('‚ùå Achievement save error:', err);
                    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!').catch(console.error);
                    return;
                }

                const achievementId = this.lastID;

                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                bot.sendMessage(chatId,
                    'üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! üèÜ\n\n' +
                    'üì¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n' +
                    'üëç –ñ–¥–µ–º –ª–∞–π–∫–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!', mainMenuKeyboard).catch(console.error);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                broadcastAchievement(achievementId, user, achievementData);

                delete global.userScreenshots[telegramId];
            });
        });
    } catch (error) {
        console.error('‚ùå Publish achievement error:', error);
    }
}

function broadcastAchievement(achievementId, author, achievementData) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.all("SELECT telegram_id, full_name, username FROM users WHERE is_registered = 1 AND telegram_id != ?",
               [author.telegram_id], (err, users) => {

            if (err || !users) {
                console.error('‚ùå Get users for broadcast error:', err);
                return;
            }

            const authorName = author.full_name || author.username || '–ö–æ–ª–ª–µ–≥–∞';
            const achievementText = `üéâ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –ö–û–õ–õ–ï–ì–ò! üèÜ\n\n` +
                                  `üë§ ${authorName}\n` +
                                  `üèÜ ${achievementData.title}\n` +
                                  (achievementData.description ? `üìù ${achievementData.description}\n\n` : '\n') +
                                  `üëç –ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫: /like_${achievementId}\n` +
                                  `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: /comment_${achievementId}\n\n` +
                                  'üî• –ü–æ–∑–¥—Ä–∞–≤–∏–º –∫–æ–ª–ª–µ–≥—É —Å —É—Å–ø–µ—Ö–æ–º!';

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users.forEach(user => {
                if (achievementData.photoFileId) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                    bot.sendPhoto(user.telegram_id, achievementData.photoFileId, {
                        caption: achievementText
                    }).catch(console.error);
                } else {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    bot.sendMessage(user.telegram_id, achievementText).catch(console.error);
                }
            });

            console.log(`üì¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
        });
    } catch (error) {
        console.error('‚ùå Broadcast achievement error:', error);
    }
}

function showAchievementsAdmin(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!').catch(console.error);
                return;
            }

            db.all(`SELECT a.*, u.full_name, u.username,
                    (SELECT COUNT(*) FROM achievement_likes al WHERE al.achievement_id = a.id) as likes_count,
                    (SELECT COUNT(*) FROM achievement_comments ac WHERE ac.achievement_id = a.id) as comments_count
                    FROM achievements a
                    LEFT JOIN users u ON a.user_id = u.id
                    ORDER BY a.created_date DESC
                    LIMIT 10`, (err, achievements) => {

                if (!achievements || achievements.length === 0) {
                    bot.sendMessage(chatId,
                        'üéâ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –°–û–¢–†–£–î–ù–ò–ö–û–í üèÜ\n\n' +
                        'üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n' +
                        'üéØ –ñ–¥–µ–º –ø–µ—Ä–≤—ã—Ö —É—Å–ø–µ—Ö–æ–≤ –∫–æ–º–∞–Ω–¥—ã!').catch(console.error);
                    return;
                }

                let achievementsText = 'üéâ –ü–û–°–õ–ï–î–ù–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø üèÜ\n\n';

                achievements.forEach((achievement, index) => {
                    const userName = achievement.full_name || achievement.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    const date = new Date(achievement.created_date).toLocaleDateString('ru-RU');

                    achievementsText += `${index + 1}. ${achievement.title}\n`;
                    achievementsText += `   üë§ ${userName}\n`;
                    achievementsText += `   üìÖ ${date}\n`;
                    achievementsText += `   üëç ${achievement.likes_count} –ª–∞–π–∫–æ–≤\n`;
                    achievementsText += `   üí¨ ${achievement.comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n\n`;
                });

                bot.sendMessage(chatId, achievementsText, adminKeyboard).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show achievements admin error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –õ–ê–ô–ö–û–í –ò –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ==========

function handleLikeAchievement(chatId, telegramId, achievementId) {
    try {
        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!').catch(console.error);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.get("SELECT id FROM achievement_likes WHERE achievement_id = ? AND user_id = ?",
                   [achievementId, user.id], (err, existingLike) => {

                if (existingLike) {
                    bot.sendMessage(chatId, 'üëç –¢—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ —ç—Ç–æ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é!').catch(console.error);
                    return;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
                db.run("INSERT INTO achievement_likes (achievement_id, user_id) VALUES (?, ?)",
                       [achievementId, user.id], (err) => {

                    if (err) {
                        console.error('‚ùå Like achievement error:', err);
                        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞!').catch(console.error);
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    db.get(`SELECT a.*, u.full_name, u.username, u.telegram_id as author_telegram_id
                            FROM achievements a
                            LEFT JOIN users u ON a.user_id = u.id
                            WHERE a.id = ?`, [achievementId], (err, achievement) => {

                        if (achievement && achievement.author_telegram_id !== telegramId) {
                            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                            const likerName = user.full_name || user.username || '–ö–æ–ª–ª–µ–≥–∞';
                            bot.sendMessage(achievement.author_telegram_id,
                                `üëç –ù–æ–≤—ã–π –ª–∞–π–∫! üéâ\n\n` +
                                `üë§ ${likerName} –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ —Ç–≤–æ–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é:\n` +
                                `üèÜ "${achievement.title}"\n\n` +
                                'üî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!').catch(console.error);
                        }
                    });

                    bot.sendMessage(chatId, 'üëç –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω! üéâ').catch(console.error);
                });
            });
        });
    } catch (error) {
        console.error('‚ùå Handle like achievement error:', error);
    }
}

function startCommentAchievement(chatId, telegramId, achievementId) {
    try {
        db.get("SELECT * FROM achievements WHERE id = ?", [achievementId], (err, achievement) => {
            if (!achievement) {
                bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!').catch(console.error);
                return;
            }

            global.userScreenshots[telegramId] = {
                type: 'achievement_comment',
                achievementId: achievementId,
                step: 'enter_comment'
            };

            bot.sendMessage(chatId,
                `üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö –î–û–°–¢–ò–ñ–ï–ù–ò–Æ\n\n` +
                `üèÜ "${achievement.title}"\n\n` +
                'üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:').catch(console.error);
        });
    } catch (error) {
        console.error('‚ùå Start comment achievement error:', error);
    }
}

function handleAchievementComment(chatId, telegramId, text) {
    try {
        const commentData = global.userScreenshots[telegramId];

        db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!').catch(console.error);
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            db.run("INSERT INTO achievement_comments (achievement_id, user_id, comment) VALUES (?, ?, ?)",
                   [commentData.achievementId, user.id, text], (err) => {

                if (err) {
                    console.error('‚ùå Comment achievement error:', err);
                    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è!').catch(console.error);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                db.get(`SELECT a.*, u.full_name, u.username, u.telegram_id as author_telegram_id
                        FROM achievements a
                        LEFT JOIN users u ON a.user_id = u.id
                        WHERE a.id = ?`, [commentData.achievementId], (err, achievement) => {

                    if (achievement && achievement.author_telegram_id !== telegramId) {
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        const commenterName = user.full_name || user.username || '–ö–æ–ª–ª–µ–≥–∞';
                        bot.sendMessage(achievement.author_telegram_id,
                            `üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üìù\n\n` +
                            `üë§ ${commenterName} –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª —Ç–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n` +
                            `üèÜ "${achievement.title}"\n\n` +
                            `üí¨ "${text}"\n\n` +
                            'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!').catch(console.error);
                    }
                });

                bot.sendMessage(chatId, 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω! üéâ', mainMenuKeyboard).catch(console.error);
                delete global.userScreenshots[telegramId];
            });
        });
    } catch (error) {
        console.error('‚ùå Handle achievement comment error:', error);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–ú ==========

function showBalances(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            db.all("SELECT username, full_name, p_coins FROM users WHERE is_registered = 1 ORDER BY p_coins DESC",
                   (err, users) => {

                if (!users || users.length === 0) {
                    bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!').catch(console.error);
                    return;
                }

                let balancesText = 'üìä –ë–ê–õ–ê–ù–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô üí∞\n\n';
                const medals = ['ü•á', 'ü•à', 'ü•â'];

                users.forEach((user, index) => {
                    const name = user.full_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    const medal = index < 3 ? medals[index] : `${index + 1}.`;
                    balancesText += `${medal} ${name} - ${user.p_coins} –ü-–∫–æ–∏–Ω–æ–≤\n`;
                });

                balancesText += '\nüí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ª–∏—á–Ω—ã–π!';

                bot.sendMessage(chatId, balancesText, balanceKeyboard).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Show balances error:', error);
    }
}

function startAddCoins(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            db.all("SELECT id, username, full_name, telegram_id FROM users WHERE is_registered = 1 ORDER BY full_name", (err, users) => {
                if (!users || users.length === 0) {
                    bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è!').catch(console.error);
                    return;
                }

                global.userScreenshots[telegramId] = {
                    type: 'balance_add',
                    step: 'select_user',
                    users: users,
                    failed_attempts: 0
                };

                let usersList = '‚ûï –ù–ê–ß–ò–°–õ–ò–¢–¨ –ë–ê–õ–õ–´ üí∞\n\n';
                usersList += '–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n';

                users.forEach((user, index) => {
                    const name = user.full_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    usersList += `${index + 1}. ${name} (@${user.username})\n`;
                });

                usersList += '\nüî¢ –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';

                bot.sendMessage(chatId, usersList).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Start add coins error:', error);
    }
}

function startDeductCoins(chatId, telegramId) {
    try {
        db.get("SELECT * FROM admins WHERE telegram_id = ?", [telegramId], (err, admin) => {
            if (!admin) {
                bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!').catch(console.error);
                return;
            }

            db.all("SELECT id, username, full_name, telegram_id FROM users WHERE is_registered = 1 ORDER BY full_name", (err, users) => {
                if (!users || users.length === 0) {
                    bot.sendMessage(chatId, 'üëª –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è!').catch(console.error);
                    return;
                }

                global.userScreenshots[telegramId] = {
                    type: 'balance_deduct',
                    step: 'select_user',
                    users: users,
                    failed_attempts: 0
                };

                let usersList = '‚ûñ –°–ü–ò–°–ê–¢–¨ –ë–ê–õ–õ–´ üí∏\n\n';
                usersList += '–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n';

                users.forEach((user, index) => {
                    const name = user.full_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    usersList += `${index + 1}. ${name} (@${user.username})\n`;
                });

                usersList += '\nüî¢ –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';

                bot.sendMessage(chatId, usersList).catch(console.error);
            });
        });
    } catch (error) {
        console.error('‚ùå Start deduct coins error:', error);
    }
}

function handleBalanceAdd(chatId, telegramId, text) {
    // [DEBUG LOG] Balance add entry
    const addState = global.userScreenshots[telegramId];
    console.log(`[BALANCE ADD DEBUG] User ${telegramId} text "${text}" | Step: ${addState ? addState.step : 'none'}`);
    
    try {
        const addData = global.userScreenshots[telegramId];

        if (addData.step === 'select_user') {
            const userIndex = parseInt(text) - 1;

            if (isNaN(userIndex) || userIndex < 0 || userIndex >= addData.users.length) {
                // [DEBUG LOG] Invalid user in balance add
                console.log(`[BALANCE ADD DEBUG] Invalid user index "${text}" for user ${telegramId}, users length: ${addData.users.length}`);
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üî¢').catch(console.error);
                return;
            }

            addData.selectedUser = addData.users[userIndex];
            addData.step = 'enter_amount';

            bot.sendMessage(chatId,
                `‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${addData.selectedUser.full_name || addData.selectedUser.username}\n\n` +
                'üí∞ –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–∏—Ç—å?\n' +
                'üî¢ –ù–∞–ø–∏—à–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:').catch(console.error);

        } else if (addData.step === 'enter_amount') {
            const amount = parseInt(text);

            if (isNaN(amount) || amount <= 0) {
                bot.sendMessage(chatId, '‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! üí∞').catch(console.error);
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∞
            db.get("SELECT full_name, username FROM users WHERE telegram_id = ?", [telegramId], (err, adminUser) => {
                const adminName = adminUser ? (adminUser.full_name || adminUser.username || '–ê–¥–º–∏–Ω') : '–ê–¥–º–∏–Ω';

                // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
                db.run("UPDATE users SET p_coins = p_coins + ? WHERE id = ?", [amount, addData.selectedUser.id], () => {
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.sendMessage(addData.selectedUser.telegram_id,
                        `üí∞ ${adminName} –ù–ê–ß–ò–°–õ–ò–õ –ë–ê–õ–õ–´! üéâ\n\n` +
                        `‚ûï +${amount} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                        'üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!').catch(console.error);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    bot.sendMessage(chatId,
                        `‚úÖ –ë–ê–õ–õ–´ –ù–ê–ß–ò–°–õ–ï–ù–´! üí∞\n\n` +
                        `üë§ ${addData.selectedUser.full_name || addData.selectedUser.username}\n` +
                        `‚ûï +${amount} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                        'üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', balanceKeyboard).catch(console.error);

                    delete global.userScreenshots[telegramId];
                });
            });
        }
    } catch (error) {
        console.error('‚ùå Handle balance add error:', error);
    }
}

function handleBalanceDeduct(chatId, telegramId, text) {
    try {
        const deductData = global.userScreenshots[telegramId];

        if (deductData.step === 'select_user') {
            const userIndex = parseInt(text) - 1;

            if (isNaN(userIndex) || userIndex < 0 || userIndex >= deductData.users.length) {
                deductData.failed_attempts = (deductData.failed_attempts || 0) + 1;
                console.log(`[BALANCE DEDUCT DEBUG] Failed attempt ${deductData.failed_attempts} for user ${telegramId}, text: "${text}"`);
                if (deductData.failed_attempts >= 3) {
                    bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.').catch(console.error);
                    delete global.userScreenshots[telegramId];
                    backToMainMenu(chatId, telegramId);
                    return;
                }
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üî¢').catch(console.error);
                return;
            }

            deductData.selectedUser = deductData.users[userIndex];
            deductData.step = 'enter_amount';

            bot.sendMessage(chatId,
                `‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${deductData.selectedUser.full_name || deductData.selectedUser.username}\n\n` +
                'üí∏ –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Å–ø–∏—Å–∞—Ç—å?\n' +
                'üî¢ –ù–∞–ø–∏—à–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:').catch(console.error);

        } else if (deductData.step === 'enter_amount') {
            const amount = parseInt(text);

            if (isNaN(amount) || amount <= 0) {
                bot.sendMessage(chatId, '‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! üí∏').catch(console.error);
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∞
            db.get("SELECT full_name, username FROM users WHERE telegram_id = ?", [telegramId], (err, adminUser) => {
                const adminName = adminUser ? (adminUser.full_name || adminUser.username || '–ê–¥–º–∏–Ω') : '–ê–¥–º–∏–Ω';

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.get("SELECT p_coins FROM users WHERE id = ?", [deductData.selectedUser.id], (err, userData) => {
                    if (!userData || userData.p_coins < amount) {
                        bot.sendMessage(chatId, '‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤! üòî').catch(console.error);
                        return;
                    }

                    // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã
                    db.run("UPDATE users SET p_coins = p_coins - ? WHERE id = ?", [amount, deductData.selectedUser.id], () => {
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        bot.sendMessage(deductData.selectedUser.telegram_id,
                            `üí∏ ${adminName} –°–ü–ò–°–ê–õ –ë–ê–õ–õ–´ üòî\n\n` +
                            `‚ûñ -${amount} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                            'üí™ –°—Ç–∞—Ä–∞–π—Å—è –ª—É—á—à–µ!').catch(console.error);

                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                        bot.sendMessage(chatId,
                            `‚úÖ –ë–ê–õ–õ–´ –°–ü–ò–°–ê–ù–´! üí∏\n\n` +
                            `üë§ ${deductData.selectedUser.full_name || deductData.selectedUser.username}\n` +
                            `‚ûñ -${amount} –ü-–∫–æ–∏–Ω–æ–≤\n\n` +
                            'üéØ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', balanceKeyboard).catch(console.error);

                        delete global.userScreenshots[telegramId];
                    });
                });
            });
        }
    } catch (error) {
        console.error('‚ùå Handle balance deduct error:', error);
    }
}

process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç...');
    console.log('üíæ –ó–∞–∫—Ä—ã–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    db.close((err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err.message);
        } else {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
        }
        console.log('üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ –≤—Å—Ç—Ä–µ—á–∏!');
        process.exit(0);
    });
});

// PDF Generation Function
function generateInvoicePDF(data, filePath) {
    // Simple transliteration function for Cyrillic to Latin
    function transliterate(text) {
        if (!text) return '';
        const map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '',
            '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
            '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
            '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
            '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch', '–™': '',
            '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
        };
        return text.replace(/[–∞-—è—ë–ê-–Ø–Å]/g, char => map[char] || char);
    }

    const transOrgName = transliterate(data.org_name || 'Company Name');
    const transOrgAddress = transliterate(data.org_address || 'Address Line 1\nAddress Line 2');
    const transDescription = transliterate(data.work_type || 'Advertising services on Partnerkin.com');

    const doc = new PDFDocument({ size: 'A4', margin: 36 }); // 0.5in margins
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    const pageWidth = 595; // A4 width in points
    const pageHeight = 842; // A4 height
    const margin = 36;
    const contentWidth = pageWidth - 2 * margin;
    const tableWidth = contentWidth * 0.8; // 80% width
    const tableX = margin + (contentWidth - tableWidth) / 2; // Centered

    // 1. Header Section (~100pt from top margin, so y=36+100=136pt)
    const headerY = margin + 100;
    const detailsY = headerY + 20;

    // Left: Dynamic payer organization details
    doc.font('Helvetica-Bold').fontSize(12).text(transliterate(data.org_name || 'Company'), margin + 20, headerY, { lineGap: 4 });
    doc.font('Helvetica').fontSize(10).text(transliterate(data.org_address || 'Address'), margin + 20, headerY + 20, { lineGap: 3 });

    // Right: Invoice details (x ‚âà pageWidth - 100pt = 595-100=495pt, but with margin: margin + contentWidth - 100 ‚âà 36 + 523 - 100 = 459pt)
    const rightX = pageWidth - margin - 100;
    const invoiceDate = data.invoice_date || new Date().toLocaleDateString('ru-RU');
    const invoiceNumber = `INV-${data.invoice_number || '001'}`;
    const subject = 'advertising on Partnerkin.com';
    doc.font('Helvetica').fontSize(10).text(`Invoice Date: ${invoiceDate} | Invoice Number: ${invoiceNumber} | Subject: ${subject}`, rightX, detailsY, { align: 'right', lineGap: 0 });

    // 2. Invoice Table (~200-300pt below header: headerY=136 + 250 ‚âà 386pt, but specs y=300 absolute? Use y=300 for table start)
    const tableY = 236; // Retained positioning to avoid overlaps with headers
    const rowHeight = 30; // With 10pt padding top/bottom
    const colWidth = tableWidth / 3; // Equal widths for balanced 3-column layout: Description, Quantity, Amount

    // Headers - vertically centered in cell (cell top at tableY + 10, height rowHeight=30, text at midpoint)
    // Updated: Removed "Description" column; added "Quantity" in its place
    const cellMidpoint = 15; // (rowHeight / 2)
    doc.font('Helvetica-Bold').fontSize(10);
    doc.text('Description', tableX, tableY + 10 + cellMidpoint, { align: 'center', width: colWidth }); // First column: service description (work_type)
    doc.text('Quantity', tableX + colWidth, tableY + 10 + cellMidpoint, { align: 'center', width: colWidth }); // New: Quantity column
    doc.text('Amount', tableX + 2 * colWidth, tableY + 10 + cellMidpoint, { align: 'center', width: colWidth }); // Retained: Amount (formatted to 1 decimal)

    // Data row - single row for this invoice (no multi-item loop needed)
    // Updated: Description shows work_type; Quantity from data.quantity (integer); Amount uses toFixed(1) for precision (e.g., 100.0)
    // Removed org_info from table (already in header); no Description column content
    doc.font('Helvetica').fontSize(10);
    const transWorkType = transliterate(data.work_type || 'Advertising services'); // Description: service type
    const quantityStr = data.quantity ? data.quantity.toString() : '1'; // Quantity: integer from data
    const amountStr = `${(data.total || 0).toFixed(1)} USDT`; // Amount: formatted to 1 decimal place
    doc.text(transWorkType, tableX, tableY + 10 + rowHeight + cellMidpoint, { align: 'center', width: colWidth });
    doc.text(quantityStr, tableX + colWidth, tableY + 10 + rowHeight + cellMidpoint, { align: 'center', width: colWidth });
    doc.text(amountStr, tableX + 2 * colWidth, tableY + 10 + rowHeight + cellMidpoint, { align: 'center', width: colWidth });

    // Borders: 1pt solid black, around cells with padding (unchanged structure for 2 rows)
    const borderWidth = 1;
    doc.lineWidth(borderWidth);
    // Outer border
    doc.rect(tableX, tableY + 10, tableWidth, rowHeight * 2).stroke(); // Header + data row height
    // Vertical lines (3 columns: 4 lines)
    let currentX = tableX;
    for (let i = 0; i <= 3; i++) { // 4 lines for 3 columns
        doc.moveTo(currentX, tableY + 10).lineTo(currentX, tableY + 10 + rowHeight * 2).stroke();
        currentX += colWidth;
    }
    // Horizontal lines
    doc.moveTo(tableX, tableY + 10).lineTo(tableX + tableWidth, tableY + 10).stroke(); // Top
    doc.moveTo(tableX, tableY + 10 + rowHeight).lineTo(tableX + tableWidth, tableY + 10 + rowHeight).stroke(); // Between header/data
    doc.moveTo(tableX, tableY + 10 + rowHeight * 2).lineTo(tableX + tableWidth, tableY + 10 + rowHeight * 2).stroke(); // Bottom

    // 3. Total Payment Line (fixed at 380pt)
    // Updated: Total formatted to 1 decimal place for consistency with Amount column
    const totalY = 380;
    doc.font('Helvetica-Bold').fontSize(12).text('Total Payment ', tableX, totalY);
    // Dashed line spanning most width
    doc.dash(5, { space: 5 }).moveTo(tableX + 100, totalY + 5).lineTo(tableX + tableWidth - 50, totalY + 5).undash().stroke();
    doc.text(` ${(data.total || 0).toFixed(1)} USDT`, tableX + tableWidth - 80, totalY, { align: 'right' });

    // Payment details closer to total (fixed at 410pt)
    const paymentY = 410;
    doc.font('Helvetica').fontSize(10).text('USDT TRC-20', margin + 20, paymentY, { lineGap: 3 });
    doc.font('Courier').fontSize(10).text('TWwhE7Sa6CUPN6Lq6NwKDQNrMqFJSNMZPR', margin + 20, paymentY + 15, { lineGap: 3 }); // Monospace for wallet, aligned in footer area

    // Company footer below payment (fixed at 450pt)
    const companyFooterY = 450;
    doc.font('Helvetica-Bold').fontSize(10).text('WARHOLA LTD', margin + 20, companyFooterY, { lineGap: 3 });
    doc.font('Helvetica').fontSize(10).text('27 Old Gloucester Street, London, United Kingdom, WC1N 3AX\nadv@partnerkin.com', margin + 20, companyFooterY + 15, { lineGap: 3 });

    doc.end();

    stream.on('finish', () => {
        console.log(`PDF generated and saved to ${filePath} with even vertical distribution and single-page fit.`);
    });
}