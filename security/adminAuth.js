// adminAuth.js - –ú–æ–¥—É–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

const db = require('../database');
const { verifyPassword, createAdminSessionToken, verifyAdminSessionToken } = require('./passwordHasher');
const { validateTelegramId, validateMessageText } = require('./inputValidator');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminSessions = new Map();

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function isAdmin(telegramId) {
    try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID
        const idValidation = validateTelegramId(telegramId);
        if (!idValidation.isValid) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const admin = await new Promise((resolve, reject) => {
            db.get("SELECT * FROM admins WHERE telegram_id = ?", [idValidation.value], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row);
                }
            });
        });
        
        return !!admin;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function verifyAdminPassword(telegramId, password) {
    try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const idValidation = validateTelegramId(telegramId);
        if (!idValidation.isValid) {
            console.error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', idValidation.error);
            return false;
        }
        
        const passwordValidation = validateMessageText(password, 256);
        if (!passwordValidation.isValid) {
            console.error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å:', passwordValidation.error);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdminUser = await isAdmin(telegramId);
        if (!isAdminUser) {
            console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const passwordData = await new Promise((resolve, reject) => {
            db.get("SELECT password_hash FROM admin_passwords WHERE telegram_id = ?", [idValidation.value], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row);
                }
            });
        });
        
        if (!passwordData || !passwordData.password_hash) {
            console.error(`–•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isValid = await verifyPassword(passwordValidation.value, passwordData.password_hash);
        
        if (isValid) {
            console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${telegramId} —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`);
        } else {
            console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${telegramId}`);
        }
        
        return isValid;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns {Promise<object|null>} - –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function createAdminSession(telegramId) {
    try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID
        const idValidation = validateTelegramId(telegramId);
        if (!idValidation.isValid) {
            console.error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', idValidation.error);
            return null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdminUser = await isAdmin(telegramId);
        if (!isAdminUser) {
            console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
            return null;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
        const tokenData = createAdminSessionToken(idValidation.value);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        adminSessions.set(telegramId, {
            token: tokenData.token,
            expiresAt: tokenData.expiresAt,
            createdAt: Date.now()
        });
        
        console.log(`‚úÖ –°–µ—Å—Å–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${telegramId} —Å–æ–∑–¥–∞–Ω–∞`);
        
        return {
            telegramId: idValidation.value,
            token: tokenData.token,
            expiresAt: tokenData.expiresAt
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param {string} token - –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function verifyAdminSession(telegramId, token) {
    try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const idValidation = validateTelegramId(telegramId);
        if (!idValidation.isValid) {
            return false;
        }
        
        if (!token || typeof token !== 'string') {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const session = adminSessions.get(telegramId);
        if (!session) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (session.token !== token) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
        const currentTime = Date.now();
        if (currentTime > session.expiresAt) {
            // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
            adminSessions.delete(telegramId);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const tokenData = verifyAdminSessionToken(token);
        if (!tokenData || tokenData.adminId !== telegramId.toString()) {
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return false;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function destroyAdminSession(telegramId) {
    try {
        const idValidation = validateTelegramId(telegramId);
        if (!idValidation.isValid) {
            return false;
        }
        
        const deleted = adminSessions.delete(idValidation.value);
        
        if (deleted) {
            console.log(`‚úÖ –°–µ—Å—Å–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${idValidation.value} —É–¥–∞–ª–µ–Ω–∞`);
        }
        
        return deleted;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return false;
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
function cleanupExpiredSessions() {
    try {
        const currentTime = Date.now();
        let cleanedCount = 0;
        
        for (const [telegramId, session] of adminSessions.entries()) {
            if (currentTime > session.expiresAt) {
                adminSessions.delete(telegramId);
                cleanedCount++;
            }
        }
        
        if (cleanedCount > 0) {
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
        }
        
        return cleanedCount;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π:', error);
        return 0;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏—è—Ö
 */
function getActiveSessions() {
    try {
        const sessions = [];
        const currentTime = Date.now();
        
        for (const [telegramId, session] of adminSessions.entries()) {
            sessions.push({
                telegramId,
                createdAt: session.createdAt,
                expiresAt: session.expiresAt,
                timeLeft: Math.max(0, session.expiresAt - currentTime),
                isActive: currentTime <= session.expiresAt
            });
        }
        
        return sessions;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:', error);
        return [];
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function checkAdminPermission(telegramId, action = 'general') {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdminUser = await isAdmin(telegramId);
        if (!isAdminUser) {
            return false;
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        
        // –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
 * @returns {Promise<object>} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
async function getAdminStats() {
    try {
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const adminCount = await new Promise((resolve, reject) => {
            db.get("SELECT COUNT(*) as count FROM admins", [], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row.count);
                }
            });
        });
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        const activeSessionsCount = adminSessions.size;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π (–±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ cleanup)
        const expiredSessionsCount = cleanupExpiredSessions();
        
        return {
            totalAdmins: adminCount,
            activeSessions: activeSessionsCount,
            expiredSessions: expiredSessionsCount,
            lastCleanup: new Date().toISOString()
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
        return {
            totalAdmins: 0,
            activeSessions: 0,
            expiredSessions: 0,
            lastCleanup: null,
            error: error.message
        };
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(cleanupExpiredSessions, 30 * 60 * 1000);

module.exports = {
    isAdmin,
    verifyAdminPassword,
    createAdminSession,
    verifyAdminSession,
    destroyAdminSession,
    cleanupExpiredSessions,
    getActiveSessions,
    checkAdminPermission,
    getAdminStats
};