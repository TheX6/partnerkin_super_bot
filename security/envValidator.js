// envValidator.js - –ú–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateEnvironment() {
    const result = {
        isValid: true,
        errors: [],
        warnings: [],
        missing: [],
        invalid: []
    };
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredVars = [
        {
            name: 'TELEGRAM_TOKEN',
            description: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
            validator: (value) => {
                if (!value || typeof value !== 'string') {
                    return false;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ)
                return /^\d+:[a-zA-Z0-9_-]+$/.test(value);
            }
        },
        {
            name: 'ADMIN_PASSWORD',
            description: '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            validator: (value) => {
                if (!value || typeof value !== 'string') {
                    return false;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                return value.length >= 8;
            }
        }
    ];
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const recommendedVars = [
        {
            name: 'DB_TYPE',
            description: '–¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return ['postgresql'].includes(value);
            }
        },
        {
            name: 'DB_HOST',
            description: '–•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return typeof value === 'string' && value.length > 0;
            }
        },
        {
            name: 'DB_PORT',
            description: '–ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                const port = parseInt(value);
                return !isNaN(port) && port > 0 && port <= 65535;
            }
        },
        {
            name: 'DB_NAME',
            description: '–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return typeof value === 'string' && value.length > 0;
            }
        },
        {
            name: 'DB_USER',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return typeof value === 'string' && value.length > 0;
            }
        },
        {
            name: 'DB_PASSWORD',
            description: '–ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return typeof value === 'string' && value.length > 0;
            }
        },
        {
            name: 'NODE_ENV',
            description: '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return ['development', 'production', 'test'].includes(value);
            }
        },
        {
            name: 'SESSION_SECRET',
            description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Å—Å–∏–π',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                return typeof value === 'string' && value.length >= 16;
            }
        },
        {
            name: 'BCRYPT_ROUNDS',
            description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è bcrypt',
            validator: (value) => {
                if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                const rounds = parseInt(value);
                return !isNaN(rounds) && rounds >= 10 && rounds <= 15;
            }
        }
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for (const varInfo of requiredVars) {
        const value = process.env[varInfo.name];
        
        if (!value) {
            result.missing.push(varInfo.name);
            result.errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${varInfo.name} (${varInfo.description})`);
            result.isValid = false;
        } else if (!varInfo.validator(value)) {
            result.invalid.push({ name: varInfo.name, value });
            result.errors.push(`–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${varInfo.name} (${varInfo.description})`);
            result.isValid = false;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for (const varInfo of recommendedVars) {
        const value = process.env[varInfo.name];
        
        if (value && !varInfo.validator(value)) {
            result.invalid.push({ name: varInfo.name, value });
            result.warnings.push(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${varInfo.name} (${varInfo.description})`);
        }
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (process.env.ADMIN_PASSWORD === 'partnerkin1212') {
        result.warnings.push('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.');
    }
    
    if (process.env.DB_PASSWORD && process.env.DB_PASSWORD.length < 8) {
        result.warnings.push('‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
    }
    
    if (process.env.NODE_ENV === 'production') {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è production
        if (!process.env.SESSION_SECRET) {
            result.warnings.push('‚ö†Ô∏è –í production —Ä–µ–∂–∏–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SESSION_SECRET.');
        }
        
        if (process.env.TELEGRAM_TOKEN && process.env.TELEGRAM_TOKEN.includes('test')) {
            result.warnings.push('‚ö†Ô∏è –í production —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω Telegram.');
        }
    }
    
    return result;
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
 * @param {object} validationResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function printValidationResult(validationResult) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    console.log('=====================================');
    
    if (validationResult.isValid) {
        console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
        console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        console.log('');
        
        if (validationResult.missing.length > 0) {
            console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
            validationResult.missing.forEach(varName => {
                console.log(`  ‚ùå ${varName}`);
            });
            console.log('');
        }
        
        if (validationResult.invalid.length > 0) {
            console.log('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
            validationResult.invalid.forEach(({ name, value }) => {
                console.log(`  ‚ùå ${name}: ${value ? `'${value}'` : '–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'}`);
            });
            console.log('');
        }
        
        console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
    }
    
    if (validationResult.warnings.length > 0) {
        console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
        validationResult.warnings.forEach(warning => {
            console.log(`  ${warning}`);
        });
        console.log('');
    }
    
    if (validationResult.isValid) {
        console.log('üéâ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
function validateAndExit() {
    const result = validateEnvironment();
    printValidationResult(result);
    
    if (!result.isValid) {
        console.log('');
        console.log('‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        process.exit(1);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * @returns {object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function getConfigInfo() {
    return {
        nodeEnv: process.env.NODE_ENV || 'development',
        dbType: process.env.DB_TYPE || 'postgresql',
        hasTelegramToken: !!process.env.TELEGRAM_TOKEN,
        hasAdminPassword: !!process.env.ADMIN_PASSWORD,
        usesDefaultAdminPassword: process.env.ADMIN_PASSWORD === 'partnerkin1212',
        hasSessionSecret: !!process.env.SESSION_SECRET,
        bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS) || 12
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
function checkCompatibility() {
    const result = {
        isCompatible: true,
        issues: []
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Node.js
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    if (majorVersion < 14) {
        result.isCompatible = false;
        result.issues.push(`–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js –≤–µ—Ä—Å–∏–∏ 14 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${nodeVersion}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    try {
        require('bcrypt');
    } catch (error) {
        result.isCompatible = false;
        result.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç bcrypt. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: npm install bcrypt');
    }
    
    try {
        require('validator');
    } catch (error) {
        result.isCompatible = false;
        result.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç validator. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: npm install validator');
    }
    
    return result;
}

module.exports = {
    validateEnvironment,
    printValidationResult,
    validateAndExit,
    getConfigInfo,
    checkCompatibility
};